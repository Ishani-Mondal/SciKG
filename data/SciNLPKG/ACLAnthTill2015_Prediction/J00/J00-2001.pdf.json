{"title": [{"text": "Integrating Text Planning and Linguistic Choice Without Abandoning Modularity: The IGEN Generator", "labels": [], "entities": [{"text": "Integrating Text Planning and Linguistic Choice", "start_pos": 0, "end_pos": 47, "type": "TASK", "confidence": 0.727862815062205}, {"text": "IGEN Generator", "start_pos": 83, "end_pos": 97, "type": "DATASET", "confidence": 0.7833976745605469}]}], "abstractContent": [{"text": "Natural language generation is usually divided into separate text planning and linguistic components.", "labels": [], "entities": [{"text": "Natural language generation", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.630426158507665}]}, {"text": "This division, though, assumes that the two components can operate independently, which is not always true.", "labels": [], "entities": []}, {"text": "The IGEN generator eliminates the need for this assumption; it handles interactions between the components without sacri~cing the advantages of modularity.", "labels": [], "entities": []}, {"text": "IGEN accomplishes this by means of annotations that its linguistic component places on the structures it builds; these annotations provide an abstract description of the effects of particular linguistic choices, allowing the planner to evaluate these choices without needing any linguistic knowledge.", "labels": [], "entities": []}, {"text": "This approach allows IGEN to vary the work done by each component independently, even in cases where the final output depends on interactions between them.", "labels": [], "entities": []}, {"text": "In addition, since IGEN explicitly models the effects of linguistic choices, it can gracefully handle situations where the available time or linguistic resources are limited.", "labels": [], "entities": []}], "introductionContent": [{"text": "Programs that generate natural language have generally been divided into two largely independent components: a text planning component that organizes the information to be expressed, and a linguistic component that converts the information into grammatical sentences of some natural language (e.g.,.", "labels": [], "entities": []}, {"text": "This division seems natural, and has indeed proven useful, because the two components deal with different kinds of data and involve different kinds of reasoning.", "labels": [], "entities": []}, {"text": "The planning component reasons about information and text structures to plan a coherent discourse, while the linguistic component arranges the lexical elements and syntactic constructions available in some language to ensure the resulting text's grammaticality and comprehensibility.", "labels": [], "entities": []}, {"text": "This division into independent components, though, is only tenable if the decisions each component must make can be made independently.", "labels": [], "entities": []}, {"text": "If some of the generator's work involves both text planning and purely linguistic issues, there will be noway to make the necessary decisions without violating the generator's modularity.", "labels": [], "entities": []}, {"text": "As we shall see, natural language generation does indeed involve such decisions.", "labels": [], "entities": [{"text": "natural language generation", "start_pos": 17, "end_pos": 44, "type": "TASK", "confidence": 0.6724374492963155}]}, {"text": "The need to handle interactions between text planning and linguistic concerns thus seems to require either abandoning the division into separate components (e.g.,, with the resulting increase in complexity, or foregoing the ability to handle these interactions at all (as advocated in Reiter).", "labels": [], "entities": []}, {"text": "A third option is to identify possible interactions in advance and handle them as special cases, but this only allows the generator to handle those interactions that have been antici- pated in advance.", "labels": [], "entities": []}, {"text": "Furthermore, handling the interactions often requires violating the modularity of the system, because detecting when the special case has occurred still requires both planning and linguistic knowledge.", "labels": [], "entities": []}, {"text": "The IGEN generator solves this problem.", "labels": [], "entities": [{"text": "IGEN generator", "start_pos": 4, "end_pos": 18, "type": "DATASET", "confidence": 0.8233410120010376}]}, {"text": "IGEN handles interactions between the text planning and linguistic components without having to sacrifice any of the generator's modularity.", "labels": [], "entities": [{"text": "IGEN", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.6796894073486328}]}, {"text": "The key to IGEN's approach is the use of annotations that the linguistic component attaches to each linguistic expression it constructs.", "labels": [], "entities": []}, {"text": "These annotations abstract away from the details of the linguistic expressions, describing only those properties of the expressions that are potentially relevant to the planner.", "labels": [], "entities": []}, {"text": "The planner can then evaluate the choices made by the linguistic component and determine how those choices interact with the text plan independently of the linguistic component's processes and data structures.", "labels": [], "entities": []}, {"text": "As a result, IGEN can make decisions involving interactions between the components while retaining complete modularity.", "labels": [], "entities": []}, {"text": "In fact, replacing IGEN's normal linguistic component with one fora different language involves no change in the planner despite the fact that the two languages have d~-ferent idiomatic expressions for some of the sentences being generated; the planner's processing is identical in both languages.", "labels": [], "entities": []}, {"text": "Furthermore, since the annotations allow IGEN to explicitly model the effects of its decisions, IGEN is able to gracefully handle the effects of limitations on processing time or linguistic resources; since IGEN always knows how well a given linguistic construction carries out its plan, it can choose the best available construction when it can't find an ideal one.", "labels": [], "entities": []}], "datasetContent": [{"text": "5. Else if Option has any MA~S-IMPLICIT annotations, evaluation is : HIGH.", "labels": [], "entities": [{"text": "MA", "start_pos": 26, "end_pos": 28, "type": "METRIC", "confidence": 0.9910118579864502}, {"text": "HIGH", "start_pos": 69, "end_pos": 73, "type": "METRIC", "confidence": 0.995794415473938}]}, {"text": "6. Else evaluation is :VERY-HIGH (because Option must have a MAKES-EXPLICIT annotation).", "labels": [], "entities": [{"text": "VERY-HIGH", "start_pos": 23, "end_pos": 32, "type": "METRIC", "confidence": 0.9988802075386047}]}, {"text": "Let Adjustment = 0. 2. For each MISSING-INFO annotation attached to Option: Subtract 1/2 from Adjustment if its argument is an item in the plan (1 if it's a critical item).", "labels": [], "entities": [{"text": "MISSING-INFO", "start_pos": 32, "end_pos": 44, "type": "METRIC", "confidence": 0.6971742510795593}]}], "tableCaptions": []}