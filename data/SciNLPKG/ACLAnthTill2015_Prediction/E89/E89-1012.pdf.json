{"title": [{"text": "Programming in Logic with Constraints for Natural Language Processing", "labels": [], "entities": []}], "abstractContent": [{"text": "In this paper, we present a logic-based computational model for movement theory in Government and Binding Theory.", "labels": [], "entities": [{"text": "movement theory", "start_pos": 64, "end_pos": 79, "type": "TASK", "confidence": 0.8225049376487732}, {"text": "Government and Binding Theory", "start_pos": 83, "end_pos": 112, "type": "TASK", "confidence": 0.7062107622623444}]}, {"text": "For that purpose, we have designed a language called DISLOG.", "labels": [], "entities": []}, {"text": "DISLOG stands for programming in logic with discontinuities and permits to express in a simple, concise and declarative way relations or constraints between non-contiguous elements in a structure.", "labels": [], "entities": []}, {"text": "DISLOG is also weel adapted to model other types of linguistic phenomena like Quantifier Raising involving long-distance relations or constraints.", "labels": [], "entities": [{"text": "DISLOG", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.7371711730957031}, {"text": "Quantifier Raising", "start_pos": 78, "end_pos": 96, "type": "TASK", "confidence": 0.8811158537864685}]}], "introductionContent": [{"text": "Many areas of natural language syntax and semantics area fruitful source of inspiration for computer languages and systems designers.", "labels": [], "entities": []}, {"text": "The complexity of natural language and the high level of abstraction of most linguistic and semantic theories have motivated the emergence of highly abstract and transparent programming languages.", "labels": [], "entities": []}, {"text": "One of the most striking examples is undoubtedly Prolog, initially designed for natural language parsing, via Metamorphosis Grammars.", "labels": [], "entities": [{"text": "natural language parsing", "start_pos": 80, "end_pos": 104, "type": "TASK", "confidence": 0.6750727295875549}]}, {"text": "For a few years, the Logic Programming paradigm has been augmented with a number of technical and formal devices designed to extend its expressive power.", "labels": [], "entities": [{"text": "Logic Programming paradigm", "start_pos": 21, "end_pos": 47, "type": "TASK", "confidence": 0.8394235372543335}]}, {"text": "New logic programming languages have emerged, several of them motivated by natural language processing problems.", "labels": [], "entities": []}, {"text": "Among them let us mention: CIL, designed to express in a direct way concepts of Situation Semantics, MOLOG, an extension to Prolog designed to specify in a very simple and declarative way the semantics of modal operators and ~,-Prolog (, designed to deal with X-expressions and X-reduction.", "labels": [], "entities": [{"text": "MOLOG", "start_pos": 101, "end_pos": 106, "type": "METRIC", "confidence": 0.9201297760009766}]}, {"text": "Recently, the Logic Programming paradigm has been augmented with the concept of constrained logic programming.", "labels": [], "entities": [{"text": "Logic Programming paradigm", "start_pos": 14, "end_pos": 40, "type": "TASK", "confidence": 0.8510763843854269}]}, {"text": "The basic research done within this area amounts to specifying tools fora more refined control on the type of values or terms a variable in a program can stand for.", "labels": [], "entities": []}, {"text": "Answers to goals can be intensional: they are sets of equations (constraints) rather than mere values.", "labels": [], "entities": []}, {"text": "Furthermore, the idea at the operational level, incorrect assignments are filtered out as soon as they are encountered when building a proof, making thus proof procedures more efficient.", "labels": [], "entities": []}, {"text": "In this document, we deal with anew, original, type of CLP mechanism: constraints on proof trees.", "labels": [], "entities": []}, {"text": "This type of constraint has emerged from, in particular, the definition of a computational model for the quantifier raising operation and for movement theory in Government and Binding theory (noted hereafter as GB).", "labels": [], "entities": [{"text": "Government and Binding theory", "start_pos": 161, "end_pos": 190, "type": "TASK", "confidence": 0.6932111978530884}]}, {"text": "We model those phenomena in terms of constraints between non-contiguous elements in a structure.", "labels": [], "entities": []}, {"text": "For example, we want to express constraints between a moved constituent and its co-indexed trace.", "labels": [], "entities": []}, {"text": "Constraints are expressed in terms of relations between subtrees in a syntactic tree or in terms of relations between parenthetized constituents in the now more commonly adopted annotated surface forms of sentences.", "labels": [], "entities": []}, {"text": "We have designed Dislog, programming in logic with discontinuities, which permits to express relations between non-contiguous elements in a structure in a simple, declarative and concise way.", "labels": [], "entities": []}, {"text": "Dislog is an extension to Prolog; its procedural and declarative semantics are given in, computer applications like compiler writing and planning are given in, its use in natural language parsing for free-phrase order languages is given in.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 26, "end_pos": 32, "type": "DATASET", "confidence": 0.901238203048706}, {"text": "compiler writing and planning", "start_pos": 116, "end_pos": 145, "type": "TASK", "confidence": 0.7289619296789169}, {"text": "natural language parsing for free-phrase order languages", "start_pos": 171, "end_pos": 227, "type": "TASK", "confidence": 0.7424542818750653}]}, {"text": "In the present document we will focus on modelling movement theory in GB ( and Quantifier Raising, which have been in the past two years our main guidelines to specify Dislog.", "labels": [], "entities": [{"text": "movement theory", "start_pos": 51, "end_pos": 66, "type": "TASK", "confidence": 0.7443312406539917}, {"text": "GB", "start_pos": 70, "end_pos": 72, "type": "DATASET", "confidence": 0.5551919341087341}, {"text": "Quantifier Raising", "start_pos": 79, "end_pos": 97, "type": "TASK", "confidence": 0.7743757963180542}]}, {"text": "We do not have in mind to build a complete model of GB theory, but we feel that the transfer of some of its main principles and results to the field of natural language processing is worth investigating and is very promising for reasons we will develop hereafter.", "labels": [], "entities": [{"text": "GB theory", "start_pos": 52, "end_pos": 61, "type": "TASK", "confidence": 0.8676041066646576}]}, {"text": "We are also convinced that GB principles should be paired with other approaches of AI to deal, for example, with the lexicon, lexical semantics, feature representation and control systems and, finally, logical form construction.", "labels": [], "entities": [{"text": "logical form construction", "start_pos": 202, "end_pos": 227, "type": "TASK", "confidence": 0.6392658253510793}]}], "datasetContent": [], "tableCaptions": []}