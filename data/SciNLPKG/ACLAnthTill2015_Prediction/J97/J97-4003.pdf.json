{"title": [{"text": "A Computational Treatment of Lexical Rules in HPSG as Covariation in Lexical Entries", "labels": [], "entities": [{"text": "HPSG", "start_pos": 46, "end_pos": 50, "type": "DATASET", "confidence": 0.8709717988967896}]}], "abstractContent": [{"text": "This paper proposes anew computational treatment of lexical rules as used in the HPSG framework.", "labels": [], "entities": [{"text": "HPSG framework", "start_pos": 81, "end_pos": 95, "type": "DATASET", "confidence": 0.9170398116111755}]}, {"text": "A compiler is described which translates a set of lexical rules and their interaction into a definite clause encoding, which is called by the base lexical entries in the lexicon.", "labels": [], "entities": []}, {"text": "This way, the disjunctive possibilities arising from lexical rule application are encoded as systematic covariation in the specification of lexical entries.", "labels": [], "entities": []}, {"text": "The compiler ensures the automatic transfer of properties not changed by a lexical rule.", "labels": [], "entities": []}, {"text": "Program transformation techniques are used to advance the encoding.", "labels": [], "entities": [{"text": "Program transformation", "start_pos": 0, "end_pos": 22, "type": "TASK", "confidence": 0.7389454692602158}]}, {"text": "The final output of the compiler constitutes an efficient computational counterpart of the linguistic generalizations captured by lexical rules and allows on-the-fly application of lexical rules.", "labels": [], "entities": []}], "introductionContent": [{"text": "In the paradigm of HPSG, lexical rules have become one of the key mechanisms used in current linguistic analysis.", "labels": [], "entities": []}, {"text": "Computationally, lexical rules have mainly been dealt within two ways: On the one hand, lexical rules are used to expand out the full lexicon at compile-time.", "labels": [], "entities": []}, {"text": "On the other hand, lexical rules are encoded as unary phrase structure rules.", "labels": [], "entities": []}, {"text": "Both of these computational treatments of lexical rules, however, have significant shortcomings with respect to lexical rules as used in HPSG.", "labels": [], "entities": [{"text": "HPSG", "start_pos": 137, "end_pos": 141, "type": "DATASET", "confidence": 0.9098591804504395}]}, {"text": "A computational treatment expanding out the lexicon cannot be used for the increasing number of HPSG analyses that propose lexical rules that would result in an infinite lexicon.", "labels": [], "entities": []}, {"text": "Most current HPSG analyses of Dutch, German, Italian, and French fall into that category.", "labels": [], "entities": []}, {"text": "1 Furthermore, since lexical rules in such an approach only serve in a precompilation step, the generalizations captured by the lexical rules cannot be used at run-time.", "labels": [], "entities": []}, {"text": "Finally, all such treatments of lexical rules currently available presuppose a fully explicit notation of lexical rule specifications that transfer properties not changed by the lexical rules to the newly created lexical entry.", "labels": [], "entities": []}, {"text": "This conflicts with the standard assumption made in HPSG that only the properties changed by a lexical rule need be mentioned.", "labels": [], "entities": [{"text": "HPSG", "start_pos": 52, "end_pos": 56, "type": "DATASET", "confidence": 0.9071754813194275}]}, {"text": "As shown in this is a well-motivated convention since it avoids splitting up lexical rules to transfer the specifications that must be preserved for different lexical entries.", "labels": [], "entities": []}, {"text": "\u2022 The authors are listed alphabetically.", "labels": [], "entities": []}, {"text": "email: {dm,minnen}@sfs.nphil.uni-tuebingen.de URL: http://www.sfs.nphil.uni-tuebingen.de/sfb /b4home.html 1 This is, for example, the case for all proposals working with verbal lexical entries that raise the arguments of a verbal complement () that also use lexical rules such as the Complement Extraction Lexical Rule ( or the Complement Cliticization Lexical Rule to operate on those raised elements.", "labels": [], "entities": []}, {"text": "Also an analysis treating adjunct extraction via lexical rules results in an infinite lexicon.", "labels": [], "entities": [{"text": "adjunct extraction", "start_pos": 26, "end_pos": 44, "type": "TASK", "confidence": 0.7335972189903259}]}, {"text": "Treatments of lexical rules as unary phrase structure rules also require their fully explicit specification, which entails the last problem mentioned above.", "labels": [], "entities": []}, {"text": "In addition, computationally treating lexical rules on a par with phrase structure rules fails to take computational advantage of their specific properties.", "labels": [], "entities": []}, {"text": "For example, the interaction of lexical rules is explored at run-time, even though the possible interaction can be determined at compile-time given the information available in the lexical rules and the base lexical entries.", "labels": [], "entities": []}, {"text": "Based on the research results reported in, we propose anew computational treatment of lexical rules that overcomes these shortcomings and results in a more efficient processing of lexical rules as used in HPSG.", "labels": [], "entities": [{"text": "HPSG", "start_pos": 205, "end_pos": 209, "type": "DATASET", "confidence": 0.8966995477676392}]}, {"text": "We developed a compiler that takes as its input a set of lexical rules, deduces the necessary transfer of properties not changed by the individual lexical rules, and encodes the set of lexical rules and their interaction into definite relations constraining lexical entries.", "labels": [], "entities": []}, {"text": "Each lexical entry is automatically extended with a definite clause encoding of the lexical rule applications which the entry can undergo.", "labels": [], "entities": []}, {"text": "The definite clauses thereby introduce what we refer to as systematic covariation in lexical entries.", "labels": [], "entities": []}, {"text": "Definite relations area convenient way of encoding the interaction of lexical rules, as they readily support various program transformations to improve the encoding: We show that the definite relations produced by the compiler can be refined by program transformation techniques to increase efficiency.", "labels": [], "entities": []}, {"text": "The resulting encoding allows the execution of lexical rules on-the-fly, i.e., coroutined with other constraints at sometime after lexical lookup.", "labels": [], "entities": []}, {"text": "The computational treatment of lexical rules proposed can be seen as an extension to the principled method discussed by) for encoding the main building block of HPSG grammars--the implicative constraints--as a logic program.", "labels": [], "entities": []}, {"text": "The structure of the paper is as follows: We start with a brief introduction of the formal background on which our approach is based in Section 2.", "labels": [], "entities": []}, {"text": "We then describe (Section 3) how lexical rules and their interaction can be encoded in a definite clause encoding that expresses systematic covariation in lexical entries.", "labels": [], "entities": []}, {"text": "We show how the encoding of lexical rule interaction can be improved by specializing it for different word classes and, in Section 4, focus on an improvement of this specialization step by means of program transformation techniques.", "labels": [], "entities": [{"text": "encoding of lexical rule interaction", "start_pos": 16, "end_pos": 52, "type": "TASK", "confidence": 0.7431020617485047}]}, {"text": "A further improvement relevant to on-the-fly application of lexical rules is presented in Section 5.", "labels": [], "entities": []}, {"text": "In Section 6, we discuss implementation results and illustrate the efficiency of the proposed encoding.", "labels": [], "entities": []}, {"text": "A comparison with other computational approaches to lexical rules (Section 7) and some concluding remarks (Section 8) end the paper.", "labels": [], "entities": []}], "datasetContent": [{"text": "The computational treatment of lexical rules as covariation in lexical entries was implemented in Prolog by the authors in cooperation with Dieter Martini for the ConTroll system (.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 98, "end_pos": 104, "type": "DATASET", "confidence": 0.9526901245117188}]}, {"text": "We tested the covariation approach with a complex grammar implementing an HPSG analysis covering the so-called aux-flip phenomenon, and partial-VP topicalization in the three clause types of German.", "labels": [], "entities": []}, {"text": "This test grammar includes eight lexical rules; some serve syntactic purposes, like the Partial-VP Topicalization Lexical Rule, others are of morphological nature as, for example, an inflectional lexical rule that relates nonfinite verbs to their finite form.", "labels": [], "entities": []}, {"text": "Our compiler distinguished seven word classes.", "labels": [], "entities": []}, {"text": "Some nouns and most verbal lexical entries fed lexical rules, and a single base lexical entry resulted in up to 12 derivations.", "labels": [], "entities": []}], "tableCaptions": []}