{"title": [{"text": "Integrating a Large-scale, Reusable Lexicon with a Natural Language Generator", "labels": [], "entities": []}], "abstractContent": [{"text": "This paper presents the integration of a large-scale, reusable lexicon for generation with the FUF/SURGE unification-based syntactic realizer.", "labels": [], "entities": [{"text": "FUF/SURGE unification-based syntactic realizer", "start_pos": 95, "end_pos": 141, "type": "TASK", "confidence": 0.6909027298291525}]}, {"text": "The lexicon was combined from multiple existing resources in a semi-automatic process.", "labels": [], "entities": []}, {"text": "The integration is a multi-step unification process.", "labels": [], "entities": []}, {"text": "This integration allows the reuse of lexical, syntactic, and semantic knowledge encoded in the lexicon in the development of lexical chooser module in a generation system.", "labels": [], "entities": []}, {"text": "The lexicon also brings other benefits to a generation system: for example, the ability to generate many lexical and syntactic paraphrases and the ability to avoid non-grammatical output.", "labels": [], "entities": []}], "introductionContent": [{"text": "Natural language generation requires lexical, syntactic, and semantic knowledge in order to produce meaningful and fluent output.", "labels": [], "entities": [{"text": "Natural language generation", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.6817585428555807}]}, {"text": "Such knowledge is often hand-coded anew when a different application is developed.", "labels": [], "entities": []}, {"text": "We present in this paper the integration of a large-scale, reusable lexicon with a natural language generator, FUF/SURGE; we show that by integrating the lexicon with FUF/SURGE as a tactical component, we can reuse the knowledge encoded in the lexicon and automate to some extent the development of the lexical realization component in a generation application.", "labels": [], "entities": []}, {"text": "The integration of the lexicon with FUF/SURGE also brings other benefits to generation, including the possibility to accept a semantic input at the level of WordNet synsets, the production of lexical and syntactic paraphrases, the prevention of nongrammatical output, reuse across applications, and wide coverage.", "labels": [], "entities": []}, {"text": "We present the process of integrating the lexicon with FUF/SUR(;E. including how to represenl the lexicon in FUF format, how to unify input with the lexicon incrementally to generate more sophisticated and informative representations, and how to design an appropriate semantic input format so that the integration of the lexicon and FUF/SURGE can be done easily.", "labels": [], "entities": [{"text": "FUF/SUR", "start_pos": 55, "end_pos": 62, "type": "DATASET", "confidence": 0.8020807504653931}]}, {"text": "This paper is organized as follows.", "labels": [], "entities": []}, {"text": "In Section 2, we explain why a reusable lexical chooser for generation needs to be developed.", "labels": [], "entities": []}, {"text": "In Section 3, we present the large-scale, reusable lexicon which we combined from multiple resources, and illustrate its benefits to generation by examples.", "labels": [], "entities": []}, {"text": "In Section 4, we describe the process of integrating the lexicon with FUF/SURGE, which includes four unification steps, with each step adding additional lexical or syntactic information.", "labels": [], "entities": [{"text": "FUF/SURGE", "start_pos": 70, "end_pos": 79, "type": "METRIC", "confidence": 0.5136261085669199}]}, {"text": "Other applications and comparison with related work are presented in Section 5.", "labels": [], "entities": []}, {"text": "Finally, we conclude by discussing future work.", "labels": [], "entities": []}, {"text": "2 Building a reusable lexical chooser for generation While reusable components have been widely used in generation applications, the concept of a \"reusable lexical chooser\" for generation remains novel.", "labels": [], "entities": []}, {"text": "There are two main reasons why such a lexical chooser has not been developed in the past: 1.", "labels": [], "entities": []}, {"text": "In the overall architecture of a generator, the lexical chooser is an internal component that depends on the semantic representation and for-.:malism and onthe syntactic realizer used by the application.", "labels": [], "entities": []}, {"text": "2. The lexical chooser links conceptual elements to lexical items.", "labels": [], "entities": []}, {"text": "Conceptual elements are by definition domain and application dependent (they are the primitive concepts used in an application knowledge base).", "labels": [], "entities": []}, {"text": "These primitives are not easily ported from application to application.", "labels": [], "entities": []}, {"text": "The emergence of standard architectures for generators)and the possibility to use a standard syntactic realizer answer the first issue.", "labels": [], "entities": []}, {"text": "To address the second issue, one must realize that if the whole lexical chooser cannot be made domainindependent, major parts can be made reusable.", "labels": [], "entities": []}, {"text": "The main argument is that lexical knowledge is modular.", "labels": [], "entities": []}, {"text": "Therefore, while choice of words is constrained by domain-specific conceptual knowledge (what information the sentences are to represent) on the one hand, it is also affected by several other dimensions: * inter-lexical constraints: collocations among words o pragmatic constraints: connotations of words o stylistic constraints: familiarity of words * syntactic constraints: government patterns of words, e.g., thematic structure of verbs.", "labels": [], "entities": []}, {"text": "We show in this paper how the separation of the syntactic and conceptual interfaces of lexical item definitions allows us to reuse a large amount of lexical knowledge across appli.cations.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}