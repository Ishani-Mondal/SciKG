{"title": [{"text": "A Uniform Method of Grammar Extraction and Its Applications", "labels": [], "entities": [{"text": "Grammar Extraction", "start_pos": 20, "end_pos": 38, "type": "TASK", "confidence": 0.7456338107585907}]}], "abstractContent": [{"text": "Grammars are core elements of many NLP applications.", "labels": [], "entities": []}, {"text": "In this paper, we present a system that automatically extracts lexicalized grammars from annotated corpora.", "labels": [], "entities": []}, {"text": "The data produced by this system have been used in several tasks, such as training NLP tools (such as Supertaggers) and estimating the coverage of harid-crafted grammars.", "labels": [], "entities": []}, {"text": "We report experimental results on two of those tasks and compare our approaches with related work.", "labels": [], "entities": []}], "introductionContent": [{"text": "There are various grammar frameworks proposed for natural languages.", "labels": [], "entities": []}, {"text": "We take Lexicalized Tree-adjoining Grammars (LTAGs) as representative of a class of lexicalized grammars.) are appealing for representing various phenomena in natural languages due to its linguistic and computational properties.", "labels": [], "entities": []}, {"text": "In the last decade, LTAG has been used in several aspects of natural language understanding (e.g., parsing (, semantics, and discourse) and a number of NLP applications (e.g., machine translation (, information retrieval, and generation.", "labels": [], "entities": [{"text": "natural language understanding", "start_pos": 61, "end_pos": 91, "type": "TASK", "confidence": 0.6588993469874064}, {"text": "parsing", "start_pos": 99, "end_pos": 106, "type": "TASK", "confidence": 0.9633817672729492}, {"text": "machine translation", "start_pos": 176, "end_pos": 195, "type": "TASK", "confidence": 0.8238828182220459}, {"text": "information retrieval", "start_pos": 199, "end_pos": 220, "type": "TASK", "confidence": 0.7740963697433472}]}, {"text": "This paper describes a system that extracts LTAGs from annotated corpora (i.e., Treebanks).", "labels": [], "entities": []}, {"text": "There has been much work done on extracting Context-Free grammars (CFGs)).", "labels": [], "entities": [{"text": "extracting Context-Free grammars (CFGs))", "start_pos": 33, "end_pos": 73, "type": "TASK", "confidence": 0.7945620020230612}]}, {"text": "However, extracting LTAGs is more complicated than extracting CFGs because of the differences between LTAGs and CFGs.", "labels": [], "entities": [{"text": "extracting LTAGs", "start_pos": 9, "end_pos": 25, "type": "TASK", "confidence": 0.7809320092201233}]}, {"text": "First, the primitive elements of an LTAG are lexicalized tree structures (called elementary trees), not context-free rules (which can be seen. as trees with depth one).", "labels": [], "entities": []}, {"text": "Therefore, an LTAG extraction algorithm needs to examine a larger portion of a phrase structure to build an elementary tree.", "labels": [], "entities": [{"text": "LTAG extraction", "start_pos": 14, "end_pos": 29, "type": "TASK", "confidence": 0.8547775745391846}]}, {"text": "Second, the composition operations in LTAG are substitution (same as the one in a CFG) and adjunction.", "labels": [], "entities": []}, {"text": "It is the operation of adjunction that distinguishes LTAG from all other formalisms.", "labels": [], "entities": []}, {"text": "Third, unlike in CFGs, the parse trees (also known as derived trees in the LTAG) and the derivation trees (which describe how elementary trees are combined to form parse trees) are different in the LTAG formalism in the sense that a parse tree can be produced by several distinct derivation trees.", "labels": [], "entities": []}, {"text": "Therefore, to provide training data for statistical LTAG parsers, an LTAG extraction algorithm should also build derivation trees.", "labels": [], "entities": [{"text": "LTAG extraction", "start_pos": 69, "end_pos": 84, "type": "TASK", "confidence": 0.7179483622312546}]}, {"text": "For each phrase structure in a Treebank, our system creates a fully bracketed phrase structure, a set of elementary trees and a derivation tree.", "labels": [], "entities": []}, {"text": "The data produced by our system have been used in several NLP tasks.", "labels": [], "entities": []}, {"text": "We report experimental results on two of those applications and compare our approaches with related work.", "labels": [], "entities": []}], "datasetContent": [{"text": "We have ran LexTract on the one-millionword English Penn Treebank () and got two Treebank grammars.", "labels": [], "entities": [{"text": "LexTract", "start_pos": 12, "end_pos": 20, "type": "DATASET", "confidence": 0.934700608253479}, {"text": "English Penn Treebank", "start_pos": 44, "end_pos": 65, "type": "DATASET", "confidence": 0.7883515954017639}]}, {"text": "The first one, G1, uses the Treebank's tagset.", "labels": [], "entities": [{"text": "the Treebank's tagset", "start_pos": 24, "end_pos": 45, "type": "DATASET", "confidence": 0.8084662705659866}]}, {"text": "The second Treebank grammar, G2, uses a reduced tagset, where some tags in the Treebank tagset are merged into a single tag.", "labels": [], "entities": []}, {"text": "For example, the tags for verbs,", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: Grammars extracted from three Treebanks  'r", "labels": [], "entities": []}, {"text": " Table 2: Matched templates in two grammars", "labels": [], "entities": []}, {"text": " Table 4: Supertagging results based on three  different conversion algorithms", "labels": [], "entities": [{"text": "Supertagging", "start_pos": 10, "end_pos": 22, "type": "TASK", "confidence": 0.923381507396698}]}]}