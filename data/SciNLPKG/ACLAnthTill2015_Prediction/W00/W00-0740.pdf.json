{"title": [{"text": "Incorporating Linguistics Constraints into Inductive Logic Programming", "labels": [], "entities": [{"text": "Incorporating Linguistics Constraints", "start_pos": 0, "end_pos": 37, "type": "TASK", "confidence": 0.7707077463467916}]}], "abstractContent": [{"text": "We report work on effectively incorporating linguistic knowledge into grammar induction.", "labels": [], "entities": [{"text": "grammar induction", "start_pos": 70, "end_pos": 87, "type": "TASK", "confidence": 0.7882881760597229}]}, {"text": "We use a highly interactive bottom-up inductive logic programming (ILP) algorithm to learn 'missing' grammar rules from an :incomplete grammar.", "labels": [], "entities": []}, {"text": "Using linguistic constraints on, for example, head features and gap threading, reduces the search space to such an extent that, in the small-scale experiments reported here, we can generate and store all candidate grammar rules together with information about their coverage and linguistic properties.", "labels": [], "entities": []}, {"text": "This allows an appealingly simple and controlled method for generating linguistically plausible grammar rules.", "labels": [], "entities": []}, {"text": "Starting from abase of highly specific rules, we apply least general generalisation and inverse resolution to generate more general rules.", "labels": [], "entities": []}, {"text": "Induced rules are ordered, for example by coverage, for easy inspection by the user and at any point, the user can commit to a hypothe-sised rule and add it to the grammar.", "labels": [], "entities": [{"text": "coverage", "start_pos": 42, "end_pos": 50, "type": "METRIC", "confidence": 0.9659106135368347}]}, {"text": "Related work in ILP and computational linguistics is discussed.", "labels": [], "entities": [{"text": "computational linguistics", "start_pos": 24, "end_pos": 49, "type": "TASK", "confidence": 0.7439040541648865}]}], "introductionContent": [{"text": "A major advantage of inductive logic programming is the ability to incorporate domain knowledge (background knowledge) into the inductive process.", "labels": [], "entities": [{"text": "inductive logic programming", "start_pos": 21, "end_pos": 48, "type": "TASK", "confidence": 0.7023135523001353}]}, {"text": "In ILP domain knowledge is usually encoded by (i) a set of definite clauses declaring rules and facts which are true (or assumed to be true) in the domain and (ii) extra-logical constraints on the hypothesis space.", "labels": [], "entities": []}, {"text": "The ILP approach thus allows a very direct and flexible method of expressing domain knowledge.", "labels": [], "entities": []}, {"text": "In this paper, we report on continuation of the work described in), which attempts to maximise the effectiveness of linguistic knowledge when inducing a grammar.", "labels": [], "entities": []}, {"text": "We take an existing grammatical formalism (derived from the FraCaS Project) and extend it with inductive capabilities, rather than shoe-horning a grammar learning problem into a form suitable for some particular ILP algorithm.", "labels": [], "entities": [{"text": "FraCaS Project", "start_pos": 60, "end_pos": 74, "type": "DATASET", "confidence": 0.9720455706119537}]}, {"text": "This has major practical benefits, since the required linguistic knowledge can be encoded in a linguistically natural manner.", "labels": [], "entities": []}, {"text": "As in all real applications of ILP most effort is required in 'getting the background knowledge right'.", "labels": [], "entities": []}, {"text": "Being able to express this knowledge in a representation specifically developed to enable linguists to write down a grammar makes this step easier and quicker.", "labels": [], "entities": []}, {"text": "The paper is organised in a manner analogous to that of our algorithm.", "labels": [], "entities": []}, {"text": "In Section 2, we describe how to generate naive grammar rules directly from the chart produced during a failed parse.", "labels": [], "entities": []}, {"text": "The essentials of this approach have already been described in), but we briefly describe it here for completeness and also because we have altered its implementation.", "labels": [], "entities": []}, {"text": "Section 3 describes the most important step of the algorithm--the representation and use of linguistic constraints at an early stage in the inductive process.", "labels": [], "entities": []}, {"text": "Section 4 describes the two generalisation operators currently used in the search byway of an example.", "labels": [], "entities": []}, {"text": "Section 5 describes two further experiments very briefly.", "labels": [], "entities": []}, {"text": "Most of the various components of our method have been investigated previously either in the ILP or the computational linguistics literature: in Section 6 we discuss this related work.", "labels": [], "entities": []}, {"text": "In Section 7, we assess the current work and point to future work.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}