{"title": [{"text": "YAG : A Template-Based Generator for Real-Time Systems*", "labels": [], "entities": []}], "abstractContent": [], "introductionContent": [{"text": "YAG (Yet Another Generator) is a real-time, general-purpose, template-based generation system that will enable interactive applications to adapt natural language output to the interactive context without requiring developers to write all possible output strings ahead of time or to embed extensive knowledge of the grammar of the target language in the application.", "labels": [], "entities": []}, {"text": "Currently, designers of interactive systems who might wish to include dynamically generated text face a number of barriers; for example designers must decide (1) How hard will it be to link the application to the generator?", "labels": [], "entities": []}, {"text": "(2) Will the generator be fast enough?", "labels": [], "entities": []}, {"text": "(3) How much linguistic information will the application need to provide in order to get reasonable quality output?", "labels": [], "entities": []}, {"text": "(5) How much effort will be required to write a generation grammar that covers all the potential outputs of the application?", "labels": [], "entities": []}, {"text": "The design and implementation of YAG is intended to address each of these concerns.", "labels": [], "entities": [{"text": "YAG", "start_pos": 33, "end_pos": 36, "type": "TASK", "confidence": 0.8442912697792053}]}, {"text": "In particular, YAG offers the following benefits to applications and application designers: Support for Underspecified Inputs YAG supports knowledge-based systems by accepting two types of inputs: applications can either provide a feature structure (a set of featurevalue pairs) or provide a syntactically underspecified semantic structure that YAG will map onto a feature-based representation for realization.", "labels": [], "entities": []}, {"text": "YAG also provides an opportunity for an application to add syntactic constraints, such as whether to express a proposition as a question rather than a statement, as a noun-phrase rather than as a sentence, or as a pronoun rather than a full noun phrase.", "labels": [], "entities": []}, {"text": "Speed YAG has been designed to work in realtime.", "labels": [], "entities": [{"text": "Speed YAG", "start_pos": 0, "end_pos": 9, "type": "TASK", "confidence": 0.41320350766181946}]}, {"text": "The YAG ten,plate processing engine does not use search to realize text.", "labels": [], "entities": [{"text": "YAG ten,plate processing engine", "start_pos": 4, "end_pos": 35, "type": "DATASET", "confidence": 0.7285854369401932}]}, {"text": "thus the speed of generation depends oi1 the complexity of the template that the application selects.", "labels": [], "entities": []}, {"text": "\u00b0This work ha~s been supported by the National Science Foundation, under grants, I RI-97016 l 7 and ,,I,RI=9523666, and by lntel Corporation.", "labels": [], "entities": [{"text": "National Science Foundation", "start_pos": 38, "end_pos": 65, "type": "DATASET", "confidence": 0.9647457798322042}, {"text": "I RI-97016 l 7", "start_pos": 81, "end_pos": 95, "type": "METRIC", "confidence": 0.9069696366786957}, {"text": "I,RI=9523666", "start_pos": 102, "end_pos": 114, "type": "METRIC", "confidence": 0.899950901667277}]}, {"text": "not on the size of the grammar.", "labels": [], "entities": []}, {"text": "Short, simple utterances are always realized faster than longer ones.", "labels": [], "entities": []}, {"text": "(In many other approaches, speed is a function of the grammar size, because it is searched during realization.)", "labels": [], "entities": [{"text": "speed", "start_pos": 27, "end_pos": 32, "type": "METRIC", "confidence": 0.9880331754684448}]}, {"text": "Robustness In YAG, the realization of a template cannot fail.", "labels": [], "entities": []}, {"text": "Even if there are inconsistencies in its input (such as subject-verb disagreement), the generator will produce an understandable (if not grammatical) output.", "labels": [], "entities": []}, {"text": "Applications that need to enforce grammaticality can use the YAG preprocessor to detect missing or conflicting features and to supply acceptable values.", "labels": [], "entities": []}, {"text": "The preprocessor makes use of a declarative specification of slot constraints, based on an attribute grammar ().", "labels": [], "entities": []}, {"text": "This specification is modifiable and extensible by the application designer.", "labels": [], "entities": []}, {"text": "Expressiveness YAG offers an expressive language for specifying a generation grammar.", "labels": [], "entities": [{"text": "Expressiveness YAG", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.6253989785909653}]}, {"text": "This language can express units as small as a word o1\" as large as a document equally well.", "labels": [], "entities": []}, {"text": "Unlike the typical template-based approach, the valu(~s used to instantiate slots are not limited to simple strings, but can include a variety of structures, including conditional expressions oi references to other templates.", "labels": [], "entities": []}, {"text": "(This paper will include a more detailed discussion in the next section.)", "labels": [], "entities": []}, {"text": "Any declarative grammar, such as one based oll feature structures, would be expressible in YAG.", "labels": [], "entities": []}, {"text": "Coverage The coverage of YAG depends oil the number of templates that have been defined in its specification language.", "labels": [], "entities": []}, {"text": "In theory, any sentence maybe realized given an appropriate template.", "labels": [], "entities": []}, {"text": "In practice, an application builder must be concerned with whether it is possible to reuse existing templates or whether it is necessary to create new ones.", "labels": [], "entities": []}, {"text": "YAG simplifies the task of specifying a generation grammar in several ways: YAG itself comes in two versions, one in CLISP, one in JAVA, both of which run on a wide variety of platforms, including Unix and Windows 95/98.", "labels": [], "entities": [{"text": "JAVA", "start_pos": 131, "end_pos": 135, "type": "DATASET", "confidence": 0.856942355632782}]}, {"text": "In the remainder of this paper, we will describe YAG's template specification language, and some examples that illustrate the use of YAG from an application.", "labels": [], "entities": []}, {"text": "More details can be found in).", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}