{"title": [{"text": "Integrating Language Generation with Speech Synthesis Concept to Speech System", "labels": [], "entities": [{"text": "Integrating Language Generation", "start_pos": 0, "end_pos": 31, "type": "TASK", "confidence": 0.8669644196828207}]}], "abstractContent": [{"text": "Concept To Speech (CTS) systems are closely related to two other types of systems: Natural Language Generation (NLG) and Speech Synthesis (SS).", "labels": [], "entities": [{"text": "Natural Language Generation (NLG)", "start_pos": 83, "end_pos": 116, "type": "TASK", "confidence": 0.8058514098326365}, {"text": "Speech Synthesis (SS)", "start_pos": 121, "end_pos": 142, "type": "TASK", "confidence": 0.816351318359375}]}, {"text": "In this paper, we propose anew architecture fora CTS system.", "labels": [], "entities": []}, {"text": "A Speech Integrating Markup Language (SIML) is designed as an general interface for integrating NLG and SS.", "labels": [], "entities": [{"text": "Speech Integrating Markup Language (SIML)", "start_pos": 2, "end_pos": 43, "type": "TASK", "confidence": 0.8252646837915693}]}, {"text": "We also present a CTS system fora multimedia presentation generation application.", "labels": [], "entities": [{"text": "multimedia presentation generation", "start_pos": 34, "end_pos": 68, "type": "TASK", "confidence": 0.6322121123472849}]}, {"text": "We discuss how to extend the current CTS system based on the new architecture.", "labels": [], "entities": []}, {"text": "Currently , only limited semantic, syntactic and prosodic features are covered inour prototype system.", "labels": [], "entities": []}], "introductionContent": [{"text": "Currently, there are two ways to develop a ConceptTo-Speech (CTS) system.", "labels": [], "entities": []}, {"text": "The first is to design a monolithic CTS system fora specific application.", "labels": [], "entities": [{"text": "CTS", "start_pos": 36, "end_pos": 39, "type": "TASK", "confidence": 0.9434828758239746}]}, {"text": "This design involves a specific NLG module and an SS module, often developed for the application, where discourse, semantic and syntactic information produced by the NLG module can be used directly by CTS algorithms to determine either system specific parameters fora Text-To-Speech system, or phonological parameters fora vocal tract model (e.g.,).", "labels": [], "entities": []}, {"text": "One advantage of this design is its efficiency, but features from the two systems are usually so intertwined that the interface of the CTS algorithms are system dependent.", "labels": [], "entities": []}, {"text": "Another design is to keep NLG and SS as independent as possible, thus allowing reuse of the current NLG tools and TTS systems for other applications.", "labels": [], "entities": []}, {"text": "The typical design is equivalent to \"NLG plus Text-ToSpeech( TTS)\" where the common interface between NLG and TTS is plain text.", "labels": [], "entities": []}, {"text": "One advantage of this is in a its simplicity and adaptability.", "labels": [], "entities": []}, {"text": "No change is necessary for existing NLG tools and TTS systems, but it suffers from a serious problem in that it loses useful information.", "labels": [], "entities": []}, {"text": "All discourse, semantic and syntactic information is lost when the internal representation of NLG is converted to the text output and clearly this could be useful in determining prosody.", "labels": [], "entities": []}, {"text": "In this paper, we want to maintain the autonomy of NLG and SS so that they are reusable for different applications, yet flexible enough to easily integrate without losing useful information.", "labels": [], "entities": []}, {"text": "We propose anew architecture in which the common interface is not plain text, but a Speech Integrating Markup Language (SIML).", "labels": [], "entities": []}, {"text": "We show how this architecture can be used in a multimedia presentation application where a prototype SIML was designed for this purpose.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}