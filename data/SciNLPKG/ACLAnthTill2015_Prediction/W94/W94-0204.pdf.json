{"title": [{"text": "DEFAULT FINITE STATE MACHINES AND FINITE STATE PHONOLOGY", "labels": [], "entities": [{"text": "DEFAULT FINITE STATE MACHINES", "start_pos": 0, "end_pos": 29, "type": "METRIC", "confidence": 0.6473982781171799}, {"text": "FINITE STATE PHONOLOGY", "start_pos": 34, "end_pos": 56, "type": "METRIC", "confidence": 0.7508416573206583}]}], "abstractContent": [{"text": "We propose DFSM's as an extension of finite state machines, explore some of their properties, and indicate how they can be used to formalize naturally occurring linguistic systems.", "labels": [], "entities": []}, {"text": "We feel that this implementation of two-level rules maybe more linguistically natural and easier to work with eom-putationally.", "labels": [], "entities": []}, {"text": "We provide complexity results that shed light on the computational situation.", "labels": [], "entities": []}], "introductionContent": [{"text": "Two-level phonology combines the computational advantages of finite state technology with a formalism that permits phenomena to be described with familiar-looking rules.", "labels": [], "entities": []}, {"text": "The problem with such a scheme is that, in practice, the finite state machines (FSM's) can grow too large to be manageable; one wants to describe them and to run them without having to deal with them directly.", "labels": [], "entities": []}, {"text": "The KIMMO approachlseeks to achieve this by (I) decomposing the computational process into a battery of parallel finite state machines and (2) compiling rules (which notationally resemble familiar phonological rules, but which axe interpreted declaxatively) into these parallel finite state implementations.", "labels": [], "entities": []}, {"text": "But the KIMMO formalism unfortunately gains no tractability in the process of compilation.", "labels": [], "entities": []}, {"text": "Moreover, the compiler is complex enough to create software engineering problems, and this has led to practical difficulties, which in turn have made the KIMMO technology less generally available than one might wish.", "labels": [], "entities": []}, {"text": "IIere, we describe a different finite-state foundation for two-level rules, involving generalizations of FSM's which we call Default Finite State Machines (DFSM's).", "labels": [], "entities": []}, {"text": "Whether or not this approach remains intractable after compilation is an open question; but even without compilation, we believe that it has some conceptual advantages as well.", "labels": [], "entities": []}, {"text": "1See the discussion and references in).", "labels": [], "entities": []}, {"text": "DFSM's extend FSM's (specifically, finitestate transducers) so that transitions can be context-sensitive, and enforce a preference for the maximally specific transitions.", "labels": [], "entities": [{"text": "DFSM", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.9195476174354553}]}, {"text": "The first change allows phonological rules to appear as labels of transition arcs in transducers; the second change incorporates the elsewhere condition into the computational model.", "labels": [], "entities": []}, {"text": "2 DFSM's can be implemented directly, although there maybe a method to compile them into a more efficient machine.", "labels": [], "entities": []}, {"text": "We believe that either approach will be feasible for realistic linguistic applications (though, of course, not in the theoretically worst case).", "labels": [], "entities": []}, {"text": "In paxticulax, the direct implementation of DFSM's is very straightforward; no rule compiler is needed, since rules are labels on the arcs of the machines themselves.", "labels": [], "entities": []}, {"text": "This implementation may not provide an optimal allocation of space and time usage at run time, but we believe that it will be adequate for testing and research purposes.", "labels": [], "entities": []}, {"text": "This presentation of DFSM's is confined to defining the basic ideas, presenting some exampies of linguistic description, and providing a partial complexity analysis.", "labels": [], "entities": []}, {"text": "In later work, we hope to explore descriptive and implementational issues further.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}