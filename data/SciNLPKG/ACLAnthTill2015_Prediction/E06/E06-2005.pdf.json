{"title": [{"text": "XMG -An expressive formalism for describing tree-based grammars", "labels": [], "entities": []}], "abstractContent": [{"text": "In this paper 1 we introduce eXtensible MetaGrammar, a system that facilitates the development of tree based grammars.", "labels": [], "entities": []}, {"text": "This system includes both (1) a formal language adapted to the description of linguistic information and (2) a compiler for this language.", "labels": [], "entities": []}, {"text": "It applies techniques of logic programming (e.g. Warren's Abstract Machine), thus providing an efficient and theoretically motivated framework for the processing of linguistic meta-descriptions.", "labels": [], "entities": []}], "introductionContent": [{"text": "It is well known that grammar engineering is a complex task and that factorizing grammar information is crucial for the rapid development, the maintenance and the debugging of large scale grammars.", "labels": [], "entities": [{"text": "grammar engineering", "start_pos": 22, "end_pos": 41, "type": "TASK", "confidence": 0.8604437112808228}]}, {"text": "While much work has been deployed into producing such factorizing environments for standard unification grammars, less attention has been paid to the issue of developing such environments for \"tree based grammars\" that is, grammars like Tree Adjoining Grammars (TAG) or Tree Description Grammars where the basic unit of information is a tree rather than a category encoded in a feature structure.", "labels": [], "entities": [{"text": "Tree Description Grammars", "start_pos": 270, "end_pos": 295, "type": "TASK", "confidence": 0.783608615398407}]}, {"text": "For these grammars, two trends have emerged to automatize tree-based grammar production: systems based on lexical rules (see) and systems based on combination of classes (also called metagrammar systems, see, ().", "labels": [], "entities": []}, {"text": "In this paper, we present a metagrammar system for tree-based grammars which differs from comparable existing approaches both linguistically and computationally.", "labels": [], "entities": []}, {"text": "Linguistically, the formalism we introduce is both expressive and extensible.", "labels": [], "entities": []}, {"text": "In particularly, we show that it supports the description and factorization both of trees and of tree descriptions; that it allows the synchronized description of several linguistic dimensions (e.g., syntax and semantics) and that it includes a sophisticated treatment of the interaction between inheritance and identifier naming.", "labels": [], "entities": []}, {"text": "Computationally, the production of a grammar from a metagrammar is handled using powerful and well-understood logic programming techniques.", "labels": [], "entities": []}, {"text": "A metagrammar is viewed as an extended definite clause grammar and compiled using a virtual machine closely resembling the Warren's Abstract Machine.", "labels": [], "entities": []}, {"text": "The generation of the trees satisfying a given tree description is furthermore handled using a tree description solver.", "labels": [], "entities": []}, {"text": "The paper is structured as follows.", "labels": [], "entities": []}, {"text": "We begin (section 2) by introducing the linguistic formalism used for describing and factorizing tree based grammars.", "labels": [], "entities": []}, {"text": "We then sketch the logic programming techniques used by the metagrammar compiler (section 3).", "labels": [], "entities": []}, {"text": "Section 4 presents some evaluation results concerning the use of the system for implementing different types of tree based grammars.", "labels": [], "entities": []}, {"text": "Section 5 concludes with pointers for further research and improvements.", "labels": [], "entities": []}, {"text": "ports three main features: 1.", "labels": [], "entities": []}, {"text": "the reuse of tree fragments 2.", "labels": [], "entities": [{"text": "reuse", "start_pos": 4, "end_pos": 9, "type": "TASK", "confidence": 0.9650962352752686}]}, {"text": "the specialization of fragments via inheritance 3.", "labels": [], "entities": []}, {"text": "the combination of fragments by means of conjunctions and disjunctions These features reflect the idea that a metagrammar should allow the description of two main axes: (i) the specification of elementary pieces of information (fragments), and (ii) the combination of these to represent alternative syntactic structures.", "labels": [], "entities": []}, {"text": "Describing syntax Ina tree-based metagrammar, the basic informational units to be handled are tree fragments.", "labels": [], "entities": []}, {"text": "In the XMG formalism, these units are put into classes.", "labels": [], "entities": []}, {"text": "A class associates a name with a content.", "labels": [], "entities": []}, {"text": "At the syntactic level, a content is a tree description 2 . The tree descriptions supported by the XMG formalism are defined by the following tree description language: where x, y represent node variables, \u2192 immediate dominance (x is directly above y), \u2192 + strict dominance (x is above y), \u2192 * large dominance (x is above or equal to y), \ud97b\udf59 is immediate precedence, \ud97b\udf59 + strict precedence, and \ud97b\udf59 * large precedence 3 . x[f :E] constrains feature f with associated expression E on node x (a feature can for instance refer to the syntactic category of the node) . Tree fragments can furthermore be combined using conjunction and/or disjunction.", "labels": [], "entities": []}, {"text": "These two operators allow the metagrammar designer to achieve a high degree of factorization.", "labels": [], "entities": []}, {"text": "Moreover the XMG system also supports inheritance between classes, thus offering more flexibility and structure sharing by allowing one to reuse and specialize classes.", "labels": [], "entities": []}, {"text": "Identifiers' scope When describing a broadcoverage grammar, dealing with identifiers scope is a non-trivial issue.", "labels": [], "entities": []}, {"text": "In previous approaches to metagrammar compilation (, ()), node identifiers had global scope.", "labels": [], "entities": [{"text": "metagrammar compilation", "start_pos": 26, "end_pos": 49, "type": "TASK", "confidence": 0.8269016742706299}]}, {"text": "When designing broad-coverage metagrammars however, such a strategy quickly reduces modularity and complexifies grammar maintenance.", "labels": [], "entities": []}, {"text": "To start with, the grammar writer must remember each node name and its interpretation and in a large coverage grammar the number of these node names amounts to several hundreds.", "labels": [], "entities": []}, {"text": "Further it is easy to use twice the same name erroneously or on the contrary, to mistype a name identifier, in both cases introducing errors in the metagrammar In XMG, identifiers are local to a class and can thus be reused freely.", "labels": [], "entities": []}, {"text": "Global and semi-global (i.e., global to a subbranch in the inheritance hierarchy) naming is also supported however through a system of import / export inspired from Object Oriented Programming.", "labels": [], "entities": [{"text": "inheritance hierarchy) naming", "start_pos": 59, "end_pos": 88, "type": "TASK", "confidence": 0.5904074907302856}]}, {"text": "When defining a class as being a sub-class of another one, the XMG user can specify which are the viewable identifiers (i.e. which identifiers have been exported in the superclass).", "labels": [], "entities": []}], "datasetContent": [{"text": "The XMG system has been successfully used by linguists to develop a core TAG for French containing more than 6.000 trees.", "labels": [], "entities": []}, {"text": "This grammar has been evaluated on the TSNLP test-suite, with a coverage rate of 75 % (see).", "labels": [], "entities": [{"text": "TSNLP test-suite", "start_pos": 39, "end_pos": 55, "type": "DATASET", "confidence": 0.8876718878746033}, {"text": "coverage rate", "start_pos": 64, "end_pos": 77, "type": "METRIC", "confidence": 0.9778600633144379}]}, {"text": "The metagrammar used to produce that grammar consists of 290 classes and is compiled by the XMG system in about 16 minutes with a Pentium 4, 2.6 GHz and 1 GB of RAM.", "labels": [], "entities": []}, {"text": "XMG has also been used to produce a core size Interaction Grammar for French (see).", "labels": [], "entities": []}, {"text": "Finally, XMG is currently used to develop a TAG that includes a semantic dimension along the line described in ().", "labels": [], "entities": []}], "tableCaptions": []}