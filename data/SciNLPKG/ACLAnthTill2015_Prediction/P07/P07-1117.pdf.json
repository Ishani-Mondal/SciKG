{"title": [{"text": "Using Mazurkiewicz Trace Languages for Partition-Based Morphology", "labels": [], "entities": [{"text": "Partition-Based Morphology", "start_pos": 39, "end_pos": 65, "type": "TASK", "confidence": 0.908843070268631}]}], "abstractContent": [{"text": "Partition-based morphology is an approach of finite-state morphology where a grammar describes a special kind of regular relations, which split all the strings of a given tuple into the same number of substrings.", "labels": [], "entities": [{"text": "Partition-based morphology", "start_pos": 0, "end_pos": 26, "type": "TASK", "confidence": 0.8766304552555084}, {"text": "finite-state morphology", "start_pos": 45, "end_pos": 68, "type": "TASK", "confidence": 0.7550916075706482}]}, {"text": "They are compiled in finite-state machines.", "labels": [], "entities": []}, {"text": "In this paper, we address the question of merging grammars using different partitionings into a single finite-state machine.", "labels": [], "entities": []}, {"text": "A morphological description may then be obtained by parallel or sequential application of constraints expressed on different partition notions (e.g. morpheme, phoneme, grapheme).", "labels": [], "entities": []}, {"text": "The theory of Mazurkiewicz Trace Languages, a well known semantics of parallel systems, provides away of representing and compiling such a description.", "labels": [], "entities": []}, {"text": "1 Partition-Based Morphology Finite-State Morphology is based on the idea that regular relations are an appropriate formalism to describe the morphology of a natural language.", "labels": [], "entities": []}, {"text": "Such a relation is a set of pairs, the first component being an actual form called surface form, the second component being an abstract description of this form called lexical form.", "labels": [], "entities": []}, {"text": "It is usually implemented by a finite-state transducer.", "labels": [], "entities": []}, {"text": "Relations are not oriented, so the same transducer maybe used both for analysis and generation.", "labels": [], "entities": []}, {"text": "They maybe non-deterministic, when the same form belongs to several pairs.", "labels": [], "entities": []}, {"text": "Furthermore , finite state machines have interesting properties , they are composable and efficient.", "labels": [], "entities": []}, {"text": "There are two main trends in Finite-State Morphology: rewrite-rule systems and two-level rule systems.", "labels": [], "entities": [{"text": "Finite-State Morphology", "start_pos": 29, "end_pos": 52, "type": "TASK", "confidence": 0.7532327175140381}]}, {"text": "Rewrite-rule systems describe the morphology of languages using contextual rewrite rules which are easily applied in cascade.", "labels": [], "entities": []}, {"text": "Rules are compiled into finite-state transducers and merged using transducer composition (Kaplan and Kay, 1994).", "labels": [], "entities": []}, {"text": "The other important trend of Finite-State Morphology is Two-Level Morphology (Koskenniemi, 1983).", "labels": [], "entities": [{"text": "Finite-State Morphology", "start_pos": 29, "end_pos": 52, "type": "TASK", "confidence": 0.7178511917591095}]}, {"text": "In this approach, not only pairs of lexical and surface strings are related, but there is a one-to-one correspondence between their symbols.", "labels": [], "entities": []}, {"text": "It means that the two strings of a given pair must have the same length.", "labels": [], "entities": []}, {"text": "Whenever a symbol of one side does not have an actual counterpart in the other string, a special symbol 0 is inserted at the relevant position in order to fulfill the same-length constraint.", "labels": [], "entities": []}, {"text": "For example, the correspondence between the surface form spies and the morpheme concatenation spy+s is given as follows: s p y 0 + s s pi e 0 s Same-length relations are closed under intersection, so two-level grammars describe a system as the simultaneous application of local constraints.", "labels": [], "entities": []}, {"text": "A third approach, Partition-Based Morphology, consists in splitting the strings of a pair into the same number of substrings.", "labels": [], "entities": [{"text": "Partition-Based Morphology", "start_pos": 18, "end_pos": 44, "type": "TASK", "confidence": 0.9095918238162994}]}, {"text": "The same-length constraint does not hold on symbols but on substrings.", "labels": [], "entities": []}, {"text": "For example , spies and spy+s maybe partitioned as follows: s p y + s s pie \ud97b\udf59 s The partition-based approach was first proposed by (Black et al., 1987) and further improved by (Pul-man and Hepple, 1993) and (Grimley-Evans et al., 928", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}