{"title": [{"text": "Dynamic Programming Algorithms for Transition-Based Dependency Parsers", "labels": [], "entities": []}], "abstractContent": [{"text": "We develop a general dynamic programming technique for the tabulation of transition-based dependency parsers, and apply it to obtain novel, polynomial-time algorithms for parsing with the arc-standard and arc-eager models.", "labels": [], "entities": [{"text": "tabulation of transition-based dependency parsers", "start_pos": 59, "end_pos": 108, "type": "TASK", "confidence": 0.8237451195716858}]}, {"text": "We also show how to reverse our technique to obtain new transition-based dependency parsers from existing tabular methods.", "labels": [], "entities": []}, {"text": "Additionally, we provide a detailed discussion of the conditions under which the feature models commonly used in transition-based parsing can be integrated into our algorithms.", "labels": [], "entities": []}], "introductionContent": [{"text": "Dynamic programming algorithms, also known as tabular or chart-based algorithms, are at the core of many applications in natural language processing.", "labels": [], "entities": [{"text": "natural language processing", "start_pos": 121, "end_pos": 148, "type": "TASK", "confidence": 0.6461030344168345}]}, {"text": "When applied to formalisms such as context-free grammar, they provide polynomial-time parsing algorithms and polynomial-space representations of the resulting parse forests, even in cases where the size of the search space is exponential in the length of the input string.", "labels": [], "entities": []}, {"text": "In combination with appropriate semirings, these packed representations can be exploited to compute many values of interest for machine learning, such as best parses and feature expectations.", "labels": [], "entities": []}, {"text": "In this paper, we follow the line of investigation started by and apply dynamic programming to (projective) transition-based dependency parsing.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 125, "end_pos": 143, "type": "TASK", "confidence": 0.7137045562267303}]}, {"text": "The basic idea, originally developed in the context of push-down automata, is that while the number of computations of a transition-based parser maybe exponential in the length of the input string, several portions of these computations, when appropriately represented, can be shared.", "labels": [], "entities": []}, {"text": "This can be effectively implemented through dynamic programming, resulting in a packed representation of the set of all computations.", "labels": [], "entities": []}, {"text": "The contributions of this paper can be summarized as follows.", "labels": [], "entities": []}, {"text": "We provide (declarative specifications of) novel, polynomial-time algorithms for two widelyused transition-based parsing models: arc-standard and arc-eager.", "labels": [], "entities": []}, {"text": "Our algorithm for the arc-eager model is the first tabular algorithm for this model that runs in polynomial time.", "labels": [], "entities": []}, {"text": "Both algorithms are derived using the same general technique; in fact, we show that this technique is applicable to all transition-parsing models whose transitions can be classified into \"shift\" and \"reduce\" transitions.", "labels": [], "entities": []}, {"text": "We also show how to reverse the tabulation to derive anew transition system from an existing tabular algorithm for dependency parsing, originally developed by.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 115, "end_pos": 133, "type": "TASK", "confidence": 0.8732506930828094}]}, {"text": "Finally, we discuss in detail the role of feature information in our algorithms, and in particular the conditions under which the feature models traditionally used in transition-based dependency parsing can be integrated into our framework.", "labels": [], "entities": [{"text": "transition-based dependency parsing", "start_pos": 167, "end_pos": 202, "type": "TASK", "confidence": 0.6262620786825815}]}, {"text": "While our general approach is the same as the one of, we depart from their framework by not representing the computations of a parser as a graph-structured stack in the sense of.", "labels": [], "entities": []}, {"text": "We instead simulate computations as in, which results in simpler algorithm specifications, and also reveals deep similarities between transition-based systems for dependency parsing and existing tabular methods for lexicalized context-free grammars.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 163, "end_pos": 181, "type": "TASK", "confidence": 0.7951751351356506}]}], "datasetContent": [], "tableCaptions": []}