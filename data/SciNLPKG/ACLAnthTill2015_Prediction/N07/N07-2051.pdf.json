{"title": [{"text": "A Three-step Deterministic Parser for Chinese Dependency Parsing", "labels": [], "entities": [{"text": "Chinese Dependency Parsing", "start_pos": 38, "end_pos": 64, "type": "TASK", "confidence": 0.5604877968629202}]}], "abstractContent": [{"text": "This paper presents a three-step dependency parser to parse Chinese deterministically.", "labels": [], "entities": [{"text": "parse Chinese deterministically", "start_pos": 54, "end_pos": 85, "type": "TASK", "confidence": 0.8790949185689291}]}, {"text": "By dividing a sentence into several parts and parsing them separately, it aims to reduce the error propagation coming from the greedy characteristic of determi-nistic parsing.", "labels": [], "entities": []}, {"text": "Experimental results showed that compared with the deterministic parser which parsed a sentence in sequence, the proposed parser achieved extremely significant improvement on dependency accuracy.", "labels": [], "entities": [{"text": "accuracy", "start_pos": 186, "end_pos": 194, "type": "METRIC", "confidence": 0.9383801221847534}]}], "introductionContent": [{"text": "Recently, as an attractive alternative to probabilistic parsing, deterministic parsing () has drawn great attention with its high efficiency, simplicity and good accuracy comparable to the state-of-the-art generative probabilistic models.", "labels": [], "entities": [{"text": "probabilistic parsing", "start_pos": 42, "end_pos": 63, "type": "TASK", "confidence": 0.5964236259460449}, {"text": "deterministic parsing", "start_pos": 65, "end_pos": 86, "type": "TASK", "confidence": 0.7094357013702393}, {"text": "accuracy", "start_pos": 162, "end_pos": 170, "type": "METRIC", "confidence": 0.9990536570549011}]}, {"text": "The basic idea of deterministic parsing is using a greedy parsing algorithm that approximates a globally optimal solution by making a sequence of locally optimal choices ().", "labels": [], "entities": [{"text": "deterministic parsing", "start_pos": 18, "end_pos": 39, "type": "TASK", "confidence": 0.7478815615177155}]}, {"text": "This greedy idea guarantees the simplicity and efficiency, but at the same time it also suffers from the error propagation from the previous parsing choices to the left decisions.", "labels": [], "entities": []}, {"text": "For example, given a Chinese sentence, which means Paternity testis a test that gets personal identity through DNA analysis, and it brings proof for finding lost children, the correct dependency tree is shown by solid line (see This problem exists not only in Chinese, but also in other languages.", "labels": [], "entities": []}, {"text": "Some efforts have been done to solve this problem.", "labels": [], "entities": []}, {"text": "used a root finder to divide one sentence into two parts by the root word and parsed them separately.", "labels": [], "entities": [{"text": "root finder", "start_pos": 7, "end_pos": 18, "type": "TASK", "confidence": 0.766206681728363}]}, {"text": "But the two-part division is not enough when a sentence is composed of several coordinating sub-sentences.", "labels": [], "entities": []}, {"text": "applied a pipeline framework in their dependency parser to make the local predictions more robust.", "labels": [], "entities": []}, {"text": "While it did not show great help for stopping the error propagation between different parsing stages.", "labels": [], "entities": []}, {"text": "This paper focuses on resolving this issue for Chinese.", "labels": [], "entities": []}, {"text": "After analyzing the dependency structure of sentences in Penn Chinese Treebank 5.1 (), we found an interesting phenomenon: if we define a main-root as the head of a sentence, and define a subsentence as a sequence of words separated by punctuations, and the head 1 of these words is the child of mainroot or main-root itself, then the punctuations that depend on main-root can be a separator of sub-sentences.", "labels": [], "entities": [{"text": "Penn Chinese Treebank 5.1", "start_pos": 57, "end_pos": 82, "type": "DATASET", "confidence": 0.9803626239299774}]}, {"text": "For example, in the example sentence there are three punctuations marked as PU_A, PU_B and PU_C, in which PU_B and PU_C depends on main-root but PU_A depends on word \u5f97 \u51fa (gets).", "labels": [], "entities": []}, {"text": "According to our observation, PU_B and PU_C can be used for segmenting this sentence into two sub-sentences A and B (circled by dotted line in), where the sub-root of A is main-root and the sub-root of B depends on main-root.", "labels": [], "entities": []}, {"text": "This phenomenon gives us a useful clue: if we divide a sentence by the punctuations whose head is main-root, then the divided sub-sentences are basically independent of each other, which means we can parse them separately.", "labels": [], "entities": []}, {"text": "The shortening of sentence length and the recognition of sentence structure guarantee the robustness of deterministic parsing.", "labels": [], "entities": [{"text": "recognition of sentence structure", "start_pos": 42, "end_pos": 75, "type": "TASK", "confidence": 0.8092355728149414}, {"text": "deterministic parsing", "start_pos": 104, "end_pos": 125, "type": "TASK", "confidence": 0.6986897736787796}]}, {"text": "The independent parsing of each sub-sentence also prevents the error-propagation.", "labels": [], "entities": []}, {"text": "In addition, because the sub-root depends on main-root or is main-root itself, it is easy to combine the dependency structure of each sub-sentence to create the final dependency tree..", "labels": [], "entities": []}, {"text": "A segmentation of the sentence in Based on above analyses, this paper proposes a threestep deterministic dependency parser for Chinese, which works as: Step1(Sentence Segmentation): Segmenting a sentence into sub-sentences by punctuations (sub-sentences do not contain the punctuations for segmentation); Step2(Sub-sentence Parsing): Parsing each subsentence deterministically; Step3(Parsing Combination): Finding main-root among all the sub-roots, then combining the dependency structure of sub-sentences by making main-root as the head of both the left sub-roots and the punctuations for sentence segmentation.", "labels": [], "entities": [{"text": "Sentence Segmentation)", "start_pos": 158, "end_pos": 180, "type": "TASK", "confidence": 0.7808426221211752}, {"text": "sentence segmentation", "start_pos": 590, "end_pos": 611, "type": "TASK", "confidence": 0.7661140263080597}]}], "datasetContent": [{"text": "We use Penn Chinese Treebank 5.1 as data set.", "labels": [], "entities": [{"text": "Penn Chinese Treebank 5.1", "start_pos": 7, "end_pos": 32, "type": "DATASET", "confidence": 0.9357874393463135}]}, {"text": "To transfer the phrase structure into dependency structure, head rules are defined based on Xia's head percolation table).", "labels": [], "entities": []}, {"text": "16,984 sentences and 1,292 sentences are used for training and testing.", "labels": [], "entities": []}, {"text": "The same training data is also used to train the sentence segmenter, the baseNP chunker, the sub-sentence root finder, and the sentence root finder.", "labels": [], "entities": [{"text": "sentence segmenter", "start_pos": 49, "end_pos": 67, "type": "TASK", "confidence": 0.7241117060184479}, {"text": "sub-sentence root finder", "start_pos": 93, "end_pos": 117, "type": "TASK", "confidence": 0.7511847813924154}, {"text": "sentence root finder", "start_pos": 127, "end_pos": 147, "type": "TASK", "confidence": 0.6243358155091604}]}, {"text": "During both training and testing, the gold-standard word segmentation and pos-tag are applied.", "labels": [], "entities": [{"text": "word segmentation", "start_pos": 52, "end_pos": 69, "type": "TASK", "confidence": 0.6751691997051239}]}, {"text": "TinySVM is selected as a SVM toolkit.", "labels": [], "entities": [{"text": "TinySVM", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.9618787169456482}]}, {"text": "We use a polynomial kernel and set the degree as 2 in all the experiments.", "labels": [], "entities": [{"text": "degree", "start_pos": 39, "end_pos": 45, "type": "METRIC", "confidence": 0.9662433862686157}]}], "tableCaptions": [{"text": " Table 4. Parsing result of three-step and one-step parsing", "labels": [], "entities": [{"text": "parsing", "start_pos": 52, "end_pos": 59, "type": "TASK", "confidence": 0.7786093354225159}]}, {"text": " Table 5. Parsing result of complex sentence  Parsing Strategy  Dep.Accu. (%)  Root Accu. (%)  One-step Parsing  82.56  78.95  Three-step Parsing  84.94 (+2.38)  79.25 (+0.30)", "labels": [], "entities": [{"text": "Root Accu", "start_pos": 79, "end_pos": 88, "type": "METRIC", "confidence": 0.8504304587841034}]}, {"text": " Table 7. Parsing result with gold-standard modules  Gold-standard Module  Dep.Accu(%)  Root.Accu(%)  w/o  84.26  75.93  M1  84.51  76.24  M1+M2  86.57  80.34  M1+M2+M3  88.63  80.57  M1+M2+M3+M5  91.25  91.02", "labels": [], "entities": []}]}