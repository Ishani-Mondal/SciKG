{"title": [{"text": "Tree-Adjoining Grammars Are Not Closed Under Strong Lexicalization", "labels": [], "entities": []}], "abstractContent": [{"text": "A lexicalized tree-adjoining grammar is a tree-adjoining grammar where each elementary tree contains some overt lexical item.", "labels": [], "entities": []}, {"text": "Such grammars are being used to give lexical accounts of syntactic phenomena, where an elementary tree defines the domain of locality of the syntactic and semantic dependencies of its lexical items.", "labels": [], "entities": []}, {"text": "It has been claimed in the literature that for every tree-adjoining grammar, one can construct a strongly equivalent lexicalized version.", "labels": [], "entities": []}, {"text": "We show that such a procedure does not exist: Tree-adjoining grammars are not closed under strong lexicalization.", "labels": [], "entities": []}], "introductionContent": [{"text": "Many contemporary linguistic theories give lexical accounts of syntactic phenomena, where complex syntactic structures are analyzed as the combinations of elementary structures taken from a finite lexicon.", "labels": [], "entities": []}, {"text": "In the computational linguistics community, this trend has been called lexicalization, and has been extensively investigated since the 1990s.", "labels": [], "entities": []}, {"text": "From a mathematical perspective, the main question that arises in the context of lexicalization is whether the restriction of a given class of grammars to lexicalized form has any impact on the generative or computational properties of the formalism.", "labels": [], "entities": []}, {"text": "As a simple example, consider the class of context-free grammars (CFGs).", "labels": [], "entities": []}, {"text": "Recall that a CFG is in Greibach normal form if the right-hand side of every rule in the grammar starts with a terminal symbol, representing an overt lexical item.", "labels": [], "entities": []}, {"text": "Although several procedures for casting a CFG in Greibach normal form exist, all of them substantially alter the structure of the parse trees of the source grammar.", "labels": [], "entities": []}, {"text": "In technical terms, these procedures provide a weak lexicalization of the source grammar (because the string language is preserved) but not a strong lexicalization (because the sets of parse trees that the two grammars assign to the common string language are not the same).", "labels": [], "entities": []}, {"text": "Strong lexicalization is highly relevant for natural language processing, however, where the parse tree assigned by a grammar represents the syntactic analysis of interest, and is used by other modules such as semantic interpretation or translation.", "labels": [], "entities": [{"text": "natural language processing", "start_pos": 45, "end_pos": 72, "type": "TASK", "confidence": 0.6971009969711304}, {"text": "semantic interpretation or translation", "start_pos": 210, "end_pos": 248, "type": "TASK", "confidence": 0.6120471954345703}]}, {"text": "In this article, we investigate the problem of strong lexicalization.", "labels": [], "entities": []}, {"text": "Two important results about strong lexicalization have been obtained by.", "labels": [], "entities": []}, {"text": "The first result is that CFGs are not closed under strong lexicalization.", "labels": [], "entities": []}, {"text": "(The author actually shows a stronger result involving a formalism called tree substitution grammar, as will be discussed in detail in Section 3.)", "labels": [], "entities": [{"text": "tree substitution grammar", "start_pos": 74, "end_pos": 99, "type": "TASK", "confidence": 0.7636348803838094}]}, {"text": "Informally, this means that we cannot cast a CFG G in a special form in which each rule has an overt lexical item in its right-hand side, under the restriction that the new grammar generates exactly the same set of parse trees as G.", "labels": [], "entities": []}, {"text": "As a special case, this entails that no procedure can cast a CFG in Greibach normal form, under the additional condition that the generated parse trees are preserved.", "labels": [], "entities": []}, {"text": "The second result obtained by Schabes concerns the relation between CFGs and the class of tree-adjoining grammars (TAGs).", "labels": [], "entities": []}, {"text": "A TAG consists of a finite set of elementary trees, which are phrase structure trees of unbounded depth, and allows for the combination of these trees by means of two operations called substitution and adjunction (described in more detail in the next section).", "labels": [], "entities": []}, {"text": "A lexicalized TAG is one where each elementary tree contains at least one overt lexical item called the anchor of the tree; the elementary tree is intended to encapsulate the syntactic and semantic dependencies of its anchor.", "labels": [], "entities": []}, {"text": "Because CFG rules can be viewed as elementary trees of depth one, and because context-free rewriting can be simulated by the substitution operation defined for TAGs, we can view any CFG as a special TAG.", "labels": [], "entities": []}, {"text": "Under this view, one can ask whether lexicalized TAGs can provide a strong lexicalization of CFGs.", "labels": [], "entities": [{"text": "CFGs", "start_pos": 93, "end_pos": 97, "type": "DATASET", "confidence": 0.880625307559967}]}, {"text": "Schabes' second result is that this is indeed the case.", "labels": [], "entities": []}, {"text": "This means that, given a CFG G, one can always construct a lexicalized TAG generating the same set of parse trees as G, and consequently the same string language.", "labels": [], "entities": []}, {"text": "Following from this result, there arose the possibility of establishing a third result, stating that TAGs are closed under strong lexicalization.", "labels": [], "entities": []}, {"text": "states that this is the case, and provides an informal argument to justify the claim.", "labels": [], "entities": []}, {"text": "The same claim still appears in two subsequent publications (), but no precise proof of it has appeared until now.", "labels": [], "entities": []}, {"text": "We speculate that the claim could be due to the fact that adjunction is more powerful than substitution with respect to weak generative capacity.", "labels": [], "entities": []}, {"text": "It turns out, however, that when it comes to strong generative capacity, adjunction also shares some of the restrictions of substitution.", "labels": [], "entities": [{"text": "generative capacity", "start_pos": 52, "end_pos": 71, "type": "TASK", "confidence": 0.9325844049453735}]}, {"text": "This observation leads to the main result of this article: TAGs are not closed under strong lexicalization.", "labels": [], "entities": []}, {"text": "In other words, there are TAGs that lack a strongly equivalent lexicalized version.", "labels": [], "entities": []}, {"text": "In the same line of investigation, introduce a restricted variant of TAG called tree insertion grammars (TIGs).", "labels": [], "entities": [{"text": "tree insertion grammars (TIGs)", "start_pos": 80, "end_pos": 110, "type": "TASK", "confidence": 0.8309510052204132}]}, {"text": "This formalism severely restricts the adjunction operation originally defined for TAGs, in such away that the class of generated string languages, as well as the class of generated parse trees, are the same as those of CFGs.", "labels": [], "entities": []}, {"text": "Schabes and Waters then conjecture that TIGs are closed under strong lexicalization.", "labels": [], "entities": []}, {"text": "In this article we also disprove their conjecture.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}