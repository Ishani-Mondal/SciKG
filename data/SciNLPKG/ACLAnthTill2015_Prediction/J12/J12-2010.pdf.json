{"title": [{"text": "Book Reviews Computational Semantics with Functional Programming", "labels": [], "entities": []}], "abstractContent": [{"text": "Cambridge University Press, 2010, xv+405 pp; hardbound, ISBN 978-0-521-76030-0, $99.00; paperbound, ISBN 978-0-521-75760-7, $40.00 Reviewed by Robin Cooper University of Gothenburg There has been a recent intensification of interest in \"semantics\" in computational linguistics.", "labels": [], "entities": [{"text": "Cambridge University Press, 2010", "start_pos": 0, "end_pos": 32, "type": "DATASET", "confidence": 0.8811259031295776}]}, {"text": "I write the word in scare quotes because there are very different views of what computational semantics is.", "labels": [], "entities": []}, {"text": "Broadly, it divides into the view that word meaning can be modeled in distributional terms and the view that meaning is to be viewed in terms of model theory of the kind employed informal semantics deriving from the seminal work of Richard Montague (1974).", "labels": [], "entities": []}, {"text": "This book is firmly placed in the latter logic-based semantics camp.", "labels": [], "entities": []}, {"text": "If you want to learn about the logical approach to computational semantics there are three basic texts you can go to: Blackburn and Bos (2005), which uses Prolog; Bird, Klein, and Loper (2009, chapter 10), which covers the essential aspects of Blackburn and Bos using Python within the popular Natural Language Toolkit (NLTK); and the present book, which uses the functional programming language Haskell.", "labels": [], "entities": []}, {"text": "All three of these references will teach you both semantics and the required programming skills at the same time.", "labels": [], "entities": []}, {"text": "So how do you choose between them?", "labels": [], "entities": []}, {"text": "One relevant issue is the choice of programming language.", "labels": [], "entities": []}, {"text": "Prolog, a logic programming language, seems like a natural choice for logic-based semantics and, indeed, as Blackburn and Bos show, it provides support for writing concise and transparent code which is close to the kind of formalism used in theoretical logic-based semantics.", "labels": [], "entities": []}, {"text": "It is not without its problems, however.", "labels": [], "entities": []}, {"text": "Prolog variables are associated with unification-based binding, which is not the same as the kind of binding by quantifiers and operators that is used in logic.", "labels": [], "entities": []}, {"text": "A second problem is that Prolog is a relation-based language and does not have a direct implementation of functions that return a value.", "labels": [], "entities": []}, {"text": "Formal semantics building on Montague's work makes heavy use of the \u03bb-calculus with \u03bb-expressions denoting functions, and semantic composition is largely defined in terms of function-argument application.", "labels": [], "entities": [{"text": "Formal semantics", "start_pos": 0, "end_pos": 16, "type": "TASK", "confidence": 0.8247257173061371}, {"text": "semantic composition", "start_pos": 122, "end_pos": 142, "type": "TASK", "confidence": 0.7103208154439926}]}, {"text": "Blackburn and Bos implement aversion of the \u03bb-calculus in Prolog but this leads to a third problem: Formal semantics uses a typed version of the \u03bb-calculus, yet standard Prolog is not a typed language (apart from making basic distinctions between integers, lists, etc.).", "labels": [], "entities": []}, {"text": "Python, being object-oriented, allows a partial solution to the typing problem and it also has functions.", "labels": [], "entities": []}, {"text": "It is a very flexible language and allows transparent coding of semantic formalisms by its powerful string processing.", "labels": [], "entities": []}, {"text": "But coding semantic formalisms in terms of strings, although providing a great deal of flexibility, does not give you the feeling that the language is providing support for or insight into the logical operations that are being performed.", "labels": [], "entities": []}, {"text": "Van Eijck and Unger's book enters into this discussion with Haskell, a language based on the \u03bb-calculus, with a strict typing system that requires the programmer to declare the types of all objects that are to be used in a program.", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}