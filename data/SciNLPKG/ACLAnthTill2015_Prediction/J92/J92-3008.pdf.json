{"title": [{"text": "Computational Morphology: Practical Mechanisms for the English Lexicon", "labels": [], "entities": []}], "abstractContent": [{"text": "In spite of the title of this book, the authors stress that it \"is not a general review of computational work on morphology.\"", "labels": [], "entities": []}, {"text": "Rather, it describes a specific project to build a morphological parser and large lexicon of English.", "labels": [], "entities": []}, {"text": "This project, done at the Universities of Edinburgh and Cambridge between 1983 and 1987, became part of a Common Lisp software package now called the Alvey Natural Language Tools.", "labels": [], "entities": [{"text": "Alvey Natural Language Tools", "start_pos": 150, "end_pos": 178, "type": "DATASET", "confidence": 0.8424848020076752}]}, {"text": "The subtitle of the book, Practical Mechanisms for the English Lexicon, is more indicative of the authors' aims, namely to develop linguistically sound tools for building computational lexicons.", "labels": [], "entities": []}, {"text": "While their proof of concept is done by developing a lexicon of English, the theoretical basis and the software tools are intended to be applicable to a wide variety of languages.", "labels": [], "entities": []}, {"text": "Intentionally drawing on the work of others, their morphological analyzer is based on Kimmo Koskenniemi's (1983) two-level model of morphology.", "labels": [], "entities": [{"text": "morphological analyzer", "start_pos": 51, "end_pos": 73, "type": "TASK", "confidence": 0.7514348328113556}]}, {"text": "In the two-level model, the rule component handles spelling alternations that occur at the boundaries of morphemes, and the lexicon lists all lexical forms and specifies the morphotactic structure of words.", "labels": [], "entities": []}, {"text": "Both the rules and the lexicon are computationally implemented using finite-state machines.", "labels": [], "entities": []}, {"text": "The authors' implementation of the rule component of the two-level model follows Koskenniemi's work quite closely.", "labels": [], "entities": []}, {"text": "Their major innovation is to implement a rule compiler that translates spelling rules written in a high-level linguistic notation into finite-state transducers, which is the representation actually required by the rule interpreter.", "labels": [], "entities": []}, {"text": "The compiler places some significant limitations on the expressive power of the rule notation, however; neither the Kleene star construct nor optional elements are permitted in rule contexts.", "labels": [], "entities": []}, {"text": "The compiler also runs rather slowly, making it less useful for interactively developing a set of rules.", "labels": [], "entities": []}, {"text": "An appendix to the book contains a list of the sixteen spelling rules used in the English description.", "labels": [], "entities": []}, {"text": "The authors' implementation of the two-level lexicon is a significant innovation from Koskenniemi's original design (as well as other implementations based on it such as KIMMO (Karttunen 1983) and PC-KIMMO (Antworth 1990)).", "labels": [], "entities": [{"text": "PC-KIMMO (Antworth 1990))", "start_pos": 197, "end_pos": 222, "type": "DATASET", "confidence": 0.689503276348114}]}, {"text": "In Kosken-niemi's model, morphotactics are handled by continuation classes that specify for each morpheme in the lexicon the classes of morphemes that can follow it.", "labels": [], "entities": []}, {"text": "This system is simple and computationally efficient, but breaks down when one tries to handle 365", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}