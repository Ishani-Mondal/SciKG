{"title": [], "abstractContent": [{"text": "We present two compilation techniques that, when combined, enable text to be generated from systemic grammars in real-time.", "labels": [], "entities": []}, {"text": "The first technique involves representing systemic grammars as C++ class hierarchies-this allows the inheritance in the classification hierarchies to be computed automatically by the C++ compiler at compile-time.", "labels": [], "entities": []}, {"text": "The second technique foUows from the stratified/renlizational nature of systemic description that results in a mapping from semantic /contextual features to the grammar-such a mapping means that detailed grammatical features can be inferred directly, without a top-down traversal of the systemic classification hierarchies.", "labels": [], "entities": []}, {"text": "When the mapping provides the leaf nodes of an instantiation of the grammar (as might be expected in routine generation), no traversal of the grammar is necessary whatsoever, since all the realization information from higher-level nodes has been inherited by the leaf nodes at compile-time.", "labels": [], "entities": []}, {"text": "In such cases the text can be output in less than a second even on relatively slow wolkstatinns; on a 22 MIPS machine the run-time is too small to measure.", "labels": [], "entities": []}, {"text": "We have developed a framework for real-time sentence generation that we hope to deploy in future work on real-time applications.", "labels": [], "entities": [{"text": "real-time sentence generation", "start_pos": 34, "end_pos": 63, "type": "TASK", "confidence": 0.5928321679433187}]}, {"text": "Our emphasis has been on the compilation of linguistic inference.", "labels": [], "entities": [{"text": "compilation of linguistic inference", "start_pos": 29, "end_pos": 64, "type": "TASK", "confidence": 0.8821745216846466}]}, {"text": "We would like to be able to perform generation in real-time even when making adjustments for the occupation of the user, the speed of the output device (short texts for slow devices), whether or not the situation is an emergency, whether the text is spoken or written, and other situational factors that may influence linguistic decisions.", "labels": [], "entities": []}, {"text": "A prototype implementation of our framework generates situation-adjusted clauses in less than a second on relatively slow workstations, and is too fast to measure on a 22 MIPS machine.", "labels": [], "entities": []}, {"text": "The computational slxategy behind this framework is twofold: First, we have developed an object-oriented approach to implementing systemic grammars where much of the grammatical processing is done automatically at compile-time by the C++ compiler.", "labels": [], "entities": []}, {"text": "Second, we take advantage of stored (compiled) associations between situations and linguistic choices.", "labels": [], "entities": []}, {"text": "Furthermore, there is an interesting synergistic relationship between these two compilation techniques.", "labels": [], "entities": []}, {"text": "We will first present our object-oriented implementation of systemic grammar, and provide an example of the grammatical processing.", "labels": [], "entities": []}, {"text": "An outline of our approach to storing situation-to-language associations will then be provided.", "labels": [], "entities": []}, {"text": "Illustrative examples will then be used to clarify these two ideas.", "labels": [], "entities": []}, {"text": "We will then discuss the relationship between these two computational techniques, and compare our framework to other approaches to generation.", "labels": [], "entities": []}, {"text": "Finally, some conclusions will be drawn.", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}