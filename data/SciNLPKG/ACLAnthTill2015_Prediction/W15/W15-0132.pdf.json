{"title": [{"text": "Simple Interval Temporal Logic for Natural Language Assertion Descriptions", "labels": [], "entities": [{"text": "Simple Interval Temporal Logic", "start_pos": 0, "end_pos": 30, "type": "TASK", "confidence": 0.5643430650234222}, {"text": "Natural Language Assertion Descriptions", "start_pos": 35, "end_pos": 74, "type": "TASK", "confidence": 0.7625630795955658}]}], "abstractContent": [{"text": "SystemVerilog assertion (SVA) is widely used for verifying properties of hardware designs.", "labels": [], "entities": [{"text": "SystemVerilog assertion (SVA)", "start_pos": 0, "end_pos": 29, "type": "TASK", "confidence": 0.8245059072971344}]}, {"text": "This paper presents anew method of generating SVAs from natural language assertion descriptions.", "labels": [], "entities": [{"text": "SVAs from natural language assertion descriptions", "start_pos": 46, "end_pos": 95, "type": "TASK", "confidence": 0.6624487290779749}]}, {"text": "For capturing the temporal semantics in natural language descriptions, we develop anew logical form called simple interval temporal logic (SIT L) which can deal formally with temporal constructions such as temporal prepositions.", "labels": [], "entities": []}, {"text": "Furthermore, SIT L makes the transformations from natural language descriptions to SVAs possible.", "labels": [], "entities": []}, {"text": "Thus, we build transformation rules to map our logic into SVAs.", "labels": [], "entities": []}, {"text": "Our systematic experimental investigation on AXI bus protocol in ARM (2010) suggest that our method is applicable for generating SVAs from natural language descriptions.", "labels": [], "entities": []}], "introductionContent": [{"text": "Formal verification is the process of checking whether a design fulfils certain requirements (properties).", "labels": [], "entities": [{"text": "Formal verification", "start_pos": 0, "end_pos": 19, "type": "TASK", "confidence": 0.8075806796550751}]}, {"text": "In the last decade, one major challenge in the area of formal verification has been to reduce the effort required to design hardware systems.", "labels": [], "entities": []}, {"text": "SVA is one of the formal verification tools used for verification finite state concurrent systems such as sequential circuit designs.", "labels": [], "entities": []}, {"text": "SVA is a linear temporal logic which can express temporal behaviours of the system designs.", "labels": [], "entities": [{"text": "SVA", "start_pos": 0, "end_pos": 3, "type": "DATASET", "confidence": 0.7327923774719238}]}, {"text": "In fact, SVA allows complex temporal relations between signals to be expressed in a concise and accurate way.", "labels": [], "entities": []}, {"text": "However, capturing the required temporal behaviours of the design requires a precise temporal description in SVA.", "labels": [], "entities": []}, {"text": "Therefore, several attempts have been made to generate formal system requirements from natural language specifications in.", "labels": [], "entities": []}, {"text": "The motivations of these approaches are to reduce design time and errors and also to help us to have early identifications of incomplete and inconsistent specifications.", "labels": [], "entities": []}, {"text": "Unfortunately, generating formal requirements from natural language specifications is still limited because most such approaches fail to capture certain temporal expressions commonly occurring in natural language specifications such as tenses, aspects, and temporal prepositions.", "labels": [], "entities": []}, {"text": "Of course, various linguists have attempted to provide formal semantics for certain temporal expressions in natural language (e.g..", "labels": [], "entities": []}, {"text": "Most approaches, (such as in), focus on tenses and are not readily applicable to hardware specifications, since, most of such specifications must be written in the present tense.", "labels": [], "entities": []}, {"text": "Admittedly, the studies of aspectual classes are useful when considering the temporal behaviours of natural language descriptions; however, in practice, these aspectual classes are not an essential requirements for generating SVAs.", "labels": [], "entities": []}, {"text": "In contradistinction to these linguistic studies, there is a logical form that can provide the formal semantics for temporal proposition phrases -temporal preposition logic (T PL) which is one of the more recent interval logics as introduced in.", "labels": [], "entities": []}, {"text": "However, T PL is more expressive than SVA.", "labels": [], "entities": []}, {"text": "Thus, this paper seeks to remedy these problems by finding a simpler way to translate natural language assertion descriptions featuring temporal expressions to SVAs directly.", "labels": [], "entities": [{"text": "translate natural language assertion descriptions featuring temporal expressions", "start_pos": 76, "end_pos": 156, "type": "TASK", "confidence": 0.7698137164115906}]}, {"text": "Our new logic SIT L under some assumptions can be translated to SVA.", "labels": [], "entities": [{"text": "SVA", "start_pos": 64, "end_pos": 67, "type": "DATASET", "confidence": 0.8072961568832397}]}, {"text": "SIT L is a subset of T PL.", "labels": [], "entities": []}, {"text": "Although T PL is more expressive than SIT L, SIT L can capture most temporal constructions that are described in natural language assertion descriptions.", "labels": [], "entities": []}, {"text": "We hope in this paper to provide a method that is more precise and efficient informal verifications than the previous attempts of.", "labels": [], "entities": []}, {"text": "The structure of the paper as follows.", "labels": [], "entities": []}, {"text": "Section 2 introduces the basic definitions and notation of T PL and SVA.", "labels": [], "entities": []}, {"text": "Section 3 introduces the syntax and semantics of SIT L as well as its benefits of capturing temporal expressions.", "labels": [], "entities": [{"text": "SIT L", "start_pos": 49, "end_pos": 54, "type": "TASK", "confidence": 0.9216271340847015}]}, {"text": "Section 4 shows a method for generating SVAs from natural language descriptions.", "labels": [], "entities": []}, {"text": "The experimental methods and results are presented in Section 5.", "labels": [], "entities": []}, {"text": "Section 6 reviews the techniques for generating formal specifications from natural language specifications and the effects of aspectual classes on the semantics of SVAs and Section 7 concludes the paper.", "labels": [], "entities": []}], "datasetContent": [{"text": "To evaluate the ideas discussed in this paper empirically, we collected documents from ARM (2010) for verification of the AXI bus protocol.", "labels": [], "entities": [{"text": "ARM (2010)", "start_pos": 87, "end_pos": 97, "type": "DATASET", "confidence": 0.892456516623497}]}, {"text": "These documents contain a large number of SVAs specifying system requirements together with English comments explaining their meaning.", "labels": [], "entities": []}, {"text": "We took the English comments and we parsed them using Charniak's parser) to produce parse trees.", "labels": [], "entities": []}, {"text": "Then, we extracted SIT L from parse trees via semantic rules as explained in Section 4.1.", "labels": [], "entities": []}, {"text": "Finally, we generated SVAs from SIT L using our transformation rules that described in Section 4.2.", "labels": [], "entities": []}, {"text": "The total number of such comments is 397 SVAs.", "labels": [], "entities": []}, {"text": "Our program contains 83 transformation rules and approximately 2374 words with their logical forms in SVA.", "labels": [], "entities": []}, {"text": "Most of these words are noun categories where approximately 65% of the words are automatically generated, and approximately 35% are manually written such as words in.", "labels": [], "entities": []}], "tableCaptions": []}