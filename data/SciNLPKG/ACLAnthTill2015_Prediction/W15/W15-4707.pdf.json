{"title": [{"text": "A Framework for the Generation of Computer System Diagnostics in Natural Language using Finite State Methods", "labels": [], "entities": [{"text": "Generation of Computer System Diagnostics", "start_pos": 20, "end_pos": 61, "type": "TASK", "confidence": 0.7836040019989013}]}], "abstractContent": [{"text": "Understanding what has led to a failure is crucial for addressing problems with computer systems.", "labels": [], "entities": []}, {"text": "We present a meta-NLG system that can be configured to generate natural explanations from error trace data originating in an external computational system.", "labels": [], "entities": []}, {"text": "Distinguishing features are the generic nature of the system, and the underlying finite-state technology.", "labels": [], "entities": []}, {"text": "Results of a two-pronged evaluation dealing with naturalness and ease of use are described.", "labels": [], "entities": [{"text": "ease", "start_pos": 65, "end_pos": 69, "type": "METRIC", "confidence": 0.9726816415786743}]}], "introductionContent": [{"text": "As computer systems grow in size and complexity, so does the need for their verification.", "labels": [], "entities": []}, {"text": "Whilst system diagnostics produced by automated program analysis techniques are understandable to developers, they maybe largely opaque to less technical domain experts typically involved in scripting parts of the system, using domain-specific languages or controlled natural languages (CNLs)).", "labels": [], "entities": [{"text": "system diagnostics", "start_pos": 7, "end_pos": 25, "type": "TASK", "confidence": 0.7204398214817047}]}, {"text": "Such individuals require higher level, less technical explanations of certain classes of program misbehaviour.", "labels": [], "entities": []}, {"text": "The problem boils down to an NLG challenge, starting from the trace (representing a history of the system) and yielding a narrative of the behaviour at an effective level of abstraction.", "labels": [], "entities": []}, {"text": "The choice of an appropriate level of abstraction is particularly challenging since it is very dependent on the specification being matched or verified.", "labels": [], "entities": []}, {"text": "Pace and Rosner), showed how a finite-state (FS) system can be used to generate effective natural language descriptions of behavioural traces.", "labels": [], "entities": []}, {"text": "Starting from a particular property, they show how more natural and abstract explanations can be extracted from a system trace violating that property.", "labels": [], "entities": []}, {"text": "However, the approach is manual and thus not very feasible fora quality assurance engineer.", "labels": [], "entities": []}, {"text": "We show how their approach can be generalised to explain violations of general specifications.", "labels": [], "entities": []}, {"text": "Since the explanation needs to be tailored for each particular property, we develop a general system, fitting as part of a verification flow as shown in.", "labels": [], "entities": []}, {"text": "Typically, a quality assurance engineer is responsible for the top part of the diagram -giving a property specification which will be used by an analysis tool (testing, runtime verification, static analysis, etc) to try to identify violation traces.", "labels": [], "entities": []}, {"text": "With our approach, another artefact is required, the explanation specification, which embodies the domain-specific natural language information for the property in question.", "labels": [], "entities": []}, {"text": "From this, a generic NLG tool produces a specialised generation tool (embodying the domain-specific information and general information implicit in the traces) which can produce explanations for violations of that property.", "labels": [], "entities": []}, {"text": "Our techniques have been implemented in a generic NLG tool, for which we show that the cost of adding user explanations fora property at an appropriate level of abstraction and naturalness is very low especially when compared to the cost of extending the system to identify such behaviours (e.g. developing test oracles or expressing a property using a formal language).", "labels": [], "entities": []}, {"text": "The main novelty has been to develop a framework for generalising the approach developed earlier.", "labels": [], "entities": []}, {"text": "We also further substantiate the claim that there is a place for FS methods in NLG.", "labels": [], "entities": [{"text": "FS", "start_pos": 65, "end_pos": 67, "type": "TASK", "confidence": 0.8359442949295044}]}], "datasetContent": [{"text": "Two aspects of our approach were evaluated: (i) How much effort is required to achieve an acceptable degree of naturalness, and (ii) How difficult it is for first time users to write specifications.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: Overall scores given to generated explanations", "labels": [], "entities": []}]}