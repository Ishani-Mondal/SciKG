{"title": [{"text": "Tree-Based Deterministic Dependency Parsing -An Application to Nivre's Method", "labels": [], "entities": [{"text": "Tree-Based Deterministic Dependency Parsing", "start_pos": 0, "end_pos": 43, "type": "TASK", "confidence": 0.5375963598489761}]}], "abstractContent": [{"text": "Nivre's method was improved by enhancing deterministic dependency parsing through application of a tree-based model.", "labels": [], "entities": [{"text": "deterministic dependency parsing", "start_pos": 41, "end_pos": 73, "type": "TASK", "confidence": 0.5976745784282684}]}, {"text": "The model considers all words necessary for selection of parsing actions by including words in the form of trees.", "labels": [], "entities": []}, {"text": "It chooses the most probable head candidate from among the trees and uses this candidate to select a parsing action.", "labels": [], "entities": []}, {"text": "In an evaluation experiment using the Penn Treebank (WSJ section), the proposed model achieved higher accuracy than did previous deterministic models.", "labels": [], "entities": [{"text": "Penn Treebank (WSJ section)", "start_pos": 38, "end_pos": 65, "type": "DATASET", "confidence": 0.9676354626814524}, {"text": "accuracy", "start_pos": 102, "end_pos": 110, "type": "METRIC", "confidence": 0.9987474679946899}]}, {"text": "Although the proposed model's worst-case time complexity is O(n 2), the experimental results demonstrated an average parsing time not much slower than O(n).", "labels": [], "entities": [{"text": "O", "start_pos": 60, "end_pos": 61, "type": "METRIC", "confidence": 0.9673705697059631}, {"text": "O", "start_pos": 151, "end_pos": 152, "type": "METRIC", "confidence": 0.9872258305549622}]}], "introductionContent": [{"text": "Deterministic parsing methods achieve both effective time complexity and accuracy not far from those of the most accurate methods.", "labels": [], "entities": [{"text": "Deterministic parsing", "start_pos": 0, "end_pos": 21, "type": "TASK", "confidence": 0.7248755693435669}, {"text": "accuracy", "start_pos": 73, "end_pos": 81, "type": "METRIC", "confidence": 0.998783528804779}]}, {"text": "One such deterministic method is Nivre's method, an incremental parsing method whose time complexity is linear in the number of words.", "labels": [], "entities": []}, {"text": "Still, deterministic methods can be improved.", "labels": [], "entities": []}, {"text": "As a specific example, Nivre's model greedily decides the parsing action only from two words and their locally relational words, which can lead to errors.", "labels": [], "entities": []}, {"text": "In the field of Japanese dependency parsing, proposed a tournament model that takes all head candidates into account in judging dependency relations.", "labels": [], "entities": [{"text": "Japanese dependency parsing", "start_pos": 16, "end_pos": 43, "type": "TASK", "confidence": 0.6898672978083292}]}, {"text": "This method assumes backward parsing because the Japanese dependency structure has a head-final constraint, so that any word's head is located to its right.", "labels": [], "entities": [{"text": "backward parsing", "start_pos": 20, "end_pos": 36, "type": "TASK", "confidence": 0.5812404602766037}]}, {"text": "Here, we propose a tree-based model, applicable to any projective language, which can be considered as a kind of generalization of Iwatate's idea.", "labels": [], "entities": []}, {"text": "Instead of selecting a parsing action for two words, as in Nivre's model, our tree-based model first chooses the most probable head candidate from among the trees through a tournament and then decides the parsing action between two trees.", "labels": [], "entities": []}, {"text": "Global-optimization parsing methods are another common approach).", "labels": [], "entities": [{"text": "Global-optimization parsing", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.774661660194397}]}, {"text": "studied semi-supervised learning with this approach.", "labels": [], "entities": []}, {"text": "Hybrid systems have improved parsing by integrating outputs obtained from different parsing models (.", "labels": [], "entities": [{"text": "parsing", "start_pos": 29, "end_pos": 36, "type": "TASK", "confidence": 0.9839889407157898}]}, {"text": "Our proposal can be situated among globaloptimization parsing methods as follows.", "labels": [], "entities": [{"text": "globaloptimization parsing", "start_pos": 35, "end_pos": 61, "type": "TASK", "confidence": 0.9081955254077911}]}, {"text": "The proposed tree-based model is deterministic but takes a step towards global optimization by widening the search space to include all necessary words connected by previously judged head-dependent relations, thus achieving a higher accuracy yet largely retaining the speed of deterministic parsing.", "labels": [], "entities": [{"text": "global optimization", "start_pos": 72, "end_pos": 91, "type": "TASK", "confidence": 0.6917031705379486}, {"text": "accuracy", "start_pos": 233, "end_pos": 241, "type": "METRIC", "confidence": 0.9979471564292908}]}], "datasetContent": [{"text": "In our experimental evaluation, we used Yamada's head rule to extract unlabeled dependencies from the Wall Street Journal section of a Penn Treebank.", "labels": [], "entities": [{"text": "Wall Street Journal section of a Penn Treebank", "start_pos": 102, "end_pos": 148, "type": "DATASET", "confidence": 0.9593332931399345}]}, {"text": "Sections 2-21 were used as the training data, and section 23 was used as the test data.", "labels": [], "entities": []}, {"text": "This test data The headword of wi can only be wj without searching within tj, because the relations between the other words in tj and w i have already been inferred from the decisions made within previous transitions.", "labels": [], "entities": []}, {"text": "If t j has a child wk that could become the head of wi under projectivity, this wk must be located between wi and wj.", "labels": [], "entities": []}, {"text": "The fact that wk 's head is wj means that there were two phases before ti and t j (i.e., w i and w j ) became the target: \u2022 ti and t k became the target, and Shift was selected.", "labels": [], "entities": []}, {"text": "\u2022 t k and t j became the target, and Left-Arc was selected.", "labels": [], "entities": []}, {"text": "The first phase precisely indicates that w i and wk are unrelated. was used in several other previous works, enabling mutual comparison with the methods reported in those works.", "labels": [], "entities": []}, {"text": "The SVM light package 2 was used to build the support vector machine classifiers.", "labels": [], "entities": [{"text": "SVM light package", "start_pos": 4, "end_pos": 21, "type": "DATASET", "confidence": 0.8322202563285828}]}, {"text": "The binary classifier for MPHC selection and the three-class classifier for transition selection were built using a cubic polynomial kernel.", "labels": [], "entities": [{"text": "MPHC selection", "start_pos": 26, "end_pos": 40, "type": "TASK", "confidence": 0.6785648167133331}]}, {"text": "The parsing speed was evaluated on a Core2Duo (2.53 GHz) machine.", "labels": [], "entities": [{"text": "parsing", "start_pos": 4, "end_pos": 11, "type": "TASK", "confidence": 0.970595121383667}]}], "tableCaptions": [{"text": " Table 4: Dependency parsing performance.", "labels": [], "entities": [{"text": "Dependency parsing", "start_pos": 10, "end_pos": 28, "type": "TASK", "confidence": 0.8956864476203918}]}]}