{"title": [{"text": "A Tree Transducer Model for Synchronous Tree-Adjoining Grammars", "labels": [], "entities": []}], "abstractContent": [{"text": "A characterization of the expressive power of synchronous tree-adjoining grammars (STAGs) in terms of tree transducers (or equivalently, synchronous tree substitution grammars) is developed.", "labels": [], "entities": []}, {"text": "Essentially, a STAG corresponds to an extended tree transducer that uses explicit substitution in both the input and output.", "labels": [], "entities": [{"text": "STAG", "start_pos": 15, "end_pos": 19, "type": "TASK", "confidence": 0.7497580051422119}]}, {"text": "This characterization allows the easy integration of STAG into toolkits for extended tree transducers.", "labels": [], "entities": [{"text": "STAG", "start_pos": 53, "end_pos": 57, "type": "TASK", "confidence": 0.9130817651748657}]}, {"text": "Moreover, the applicability of the characterization to several representational and algorithmic problems is demonstrated.", "labels": [], "entities": []}], "introductionContent": [{"text": "Machine translation has seen a multitude of formal translation models.", "labels": [], "entities": [{"text": "Machine translation", "start_pos": 0, "end_pos": 19, "type": "TASK", "confidence": 0.8399185836315155}]}, {"text": "Here we focus on syntaxbased (or tree-based) models.", "labels": [], "entities": []}, {"text": "One of the oldest models is the synchronous context-free grammar (.", "labels": [], "entities": []}, {"text": "It is clearly too weak as a syntax-based model, but found use in the string-based setting.", "labels": [], "entities": []}, {"text": "Top-down tree transducers have been heavily investigated in the formal language community), but as argued by Shieber (2004) they are still too weak for syntax-based machine translation.", "labels": [], "entities": [{"text": "syntax-based machine translation", "start_pos": 152, "end_pos": 184, "type": "TASK", "confidence": 0.6823136806488037}]}, {"text": "Instead Shieber proposes synchronous tree substitution grammars (STSGs) and develops an equivalent bimorphism characterization.", "labels": [], "entities": [{"text": "synchronous tree substitution grammars (STSGs", "start_pos": 25, "end_pos": 70, "type": "TASK", "confidence": 0.7136916021505991}]}, {"text": "This characterization eventually led to the rediscovery of extended tree transducers (, which are essentially as powerful as STSG.", "labels": [], "entities": []}, {"text": "They had been studied already by in the form of bimorphisms, but received little attention until rediscovered.", "labels": [], "entities": []}, {"text": "Shieber claims that even STSGs might be too simple to capture naturally occuring translation phenomena.", "labels": [], "entities": []}, {"text": "Instead Shieber suggests a yet more powerful mechanism, synchronous tree-adjoining grammars (STAGs) as introduced by, that can capture certain (mildly) context-sensitive features of natural language.", "labels": [], "entities": []}, {"text": "In the tradition of Shieber (2004), a characterization of the power of STAGs in terms of bimorphims was developed by.", "labels": [], "entities": [{"text": "STAGs", "start_pos": 71, "end_pos": 76, "type": "TASK", "confidence": 0.892841637134552}]}, {"text": "The bimorphisms used are rather unconventional because they consist of a regular tree language and two embedded tree transducers (instead of two tree homomorphisms).", "labels": [], "entities": []}, {"text": "Such embedded tree transducers) are particular macro tree transducers.", "labels": [], "entities": []}, {"text": "In this contribution, we try to unify the picture even further.", "labels": [], "entities": []}, {"text": "We will develop a tree transducer model that can simulate STAGs.", "labels": [], "entities": []}, {"text": "It turns out that the adjunction operation of an STAG can be explained easily by explicit substitution.", "labels": [], "entities": []}, {"text": "In this sense, the slogan that an STAG is an STSG with adjunction, which refers to the syntax, also translates to the semantics.", "labels": [], "entities": []}, {"text": "We prove that any tree transformation computed by an STAG can also be computed by an STSG using explicit substitution.", "labels": [], "entities": []}, {"text": "Thus, a simple evaluation procedure that performs the explicit substitution is all that is needed to simulate an STAG in a toolkit for STSGs or extended tree transducers like TIBURON by.", "labels": [], "entities": []}, {"text": "We show that some standard algorithms on STAG can actually be run on the constructed STSG, which often is simpler and better understood.", "labels": [], "entities": [{"text": "STAG", "start_pos": 41, "end_pos": 45, "type": "TASK", "confidence": 0.8990164399147034}]}, {"text": "Further, it might be easier to develop new algorithms with the alternative characterization, which we demonstrate with a product construction for input restriction in the spirit of.", "labels": [], "entities": []}, {"text": "Finally, we also present a complete tree transducer model that is as powerful as STAG, which is an extension of the embedded tree transducers of Shieber (2006).", "labels": [], "entities": [{"text": "STAG", "start_pos": 81, "end_pos": 85, "type": "METRIC", "confidence": 0.6636983752250671}]}], "datasetContent": [], "tableCaptions": []}