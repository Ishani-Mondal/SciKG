{"title": [{"text": "Squibs and Discussions Comments on \"Incremental Construction and Maintenance of Minimal Finite-State Automata,\" by Rafael C. Carrasco and Mikel L. Forcada", "labels": [], "entities": []}], "abstractContent": [{"text": "Ina recent article, Carrasco and Forcada (June 2002) presented two algorithms: one for incremental addition of strings to the language of a minimal, deterministic, cyclic automaton, and one for incremental removal of strings from the automaton.", "labels": [], "entities": []}, {"text": "The first algorithm is a generalization of the \"algorithm for unsorted data\"-the second of the two incremental algorithms for construction of minimal, deterministic, acyclic automata presented in Daciuk et al.", "labels": [], "entities": []}, {"text": "We show that the other algorithm in the older article-the \"algorithm for sorted data\"-can be generalized in a similar way.", "labels": [], "entities": []}, {"text": "The new algorithm is faster than the algorithm for addition of strings presented in Carrasco and Forcada's article, as it handles each state only once.", "labels": [], "entities": []}], "introductionContent": [{"text": "Carrasco and Forcada (2002) present two algorithms: one algorithm for incremental addition of strings into a minimal, cyclic, deterministic, finite-state automaton, and another for removal of strings from such an automaton.", "labels": [], "entities": []}, {"text": "The algorithm for addition of strings can be seen as an extension to cyclic automata of the algorithm for unsorted data, the second algorithm in.", "labels": [], "entities": []}, {"text": "It turns out that not only the algorithm for unsorted data (the second algorithm in), but also the algorithm for sorted data (the first one in that article) can be extended in the same way.", "labels": [], "entities": []}, {"text": "That extension is presented in Section 3 of this article.", "labels": [], "entities": []}, {"text": "Carrasco and Forcada emphasize on-line maintainance of dictionaries.", "labels": [], "entities": []}, {"text": "Their dictionaries are constantly updated.", "labels": [], "entities": []}, {"text": "Ina different model, dictionaries are mostly consulted and are updated much less frequently.", "labels": [], "entities": []}, {"text": "In such a model, it is more convenient to rebuild the dictionary off-line each time it is updated.", "labels": [], "entities": []}, {"text": "By taking the process off-line, one saves much memory, ascertain structures needed for construction are not needed for consultation, and other structures can be very efficiently compressed).", "labels": [], "entities": []}, {"text": "The data for dictionaries can be kept sorted; adding a few new (sorted) entries can be done in linear time.", "labels": [], "entities": []}, {"text": "Although Carrasco and Forcada's string addition algorithm can be used in this particular model, an algorithm specialized for sorted data can perform the construction process faster than its more general equivalent.", "labels": [], "entities": [{"text": "string addition", "start_pos": 32, "end_pos": 47, "type": "TASK", "confidence": 0.7432698905467987}]}, {"text": "The rest of the article is organized as follows.", "labels": [], "entities": []}, {"text": "Section 2 introduces mathematical preliminaries.", "labels": [], "entities": []}, {"text": "Section 3 presents an incremental algorithm for addition of sorted strings to a cyclic automaton.", "labels": [], "entities": []}, {"text": "First, the role of a data structure called the register is explained in detail in Section 3.1, then necessary modifications to the algorithm in are introduced in Section 3.2, and the final algorithm is presented in Section 3.3.", "labels": [], "entities": []}, {"text": "The algorithm is then analyzed in Section 4 and evaluated in Section 5.", "labels": [], "entities": []}], "datasetContent": [{"text": "Two experiments have been performed to compare the new algorithm with the algorithm for adding strings to a minimal, deterministic, cyclic automaton presented in.", "labels": [], "entities": []}, {"text": "In both experiments, a cyclic automaton was created.", "labels": [], "entities": []}, {"text": "It recognized any sequence of words from one set and any word from another set.", "labels": [], "entities": []}, {"text": "The first set was used to construct an initial cyclic automaton recognizing any sequence of words from the first set.", "labels": [], "entities": []}, {"text": "Then the second set was used to measure the relative speed of the algorithms being compared.", "labels": [], "entities": []}, {"text": "In the first experiment, the first set consisted of German words beginning with Latin letters from A to M, and the second set consisted of German words beginning with letters from N to Z.", "labels": [], "entities": []}, {"text": "This was the \"easier\" task, since only the initial state of the automaton had to be cloned.", "labels": [], "entities": []}, {"text": "In the second experiment, odd-numbered German words beginning with letters A to Z formed the first set, and even-numbered ones, the second set.", "labels": [], "entities": []}, {"text": "In this task, many paths in the automaton were shared between words from both sets.", "labels": [], "entities": []}, {"text": "A total of 69,669 German words were used in the experiments.", "labels": [], "entities": []}, {"text": "In the first experiment, the new algorithm was 4.96 times faster, and in the second one, 2.53.", "labels": [], "entities": []}, {"text": "Most of the speedup was not the result of using an algorithm optimized for sorted data-an improvement to the algorithm for adding strings in consisting in avoiding unnecessary cloning of prefix states (as described in section 3.2 and mentioned on page 215 in Carrasco and Forcada as a suggestion from one of Carrasco and Forcada's reviewers) was 3.12 and respectively 2.35 times faster than the original algorithm.", "labels": [], "entities": []}, {"text": "However, the new algorithm is still the fastest.", "labels": [], "entities": []}], "tableCaptions": []}