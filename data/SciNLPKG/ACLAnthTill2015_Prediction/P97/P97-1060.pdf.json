{"title": [], "abstractContent": [{"text": "In this paper we describe an approach to constraint based syntactic theories in terms of finite tree automata.", "labels": [], "entities": []}, {"text": "The solutions to constraints expressed in weak monadic second order (MSO) logic are represented by tree automata recognizing the assignments which make the formulas true.", "labels": [], "entities": []}, {"text": "We show that this allows an efficient representation of knowledge about the content of constraints which can be used as a practical tool for grammatical theory verification.", "labels": [], "entities": [{"text": "grammatical theory verification", "start_pos": 141, "end_pos": 172, "type": "TASK", "confidence": 0.8552682598431905}]}, {"text": "We achieve this by using the intertrans-latability of formulae of MSO logic and tree automata and the embedding of MSO logic into a constraint logic programming scheme.", "labels": [], "entities": []}, {"text": "The usefulness of the approach is discussed with examples from the realm of Principles-and-Parameters based parsing.", "labels": [], "entities": [{"text": "Principles-and-Parameters based parsing", "start_pos": 76, "end_pos": 115, "type": "TASK", "confidence": 0.49820078412691754}]}, {"text": "1 Introduction In recent years there has been a continuing interest in computational linguistics in both model theo-retic syntax and finite state techniques.", "labels": [], "entities": []}, {"text": "In this paper we attempt to bridge the gap between the two by exploiting an old result in logic, that the weak monadic second order (MSO) theory of two successor functions (WS2S) is decidable (Thatcher and Wright 1968, Doner 1970).", "labels": [], "entities": []}, {"text": "A \"weak\" second order theory is one in which the set variables are allowed to range only over finite sets.", "labels": [], "entities": []}, {"text": "There is a more powerful result available: it has been shown (Rabin 1969) that the strong monadic second order theory (variables range over infinite sets) of even countably many successor functions is decidable.", "labels": [], "entities": []}, {"text": "However, in our linguistic applications we only need to quantify over finite sets, so the weaker theory is enough, and the techniques correspondingly simpler3 The decidability proof works by showing a correspondence between formulas in the language of WS2S and tree automata, developed in such away that the formula is satisfiable iff the set of trees accepted by the corresponding automaton is nonempty.", "labels": [], "entities": []}, {"text": "While these results were well known, the (rather surprising) suitability of this formalism as a constraint language for Principles and Parameters (P&P) based linguistic theories has only recently been shown by Rogers (1994).", "labels": [], "entities": []}, {"text": "It should be pointed out immediately that the translation from formulas to automata, while effective , is just about as complex as it is possible to be.", "labels": [], "entities": []}, {"text": "In the worst case, the number of states can be given as a function of the number of variables in the input formula with a stack of exponents as tall as the number of quantifier alternations in the formula.", "labels": [], "entities": []}, {"text": "However, there is a growing body of work in the computer science literature motivated by the success of the MONA decision procedure (Henriksen et al.", "labels": [], "entities": [{"text": "MONA decision", "start_pos": 108, "end_pos": 121, "type": "TASK", "confidence": 0.802801251411438}]}, {"text": "1995) 2 on the application of these techniques in computer science (Basin and Klarlund 1995, Kelb et al.", "labels": [], "entities": []}, {"text": "1997), which suggests that in practical cases the extreme explosiveness of this technique can be effectively controlled.", "labels": [], "entities": []}, {"text": "It is one of our goals to show that this is the casein linguistic applications as well.", "labels": [], "entities": []}, {"text": "The decidability proof for WS2S is inductive on the structure of MSO formulas.", "labels": [], "entities": [{"text": "WS2S", "start_pos": 27, "end_pos": 31, "type": "DATASET", "confidence": 0.5875011086463928}]}, {"text": "Therefore we can choose our particular tree description language rather freely, knowing (a) that the resulting logic 1All of these are generalizations to trees of results on strings and the monadic second order theory of one successor function originally due to Biichi (1960).", "labels": [], "entities": []}, {"text": "The applications we mention here could be adapted to strings with finite-state automata replacing tree automata.", "labels": [], "entities": []}, {"text": "In general, all the techniques which apply to tree au-tomata are straightforward generalizations of techniques for FSAs.", "labels": [], "entities": [{"text": "FSAs", "start_pos": 115, "end_pos": 119, "type": "DATASET", "confidence": 0.8082529306411743}]}, {"text": "2The current version of the MONA tool works only on the MSO logic of strings.", "labels": [], "entities": []}, {"text": "There is work in progress at the University of Aarhus to extend MONA to \"MONA++\", for trees (Biehl et al. 1996).", "labels": [], "entities": [{"text": "MONA", "start_pos": 64, "end_pos": 68, "type": "METRIC", "confidence": 0.7991331219673157}]}], "introductionContent": [{"text": "In recent years there has been a continuing interest in computational linguistics in both model theoretic syntax and finite state techniques.", "labels": [], "entities": []}, {"text": "In this paper we attempt to bridge the gap between the two by exploiting an old result in logic, that the weak monadic second order (MSO) theory of two successor functions (WS2S) is decidable.", "labels": [], "entities": []}, {"text": "A \"weak\" second order theory is one in which the set variables are allowed to range only over finite sets.", "labels": [], "entities": []}, {"text": "There is a more powerful result available: it has been shown) that the strong monadic second order theory (variables range over infinite sets) of even countably many successor functions is decidable.", "labels": [], "entities": []}, {"text": "However, in our linguistic applications we only need to quantify over finite sets, so the weaker theory is enough, and the techniques correspondingly simpler3 The decidability proof works by showing a correspondence between formulas in the language of WS2S and tree automata, developed in such away that the formula is satisfiable iff the set of trees accepted by the corresponding automaton is nonempty.", "labels": [], "entities": []}, {"text": "While these results were well known, the (rather surprising) suitability of this formalism as a constraint language for Principles and Parameters (P&P) based linguistic theories has only recently been shown by.", "labels": [], "entities": []}, {"text": "It should be pointed out immediately that the translation from formulas to automata, while effective, is just about as complex as it is possible to be.", "labels": [], "entities": []}, {"text": "In the worst case, the number of states can be given as a function of the number of variables in the input formula with a stack of exponents as tall as the number of quantifier alternations in the formula.", "labels": [], "entities": []}, {"text": "However, there is a growing body of work in the computer science literature motivated by the success of the MONA decision procedure) 2 on the application of these techniques in computer science (, which suggests that in practical cases the extreme explosiveness of this technique can be effectively controlled.", "labels": [], "entities": [{"text": "MONA decision", "start_pos": 108, "end_pos": 121, "type": "TASK", "confidence": 0.4130115360021591}]}, {"text": "It is one of our goals to show that this is the casein linguistic applications as well.", "labels": [], "entities": []}, {"text": "The decidability proof for WS2S is inductive on the structure of MSO formulas.", "labels": [], "entities": [{"text": "WS2S", "start_pos": 27, "end_pos": 31, "type": "DATASET", "confidence": 0.5875011086463928}]}, {"text": "Therefore we can choose our particular tree description language rather freely, knowing (a) that the resulting logic 1All of these are generalizations to trees of results on strings and the monadic second order theory of one successor function originally due to.", "labels": [], "entities": []}, {"text": "The applications we mention here could be adapted to strings with finite-state automata replacing tree automata.", "labels": [], "entities": []}, {"text": "In general, all the techniques which apply to tree automata are straightforward generalizations of techniques for FSAs.", "labels": [], "entities": [{"text": "FSAs", "start_pos": 114, "end_pos": 118, "type": "DATASET", "confidence": 0.7420974969863892}]}, {"text": "2The current version of the MONA tool works only on the MSO logic of strings.", "labels": [], "entities": []}, {"text": "There is work in progress at the University of Aarhus to extend MONA to \"MONA++\", for trees ().", "labels": [], "entities": [{"text": "MONA", "start_pos": 64, "end_pos": 68, "type": "METRIC", "confidence": 0.7056258320808411}]}, {"text": "will be decidable and (b) that the translation to automata will go through as long as the atomic formulas of the language represent relations which can be translated (by hand if necessary) to tree automata.", "labels": [], "entities": []}, {"text": "We will see how this is done ill the next section, but the point can be appreciated immediately.", "labels": [], "entities": []}, {"text": "For example, and have investigated the usefulness of these techniques in dealing with feature trees which unfold feature structures; there the attributes of an attribute-value term are translated to distinct successor functions.", "labels": [], "entities": []}, {"text": "On the other hand, has developed a language rich in long-distance relations (dominance and precedence) which is more appropriate for work in Government-Binding (GB) theory.", "labels": [], "entities": [{"text": "Government-Binding (GB) theory", "start_pos": 141, "end_pos": 171, "type": "TASK", "confidence": 0.6875762224197388}]}, {"text": "Compact automata can be easily constructed to represent dominance and precedence relations.", "labels": [], "entities": []}, {"text": "One can imagine other possibilities as well: as we will see, the automaton for Kayne-style asymmetric, precedence-restricted c-command is also very compact, and makes a suitable primitive fora description language along the lines developed by.", "labels": [], "entities": []}, {"text": "The paper is organized as follows.", "labels": [], "entities": []}, {"text": "First we present some of the mathematical background, then we discuss (na'ive) uses of the techniques, followed by the presentation of a constraint logic programmingbased extension of MSO logic to avoid some of the problems of the naive approach, concluding with a discussion of its strengths and weaknesses.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}