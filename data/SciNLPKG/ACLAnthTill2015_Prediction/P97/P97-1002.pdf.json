{"title": [{"text": "Fast Context-Free Parsing Requires Fast Boolean Matrix Multiplication", "labels": [], "entities": []}], "abstractContent": [{"text": "Valiant showed that Boolean matrix multiplication (BMM) can be used for CFG parsing.", "labels": [], "entities": [{"text": "Boolean matrix multiplication (BMM", "start_pos": 20, "end_pos": 54, "type": "TASK", "confidence": 0.5487286508083343}, {"text": "CFG parsing", "start_pos": 72, "end_pos": 83, "type": "TASK", "confidence": 0.8427800536155701}]}, {"text": "We prove a dual result: CFG parsers running in time O([Gl[w[ 3-e) on a grammar G and a string w can be used to multiply m x m Boolean matrices in time O(m3-e/3).", "labels": [], "entities": []}, {"text": "In the process we also provide a formal definition of parsing motivated by an informal notion due to Lang.", "labels": [], "entities": []}, {"text": "Our result establishes one of the first limitations on general CFG parsing: a fast, practical CFG parser would yield a fast, practical BMM algorithm, which is not believed to exist.", "labels": [], "entities": [{"text": "CFG parsing", "start_pos": 63, "end_pos": 74, "type": "TASK", "confidence": 0.6802881956100464}]}], "introductionContent": [{"text": "The context-free grammar (CFG) formalism was developed during the birth of the field of computational linguistics.", "labels": [], "entities": [{"text": "context-free grammar (CFG) formalism", "start_pos": 4, "end_pos": 40, "type": "TASK", "confidence": 0.6826704988876978}]}, {"text": "The standard methods for CFG parsing are the CKY algorithm and Earley's algorithm, both of which have a worst-case running time of O(gN 3) fora CFG (in Chomsky normal form) of size g and a string of length N. give a variant of Earley's algorithm which runs in time O(gN3/log N).", "labels": [], "entities": [{"text": "CFG parsing", "start_pos": 25, "end_pos": 36, "type": "TASK", "confidence": 0.9340057373046875}, {"text": "CFG", "start_pos": 144, "end_pos": 147, "type": "DATASET", "confidence": 0.933342695236206}]}, {"text": "Valiant's parsing method is the asymptotically fastest known.", "labels": [], "entities": [{"text": "parsing", "start_pos": 10, "end_pos": 17, "type": "TASK", "confidence": 0.8496772646903992}]}, {"text": "It uses Boolean matrix multiplication (BMM) to speedup the dynamic programming in the CKY algorithm: its worst-case running time is), where M(rn) is the time it takes to multiply two m x m Boolean matrices together.", "labels": [], "entities": [{"text": "Boolean matrix multiplication (BMM)", "start_pos": 8, "end_pos": 43, "type": "TASK", "confidence": 0.6467993706464767}]}, {"text": "The standard method for multiplying matrices takes time O(m3).", "labels": [], "entities": []}, {"text": "There exist matrix multiplication algorithms with time complexity O(m3-J); for instance, Strassen's has a worstcase running time of O(m 2\"sl), and the fastest currently known has a worst-case running time of O(m 2\"376).", "labels": [], "entities": [{"text": "O", "start_pos": 132, "end_pos": 133, "type": "METRIC", "confidence": 0.7870182394981384}, {"text": "O", "start_pos": 208, "end_pos": 209, "type": "METRIC", "confidence": 0.9711965322494507}]}, {"text": "Unfortunately, the constants involved are so large that these fast algorithms (with the possible exception of Strassen's) cannot be used in practice.", "labels": [], "entities": []}, {"text": "As matrix multiplication is a very well-studied problem (see Strassen's historical account, section 10)), it is highly unlikely that simple, practical fast matrix multiplication algorithms exist.", "labels": [], "entities": [{"text": "matrix multiplication", "start_pos": 3, "end_pos": 24, "type": "TASK", "confidence": 0.8098818063735962}]}, {"text": "Since the best BMM algorithms all rely on general matrix multiplication 1, it is widely believed that there are no practical O(m 3-~) BMM algorithms.", "labels": [], "entities": []}, {"text": "One might therefore hope to find away to speedup CFG parsing without relying on matrix multiplication.", "labels": [], "entities": [{"text": "CFG parsing", "start_pos": 49, "end_pos": 60, "type": "TASK", "confidence": 0.730787605047226}]}, {"text": "However, we show in this paper that fast CFG parsing requires fast Boolean matrix multiplication in a precise sense: any parser running in time that represents parse data in a retrieval-efficient way can be converted with little computational Since it is very improbable that practical fast matrix multiplication algorithms exist, we thus establish one of the first nontrivial limitations on practical CFG parsing.", "labels": [], "entities": [{"text": "CFG parsing", "start_pos": 41, "end_pos": 52, "type": "TASK", "confidence": 0.7522670924663544}, {"text": "CFG parsing", "start_pos": 402, "end_pos": 413, "type": "TASK", "confidence": 0.7756265103816986}]}, {"text": "1The \"four Russians\" algorithm (, the fastest BMM algorithm that does not simply use ordinary matrix multiplication, has worst-case running time O(mS/log m).", "labels": [], "entities": []}, {"text": "Our technique, adapted from that used by for tree-adjoining grammar (TAG) parsing, is to show that BMM can be efficiently reduced to CFG parsing.", "labels": [], "entities": [{"text": "tree-adjoining grammar (TAG) parsing", "start_pos": 45, "end_pos": 81, "type": "TASK", "confidence": 0.6596319079399109}, {"text": "CFG parsing", "start_pos": 133, "end_pos": 144, "type": "TASK", "confidence": 0.7523422837257385}]}, {"text": "Satta's result does not apply to CFG parsing, since it explicitly relies on the properties of TAGs that allow them to generate non-context-free languages.", "labels": [], "entities": [{"text": "CFG parsing", "start_pos": 33, "end_pos": 44, "type": "TASK", "confidence": 0.7558868825435638}]}], "datasetContent": [], "tableCaptions": []}