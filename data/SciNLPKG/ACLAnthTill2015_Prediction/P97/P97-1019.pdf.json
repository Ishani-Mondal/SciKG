{"title": [{"text": "Negative Polarity Licensing at the Syntax-Semantics Interface", "labels": [], "entities": [{"text": "Negative Polarity Licensing", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.842381993929545}]}], "abstractContent": [{"text": "Recent work on the syntax-semantics interface (see e.g. (Dalrymple et al., 1994)) uses a fragment of linear logic as a 'glue language' for assembling meanings compositionally.", "labels": [], "entities": [{"text": "assembling meanings compositionally", "start_pos": 139, "end_pos": 174, "type": "TASK", "confidence": 0.6873918970425924}]}, {"text": "This paper presents a glue language account of how negative polarity items (e.g. ever, any) get licensed within the scope of negative or downward-entailing contexts (Ladusaw, 1979), e.g. Nobody ever left.", "labels": [], "entities": []}, {"text": "This treatment of licensing operates precisely at the syntax-semantics interface, since it is carried out entirely within the interface glue language (linear logic).", "labels": [], "entities": []}, {"text": "In addition to the account of negative polarity licensing, we show in detail how linear-logic proof nets (Girard, 1987; Gallier, 1992) can be used for efficient meaning deduction within this 'glue language' framework.", "labels": [], "entities": [{"text": "meaning deduction", "start_pos": 161, "end_pos": 178, "type": "TASK", "confidence": 0.7187997400760651}]}, {"text": "1 Background A recent strain of research on the interface between syntax and semantics, starting with (Dalrymple et al., 1993), uses a fragment of linear logic as a 'glue language' for assembling the meaning of a sentence compositionally.", "labels": [], "entities": [{"text": "assembling the meaning of a sentence compositionally", "start_pos": 185, "end_pos": 237, "type": "TASK", "confidence": 0.6991572167192187}]}, {"text": "In this approach, meaning assembly is guided not by a syntactic constituent tree but rather by the flatter functional structure (the LFG f-structure) of the sentence.", "labels": [], "entities": [{"text": "meaning assembly", "start_pos": 18, "end_pos": 34, "type": "TASK", "confidence": 0.8664177358150482}]}, {"text": "As a brief review of this approach, consider sentence (1): (1) Everyone left.", "labels": [], "entities": []}, {"text": "[ PRED 'LEAVE' SUBJ [ ] g PR D 'EWRYONE'] Each word in the sentence is associated with a 'meaning constructor' template, specified in the lexicon ; these meaning constructors are then instantiated with values from the f-structure.", "labels": [], "entities": [{"text": "PRED 'LEAVE' SUBJ", "start_pos": 2, "end_pos": 19, "type": "METRIC", "confidence": 0.7461552262306214}]}, {"text": "For sentence (1), this produces two premises of the linear logic glue language: everyone: left:-o H\"-*t every(person, S) g~,',-% X-o fa\"-*t leave(X) In the everyone premise the higher-order variable S ranges over the possible scope meanings of the quantifier, with lowercase x acting as a traditional first-order variable \"placeholder\" within the scope.", "labels": [], "entities": []}, {"text": "H ranges over LFG structures corresponding to the meaning of the entire generalized quantifier3 A meaning for (1) can be derived by applying the linear version of modus ponens, during which (unlike classical logic) the first premise everyone \"consumes\" the second premise left.", "labels": [], "entities": []}, {"text": "This deduction , along with the substitutions H ~-~ f~, X ~-~ x and S ~-~ Az.leave(x), produces the final meaning f~\"-*t every(person, Ax.leave(x)), which is in this simple case the only reading for the sentence.", "labels": [], "entities": []}, {"text": "One advantage of this deductive style of meaning assembly is that it provides an elegant account of quantifier scoping: each possible scope has a corresponding proof, obviating the need for quantifier storage.", "labels": [], "entities": [{"text": "meaning assembly", "start_pos": 41, "end_pos": 57, "type": "TASK", "confidence": 0.8175442516803741}]}, {"text": "2 Meaning deduction via proof nets A proo] net (Girard, 1987) is an undirected, connected graph whose node labels are propositions.", "labels": [], "entities": []}, {"text": "A 1Here we have simplified the notation of Dalrymple et al. somewhat, for example by stripping away the uni-versa/ quantifier operators from the variables..In this regard, note that the lowercase variables stand for arbitrary constants rather than particular terms, and generally are given limited scope within the antecedent of the premise.", "labels": [], "entities": []}, {"text": "Upper-case variables are Prolog-like variables that become instantiated to specific terms within the proof, and generally their scope is the entire premise.", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}