{"title": [{"text": "XTAG -A Graphical Workbench for Developing Tree-Adjoining Grammars*", "labels": [], "entities": []}], "abstractContent": [{"text": "We describe a workbench (XTAG) for the development of tree-adjoining grammars and their parsers, and discuss some issues that arise in the design of the graphical interface.", "labels": [], "entities": []}, {"text": "Contrary to string rewriting grammars generating trees, the elementary objects manipulated by a tree-adjoining grammar are extended trees (i.e. trees of depth one or more) which capture syntactic information of lexical items.", "labels": [], "entities": []}, {"text": "The unique characteristics of tree-adjoining grammars, its elementary objects found in the ~ lexicon (extended trees) and the derivational history of derived trees (also a tree), require a specially crafted interface in which the perspective has Shifted from a string-based to a tree-based system.", "labels": [], "entities": []}, {"text": "XTAG provides such a graphical interface in which the elementary objects are trees (or tree sets) and not symbols (or strings).", "labels": [], "entities": [{"text": "XTAG", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.888795018196106}]}, {"text": "The kernel of XTA G is a predictive left to right parser for unification-based tree-adjoining grammar [Schabes, 1991].", "labels": [], "entities": []}, {"text": "XTAG includes a graphical editor for trees, a graphical tree printer, utilities for manipulating and displaying feature structures for unification-based tree-adjoining grammar, facilities for keeping track of the derivational history of TAG trees combined with adjoining and substitution, a parser for unification based tree-adjoining grammars, utilities for defining grammars and lexicons for tree-adjoining grammars, a morphological recognizer for English (75 000 stems deriving 280 000 inflected forms) and a tree-adjoining grammar for English that covers a large range of linguistic phenomena.", "labels": [], "entities": [{"text": "XTAG", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.870133638381958}]}, {"text": "Considerations of portability, efficiency, homogeneity and ease of maintenance, lead us to the use of Common Lisp without its object language addition and to the use of the X Window interface to Common Lisp (CLX) for the implementation of XTAG.", "labels": [], "entities": []}, {"text": "XTA G without the large morphological and syntactic lexicons is public domain software.", "labels": [], "entities": []}, {"text": "The large morphological and syntactic lexicons can be obtained through an agreement with ACL's Data Collection Initiative.", "labels": [], "entities": [{"text": "ACL's Data Collection Initiative", "start_pos": 89, "end_pos": 121, "type": "DATASET", "confidence": 0.8638602018356323}]}], "introductionContent": [{"text": "Tree-adjoining grammar (TAG) and its lexicalized variant are tree-rewriting systems in which the syntactic properties of words are encoded as tree structured-objects of extended size.", "labels": [], "entities": [{"text": "Tree-adjoining grammar (TAG)", "start_pos": 0, "end_pos": 28, "type": "TASK", "confidence": 0.6376933693885803}]}, {"text": "TAG trees can be combined with adjoining and substitution to form new derived trees.", "labels": [], "entities": []}, {"text": "1 Tree-adjoining grammar differs from more traditional tree-generating systems such as context-free grammar in two ways: 1.", "labels": [], "entities": []}, {"text": "The objects combined in a tree-adjoining grammar (by adjoining and substitution) are trees and not strings.", "labels": [], "entities": []}, {"text": "In this approach, the lexicon associates with a word the entire structure it selects (as shown in) and not just a (non-terminal) symbol as in context-free grammars.", "labels": [], "entities": []}, {"text": "2. Unlike string-based systems such as context-free grammars, two objects are built when trees are combined: the resulting tree (the derived tree) and its derivational history (the derivation tree).", "labels": [], "entities": []}, {"text": "2 These two unique characteristics of tree-adjoining grammars, the elementary objects found in the lexicon (extended trees) and the distinction between derived tree and its derivational history (also a tree), require a specially crafted interface in which the perspective must be shifted from a string-based to a tree-based system.", "labels": [], "entities": []}, {"text": "1We assume familiarity throughout the paper with the definition of TAGs.", "labels": [], "entities": []}, {"text": "See the introduction by Joshi for an introduction to tree-adjoining grammar.", "labels": [], "entities": []}, {"text": "We refer the reader to Joshi, Joshi,,, and to Joshi and Schabes for more information on the linguistic characteristics of TAG such as its lexicalization and factoring recursion out of dependencies.", "labels": [], "entities": []}, {"text": "2The TAG derivation tree is the basis for semantic interpretation, generation [Shieber and  and machine translation since the information given in this data-structure is richer than the one found in the derived tree.", "labels": [], "entities": [{"text": "semantic interpretation", "start_pos": 42, "end_pos": 65, "type": "TASK", "confidence": 0.8445344269275665}, {"text": "machine translation", "start_pos": 96, "end_pos": 115, "type": "TASK", "confidence": 0.7820102870464325}]}, {"text": "Furthermore, it is at the level of the derivation tree that ambiguity must be defined.", "labels": [], "entities": []}, {"text": "XTA G provides such a graphical interface in which the elementary objects are trees (or tree sets) and not symbols (or strings of symbols).", "labels": [], "entities": []}, {"text": "Skeletons of such workbenches have been previously realized on Symbolics machines.", "labels": [], "entities": []}, {"text": "Although they provided some insights on the architectural design of a TAG workbench, they were never expanded to a full fledged natural language environment because of inherent limitations (such as their lack of portability).", "labels": [], "entities": []}, {"text": "XTAG runs under Common Lisp and it uses the Common LISP X Interface (CLX) to access the graphical primitives defined by the Xll protocol.", "labels": [], "entities": []}, {"text": "XTAG is portable across machines and Common Lisp compilers.", "labels": [], "entities": [{"text": "XTAG", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.869513213634491}]}, {"text": "The kernel of XTA G is a predictive left to right parser for unification-based tree-adjoining grammar . The system includes the following components and features: \u2022 Graphical edition of trees.", "labels": [], "entities": []}, {"text": "The graphical display of a tree is the only representation of a tree accessible to the user.", "labels": [], "entities": []}, {"text": "Some of the operations that can be performed graphically on trees are: -Add and edit nodes.", "labels": [], "entities": []}, {"text": "-Copy, paste, move or delete subtrees.", "labels": [], "entities": []}, {"text": "-Combine two trees with adjunction or substitution.", "labels": [], "entities": []}, {"text": "These operations keep track of the derivational history and update attributes stated inform of feature structures as defined in the framework of unification-based tree-adjoining grammar.", "labels": [], "entities": []}, {"text": "-View the derivational history of a derived tree and its components (elementary trees).", "labels": [], "entities": []}, {"text": "\u2022 A tree display module for efficient and aesthetic formatting of a tree based on anew tree display algorithm.", "labels": [], "entities": []}, {"text": "The algorithm is an improvement of the ones developed by R.eingold and Tolford and, Lee.", "labels": [], "entities": []}, {"text": "It guarantees in linear time that tress which are structural mirror images of on another are drawn such that their displays are reflections of one another while achieving minimum width of the tree.", "labels": [], "entities": []}, {"text": "\u2022 Capabilities for grouping trees into sets which can be linked to a file.", "labels": [], "entities": []}, {"text": "This is particularly useful since lexicalized TAGs organize trees into tree-families which capture all variations of a predicative lexical item fora given subcategorization frame.", "labels": [], "entities": []}, {"text": "\u2022 Utilities for editing and processing equations for unification based tree-adjoining grammar.", "labels": [], "entities": []}, {"text": "\u2022 A predictive left to right parser for unification-based tree-adjoining grammar . \u2022 Utilities for defining a grammar (set of trees, set of tree families, set of lexicons) which the parser uses.", "labels": [], "entities": []}, {"text": "\u2022 Morphological lexicons for English \u2022 A tree-adjoining grammar for English that covers a large range of linguistic phenomena.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}