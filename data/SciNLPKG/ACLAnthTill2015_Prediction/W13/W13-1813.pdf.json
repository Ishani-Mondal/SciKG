{"title": [], "abstractContent": [{"text": "We investigate the composition of finite-state automata in a multiprocessor environment , presenting a parallel variant of a widely-used composition algorithm.", "labels": [], "entities": []}, {"text": "We provide an approximate upper bound for composition speedup of the parallel variant with respect to serial execution, and empirically evaluate the performance of our implementation with respect to this bound.", "labels": [], "entities": []}], "introductionContent": [{"text": "Finite-state automata 1 allow for efficient implementations in terms of directed graphs with designated initial and final states, as well as labeled edges facilitating efficient storage and lookup.", "labels": [], "entities": []}, {"text": "Complex systems based on (weighted) finite-state automata have been successfully used in language processing ( , image compression, computational biology (, and many other applications.", "labels": [], "entities": [{"text": "language processing", "start_pos": 89, "end_pos": 108, "type": "TASK", "confidence": 0.7079313695430756}, {"text": "image compression", "start_pos": 113, "end_pos": 130, "type": "TASK", "confidence": 0.8173145651817322}, {"text": "computational biology", "start_pos": 132, "end_pos": 153, "type": "TASK", "confidence": 0.7461048066616058}]}, {"text": "Composition is a binary operation on finite-state transducers (FSTs) which creates transitions for matching output-and input-labels of the outgoing transitions of two operand states.", "labels": [], "entities": []}, {"text": "It is an important operation in both compile-time construction (where it maybe employed e.g. to combine different levels of representation) andsince lookup maybe considered a special case of composition -run-time querying of the aforementioned systems.", "labels": [], "entities": [{"text": "compile-time construction", "start_pos": 37, "end_pos": 62, "type": "TASK", "confidence": 0.724490761756897}]}, {"text": "Despite the increasing trend towards multiprocessor systems and the resulting demand for efficient parallel implementations for common operations, no generic parallel algorithm for the composition of FSTs has yet been established, although many efforts have been made to improve composition performance in special cases.", "labels": [], "entities": []}, {"text": "In Holub and\u0160tekrand\u02c7and\u0160tekr (2009), a parallel implementation for the case of string lookup in a deterministic finite-state acceptor (FSA) is presented.", "labels": [], "entities": []}, {"text": "A generalization ton operands which prevents the construction of large intermediate results is given in.", "labels": [], "entities": []}, {"text": "A good deal of work has focussed on dynamic, on-the-fly, or lazy implementations (, in which the composition of FSTs is only partly computed, new states and transitions being added to the result only when necessary.", "labels": [], "entities": []}, {"text": "In this article, we present a parallel variant of a widely-used composition algorithm) which can make use of multiprocessor architectures by employing multiple concurrent threads of execution.", "labels": [], "entities": []}, {"text": "We provide an approximate upper bound for composition speedup using a state-wise parallel algorithm with respect to serial execution, and empirically evaluate the performance of our implementation with respect to this bound.", "labels": [], "entities": []}], "datasetContent": [{"text": "To investigate the practical utility of our multithreaded composition algorithm, we compared running times of Algorithms 1 and 2.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: Global mean (\u00b5) and standard deviation  (\u03c3) of observed speedup (S) and associated de- gree of parallelization (P ) for peer-to-peer parallel  composition using N concurrent threads.", "labels": [], "entities": [{"text": "Global mean (\u00b5)", "start_pos": 10, "end_pos": 25, "type": "METRIC", "confidence": 0.9433956265449523}, {"text": "standard deviation  (\u03c3) of observed speedup (S)", "start_pos": 30, "end_pos": 77, "type": "METRIC", "confidence": 0.8668130446564067}, {"text": "associated de- gree of parallelization (P )", "start_pos": 82, "end_pos": 125, "type": "METRIC", "confidence": 0.7830749683909946}]}]}