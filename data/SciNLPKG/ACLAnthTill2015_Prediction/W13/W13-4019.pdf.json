{"title": [{"text": "A Prolog Datamodel for State Chart XML", "labels": [], "entities": [{"text": "Prolog Datamodel", "start_pos": 2, "end_pos": 18, "type": "DATASET", "confidence": 0.8352932929992676}, {"text": "State Chart", "start_pos": 23, "end_pos": 34, "type": "TASK", "confidence": 0.5921144634485245}]}], "abstractContent": [{"text": "SCXML was proposed as one description language for dialog control in the W3C Multimodal Architecture but lacks the facilities required for grounding and reasoning.", "labels": [], "entities": []}, {"text": "This prohibits the application of many dialog modeling techniques for mul-timodal applications following this W3C standard.", "labels": [], "entities": [{"text": "dialog modeling", "start_pos": 39, "end_pos": 54, "type": "TASK", "confidence": 0.8510158360004425}]}, {"text": "By extending SCXML with a Prolog datamodel and scripting language, we enable those techniques to be employed again.", "labels": [], "entities": [{"text": "Prolog datamodel", "start_pos": 26, "end_pos": 42, "type": "DATASET", "confidence": 0.970628559589386}]}, {"text": "Thereby bridging the gap between respective dialog modeling research and a standardized architecture to access and coordinate modalities.", "labels": [], "entities": []}], "introductionContent": [{"text": "Deploying multimodal applications has long been an activity of custom solutions, each with their own access to modalities, approaches to sensor fusion and fission and techniques for dialog modeling.", "labels": [], "entities": [{"text": "dialog modeling", "start_pos": 182, "end_pos": 197, "type": "TASK", "confidence": 0.8483498096466064}]}, {"text": "With the advent of the W3C MMI architecture (, the W3C proposed a standardized approach to ensure interoperability among its constituting components).", "labels": [], "entities": []}, {"text": "The architecture proposed by the W3C decomposes a multimodal application into a nested structure of interaction managers for dialog control and modality components for in-and output.", "labels": [], "entities": []}, {"text": "An application is conceived as a set of control documents expressed in SCXML ( or CCXML () for the interaction managers and a set of presentation documents with modality-specific markup for the modality components.", "labels": [], "entities": []}, {"text": "A topmost root controller document describes the global dialog and instantiates modality components as required.", "labels": [], "entities": []}, {"text": "Each modality component can, in turn, again bean interaction manager, handling more fine granular concerns of dialog control, such as error correction or even sensor fusion/fission.", "labels": [], "entities": [{"text": "error correction", "start_pos": 134, "end_pos": 150, "type": "TASK", "confidence": 0.6861265748739243}]}, {"text": "As one proposed XML dialect for control documents, State Chart XML (SCXML) is given the responsibility to model an applications dialog behavior.", "labels": [], "entities": []}, {"text": "SCXML as such is a markup language to express Harel state charts) with nested and parallel machine configurations.", "labels": [], "entities": []}, {"text": "The transitions between configurations are triggered by events delivered into the interpreter either from external components or raised by the interpreter itself.", "labels": [], "entities": []}, {"text": "Whenever an event arrives, the SCXML interpreter can perform actions described as executable content.", "labels": [], "entities": []}, {"text": "This includes invoking or sending events to external components, processing data or updating the datamodel via an embedded scripting language.", "labels": [], "entities": []}, {"text": "SCXML has been proven to be suitable to decouple the control flow and presentation layer in dialog management.", "labels": [], "entities": [{"text": "dialog management", "start_pos": 92, "end_pos": 109, "type": "TASK", "confidence": 0.8483417928218842}]}, {"text": "It has been used in several applications to express dialog states) or to easily incorporate external information).", "labels": [], "entities": []}, {"text": "However, SCXML seems to be suited only to implement finite state or frame-based/formfilling dialogue management approaches.", "labels": [], "entities": []}, {"text": "Applications using theses dialog techniques are oftentimes inflexible as they lack grounding and reasoning.", "labels": [], "entities": []}, {"text": "In this regard, demand that dialog managers should feature: (i) a formal logic foundation, (ii) an interference engine, (iii) general purpose planners and (iv) knowledge representation and expressiveness.", "labels": [], "entities": [{"text": "knowledge representation", "start_pos": 160, "end_pos": 184, "type": "TASK", "confidence": 0.6980421841144562}]}, {"text": "Most of these requirements are addressed by employing Prolog.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 54, "end_pos": 60, "type": "DATASET", "confidence": 0.938016951084137}]}, {"text": "Embedding it as a scripting language into SCXML allows multimodal applications in the W3C MMI Architecture to employ the more elaborate dialog management techniques, resulting in more natural and flexible interaction.", "labels": [], "entities": []}, {"text": "In this paper we describe our integration of Prolog as an embedded scripting language in an SCXML datamodel.", "labels": [], "entities": [{"text": "SCXML datamodel", "start_pos": 92, "end_pos": 107, "type": "DATASET", "confidence": 0.8396203815937042}]}, {"text": "All of the work described here is implemented as part of our uSCXML interpreter 1 by embedding the SWI Prolog implementation.", "labels": [], "entities": [{"text": "SWI Prolog implementation", "start_pos": 99, "end_pos": 124, "type": "DATASET", "confidence": 0.8015702168146769}]}], "datasetContent": [], "tableCaptions": []}