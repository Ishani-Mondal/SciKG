{"title": [{"text": "Making UIMA Truly Interoperable with SPARQL", "labels": [], "entities": [{"text": "SPARQL", "start_pos": 37, "end_pos": 43, "type": "DATASET", "confidence": 0.7050616145133972}]}], "abstractContent": [{"text": "Unstructured Information Management Architecture (UIMA) has been gaining popularity in annotating text corpora.", "labels": [], "entities": [{"text": "Unstructured Information Management Architecture (UIMA)", "start_pos": 0, "end_pos": 55, "type": "TASK", "confidence": 0.7230994871684483}]}, {"text": "The architecture defines common data structures and interfaces to support interoper-ability of individual processing components working together in a UIMA application.", "labels": [], "entities": []}, {"text": "The components exchange data by sharing common type systems-schemata of datatype structures-which extend a generic, top-level type system built into UIMA.", "labels": [], "entities": []}, {"text": "This flexibility in extending type systems has resulted in the development of repositories of components that share one or several type systems; however, components coming from different repositories, and thus not sharing type systems, remain incompatible.", "labels": [], "entities": []}, {"text": "Commonly, this problem has been solved programmatically by implementing UIMA components that perform the alignment of two type systems, an arduous task that is impractical with a growing number of type systems.", "labels": [], "entities": []}, {"text": "We alleviate this problem by introducing a conversion mechanism based on SPARQL, a query language for the data retrieval and manipulation of RDF graphs.", "labels": [], "entities": [{"text": "data retrieval and manipulation of RDF graphs", "start_pos": 106, "end_pos": 151, "type": "TASK", "confidence": 0.7570340888840812}]}, {"text": "We provide a UIMA component that serialises data coming from a source component into RDF, executes a user-defined, type-conversion query, and deserialises the updated graph into a target component.", "labels": [], "entities": []}, {"text": "The proposed solution encourages ad hoc conversions , enables the usage of heterogeneous components, and facilitates highly customised UIMA applications.", "labels": [], "entities": []}], "introductionContent": [{"text": "Unstructured Information Management Architecture (UIMA)) is a framework that supports the interoperability of mediaprocessing software components by defining common data structures and interfaces the components exchange and implement.", "labels": [], "entities": [{"text": "Unstructured Information Management Architecture (UIMA))", "start_pos": 0, "end_pos": 56, "type": "TASK", "confidence": 0.6983990286077771}]}, {"text": "The architecture has been gaining interest from academia and industry alike for the past decade, which resulted in a multitude of UIMA-supporting repositories of analytics.", "labels": [], "entities": []}, {"text": "Notable examples include METANET4U components) featured in U-Compare 1 ,), cTAKES (, BioNLP-UIMA Component Repository (, and JULIE Lab's UIMA Component Repository (JCoRe) (.", "labels": [], "entities": [{"text": "JULIE Lab's UIMA Component Repository (JCoRe)", "start_pos": 125, "end_pos": 170, "type": "DATASET", "confidence": 0.8136855165163676}]}, {"text": "However, despite conforming to the UIMA standard, each repository of analytics usually comes with its own set of type systems, i.e., representations of data models that are meant to be shared between analytics and thus ensuring their interoperability.", "labels": [], "entities": [{"text": "UIMA", "start_pos": 35, "end_pos": 39, "type": "DATASET", "confidence": 0.9101642370223999}]}, {"text": "At present, UIMA does not facilitate the alignment of (all or selected) types between type systems, which makes it impossible to combine analytics coming from different repositories without an additional programming effort.", "labels": [], "entities": []}, {"text": "For instance, NLP developers may want to use a sentence detector from one repository and a tokeniser from another repository only to learn that the required input Sentence type for the tokeniser is defined in a different type system and namespace than the output Sentence type of the sentence detector.", "labels": [], "entities": []}, {"text": "Although both Sentence types represent the same concept and may even have the same set of features (attributes), they are viewed as two distinct types by UIMA.", "labels": [], "entities": [{"text": "UIMA", "start_pos": 154, "end_pos": 158, "type": "DATASET", "confidence": 0.8737181425094604}]}, {"text": "Less trivial incompatibility arises from the same concept being encoded as structurally different types in different type systems.", "labels": [], "entities": []}, {"text": "show fragments of some of existing type systems; specifically, they show the differences in encoding coreferences and events, respectively.", "labels": [], "entities": []}, {"text": "For instance, in comparison to the JCoRe type system in(b), the DKPro type system in(a) has an additional type that points to the beginning of the linked list of coreferences.", "labels": [], "entities": []}, {"text": "Conceptually similar types in two different type systems may also be incompatible in terms of the amount of information they convey.", "labels": [], "entities": []}, {"text": "Compare, for instance, type systems in that encode a similar concept, event.", "labels": [], "entities": []}, {"text": "Not only are they structurally different, but the cTAKES type system in(a) also involves a larger number of features than the other two type systems.", "labels": [], "entities": []}, {"text": "Although, in this case, the alignment of any two structures cannot be carried out without a loss or deficiency of information, it may still be beneficial to do so for applications that consist of components that either fulfill partially complete information or do not require it altogether.", "labels": [], "entities": []}, {"text": "The available type systems vary greatly in size, their modularity, and intended applicability.", "labels": [], "entities": []}, {"text": "The DKPro UIMA software collection, for instance, includes multiple, small-size type systems organised around specific syntactic and semantic concepts, such as part of speech, chunks, and named entities.", "labels": [], "entities": [{"text": "DKPro UIMA software collection", "start_pos": 4, "end_pos": 34, "type": "DATASET", "confidence": 0.8865747600793839}]}, {"text": "In contrast, the U-Compare project as well as cTAKES are oriented towards having a single type system.", "labels": [], "entities": []}, {"text": "Respectively, the type systems define nearly 300 and 100 syntactic and semantic types, with U-Compare's semantic types biased towards biology and chemistry and cTAKES's covering clinical domain.", "labels": [], "entities": []}, {"text": "Most of the U-Compare types extend a fairly expressive higher-level type, which makes them universally applicable, but at the same time, breaks their semantic cohesion.", "labels": [], "entities": []}, {"text": "The lack of modularity and the all-embroiling types suggest that the U-Compare type system is developed primarily to work with the U-Compare application.", "labels": [], "entities": []}, {"text": "The Center for Computational Pharmacology (CCP) type system () is a radically different approach to the previous systems.", "labels": [], "entities": []}, {"text": "It defines a closed set of top-level types that facilitate the use of external resources, such as databases and ontologies.", "labels": [], "entities": []}, {"text": "This gives the advantage of having a nonvolatile type system, indifferent to changes in the external resources, as well as greater flexibility in handling some semantic models that would otherwise be impossible to encode in a UIMA type system.", "labels": [], "entities": []}, {"text": "On the other hand, such an approach shifts the handling of interoperability from UIMA to applications that must resolve compatibility issues at runtime, which also results in the weakly typed programming of analytics.", "labels": [], "entities": []}, {"text": "Additionally, the UIMA's native indexing of annotation types will no longer work with such a type system, which prompts an additional programming effort from developers.", "labels": [], "entities": []}, {"text": "The aforementioned examples suggest that establishing a single type system that could be shared among all providers is unlikely to ever take place due to the variability in requirements and applicability.", "labels": [], "entities": []}, {"text": "Instead, we adopt an idea of using a conversion mechanism that enables aligning types across type systems.", "labels": [], "entities": []}, {"text": "The conversion has commonly been solved programmatically by creating UIMA analytics that map all or (more likely) selected types between two type systems.", "labels": [], "entities": []}, {"text": "For instance, U-Compare features a component that translates some of the CPP types into the UCompare types.", "labels": [], "entities": []}, {"text": "The major drawback of such a solution is the necessity of having to implement an analytic which requires programming skills and becomes an arduous task with an increasing number of type systems.", "labels": [], "entities": []}, {"text": "In contrast, we propose a conversion based entirely on developers' writing a query in the well established SPARQL language,  an official W3C Recommendation 2 . Our approach involves 1) the serialisation of UIMA's internal data structures to RDF 3 , 2) the execution of a userdefined, type-conversion SPARQL query, and 3) the deserialisation of the results back to the UIMA structure.", "labels": [], "entities": [{"text": "W3C Recommendation", "start_pos": 137, "end_pos": 155, "type": "DATASET", "confidence": 0.8558536171913147}]}, {"text": "The remainder of this paper is organised as follows.", "labels": [], "entities": []}, {"text": "The next section presents related work.", "labels": [], "entities": []}, {"text": "Section 3 provides background information on UIMA, RDF and SPARQL.", "labels": [], "entities": []}, {"text": "Section 4 discusses the proposed representation of UIMA structures in RDF, whereas Section 5 examines the utility of our method.", "labels": [], "entities": []}, {"text": "Section 6 details the available implementation, and Section 7 concludes the paper.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}