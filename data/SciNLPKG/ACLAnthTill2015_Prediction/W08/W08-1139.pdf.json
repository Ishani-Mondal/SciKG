{"title": [{"text": "JU-PTBSGRE: GRE Using Prefix Tree Based Structure", "labels": [], "entities": [{"text": "GRE", "start_pos": 12, "end_pos": 15, "type": "METRIC", "confidence": 0.6336337327957153}]}], "abstractContent": [{"text": "This paper presents a Prefix Tree based model of Generation of Referring Expression (RE).", "labels": [], "entities": [{"text": "Generation of Referring Expression (RE)", "start_pos": 49, "end_pos": 88, "type": "TASK", "confidence": 0.6028816444533212}]}, {"text": "Our algorithm PTBSGRE works in two phases.", "labels": [], "entities": [{"text": "PTBSGRE", "start_pos": 14, "end_pos": 21, "type": "DATASET", "confidence": 0.7982960939407349}]}, {"text": "First, an encoded prefix tree is constructed describing the domain structure.", "labels": [], "entities": []}, {"text": "Subsequently , RE is generated using that structure.", "labels": [], "entities": [{"text": "RE", "start_pos": 15, "end_pos": 17, "type": "METRIC", "confidence": 0.8562402725219727}]}, {"text": "We evaluated our system using Dice, MASI, Accuracy , Minimality and Uniqueness scoring method using standard TEVAl tool and the result is encouraging.", "labels": [], "entities": [{"text": "Dice", "start_pos": 30, "end_pos": 34, "type": "METRIC", "confidence": 0.8132817149162292}, {"text": "MASI", "start_pos": 36, "end_pos": 40, "type": "METRIC", "confidence": 0.9527637958526611}, {"text": "Accuracy", "start_pos": 42, "end_pos": 50, "type": "METRIC", "confidence": 0.9949774146080017}, {"text": "TEVAl", "start_pos": 109, "end_pos": 114, "type": "METRIC", "confidence": 0.6596534848213196}]}], "introductionContent": [{"text": "Generation of referring expression (GRE) is an important task in the field of Natural Language Generation (NLG) systems.", "labels": [], "entities": [{"text": "Generation of referring expression (GRE)", "start_pos": 0, "end_pos": 40, "type": "TASK", "confidence": 0.879493066242763}, {"text": "Natural Language Generation (NLG)", "start_pos": 78, "end_pos": 111, "type": "TASK", "confidence": 0.8149612049261729}]}, {"text": "The existing algorithms in GRE lie in two extremities.", "labels": [], "entities": [{"text": "GRE", "start_pos": 27, "end_pos": 30, "type": "TASK", "confidence": 0.7161282300949097}]}, {"text": "Incremental Algorithm is simple and speedy but less expressive in nature whereas others are complex and exhaustive but more expressive in nature.", "labels": [], "entities": []}, {"text": "We propose anew Prefix Tree (Trie) based framework for modeling GRE problems.", "labels": [], "entities": [{"text": "GRE", "start_pos": 64, "end_pos": 67, "type": "TASK", "confidence": 0.8842096924781799}]}, {"text": "It incorporates intricate features of GRE (like set and boolean descriptions, context sensitivity, relational description etc.) while achieving attractive properties of Incremental algorithm (simplicity, speed etc.).", "labels": [], "entities": [{"text": "simplicity", "start_pos": 192, "end_pos": 202, "type": "METRIC", "confidence": 0.9786605834960938}]}, {"text": "The prefix tree based algorithm works in two phases.", "labels": [], "entities": []}, {"text": "First, it encodes the description, stored in the knowledge base, in the form of prefix tree structure.", "labels": [], "entities": []}, {"text": "Secondly, it generates the referring expression identifying the target object, which is basically anode search problem in the tree.", "labels": [], "entities": []}, {"text": "The edges in our encoded trie structure are labeled and the path from root to that node forms the distinguishing description for the target object.", "labels": [], "entities": []}, {"text": "Let D be the Domain, r be the target object and P be the 'PreferredAttributes' List.The Trie constructionn algorithm ConstructTrie(D,P,T) is shown in  The significant achievement is that incompleteness of previous algorithms can be tackled in this model in a straightforward way.", "labels": [], "entities": []}, {"text": "For example, in case of vague descriptions (overlapping properties), Incremental and other algorithms are unable to find unambiguous description even if it exists but our prefix tree model takes into account hearer model", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}