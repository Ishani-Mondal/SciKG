{"title": [{"text": "AUTOMATED INVERSION OF LOGIC GRAMMARS FOR GENERATION", "labels": [], "entities": [{"text": "AUTOMATED", "start_pos": 0, "end_pos": 9, "type": "TASK", "confidence": 0.9404182434082031}, {"text": "INVERSION", "start_pos": 10, "end_pos": 19, "type": "METRIC", "confidence": 0.9010227918624878}, {"text": "LOGIC GRAMMARS FOR GENERATION", "start_pos": 23, "end_pos": 52, "type": "METRIC", "confidence": 0.7062342166900635}]}], "abstractContent": [{"text": "We describe a system of reversible grammar in which, given a logic-grammar specification of a natural language, two efficient PROLOG programs are derived by an off-line compilation process: a parser and a generator for this language.", "labels": [], "entities": []}, {"text": "The centerpiece of the system is the inversion algorithm designed to compute the generator code from the parser's PRO-LOG code, using the collection of minimal sets of essential arguments (MSEA) for predicates.", "labels": [], "entities": []}, {"text": "The system has been implemented to work with Definite Clause Grammars (DCG) and is apart of an English-Japanese machine translation project currently underdevelopment at NYU's Courant Institute .", "labels": [], "entities": [{"text": "English-Japanese machine translation", "start_pos": 95, "end_pos": 131, "type": "TASK", "confidence": 0.6778051555156708}, {"text": "NYU's Courant Institute", "start_pos": 170, "end_pos": 193, "type": "DATASET", "confidence": 0.7189515680074692}]}], "introductionContent": [{"text": "The results reported in this paper are part of the ongoing research project to explore possibilities of an automated derivation of both an efficient parser and an efficient generator for natural language, such as English or Japanese, from a formal specification for this language.", "labels": [], "entities": []}, {"text": "Thus, given a grammar-like description of a language, specifying both its syntax as well as \"semantics\" (by which we mean a correspondence of well-formed expressions of natural language to expressions of a formal representation language) we want to obtain, by a fully automatic process, two possibly different programs: a parser and a generator.", "labels": [], "entities": []}, {"text": "The parser will translate well-formed expression of the source language into expressions of the language of \"semantic\" representation, such as regularized operator-argument forms, or formulas in logic.", "labels": [], "entities": []}, {"text": "The generator, on the other hand, will accept well-formed expressions of the semantic representation language and produce corresponding expressions in the source natural language.", "labels": [], "entities": []}, {"text": "Among the arguments for adopting the bidirectional design in NLP the following are perhaps the most widely shared: \u2022 A bidirectional NLP system, or a system whose inverse can be derived by a fully automated process, greatly reduces effort required for the system development, since we need to write only one program or specification instead of two.", "labels": [], "entities": []}, {"text": "The actual amount of savings ultimately depends upon the extend to which the NLP system is made bidirectional, for example, how much of the language analysis process can be inverted for generation.", "labels": [], "entities": [{"text": "language analysis", "start_pos": 140, "end_pos": 157, "type": "TASK", "confidence": 0.7018909752368927}]}, {"text": "At present we reverse just a little more than a syntactic parser, but the method can be applied to more advanced analyzers as well.", "labels": [], "entities": []}, {"text": "\u2022 Using a single specification (a grammar) underlying both the analysis and the synthesis processes leads to more accurate capturing of the language.", "labels": [], "entities": []}, {"text": "Although no NLP grammar is ever complete, the grammars used in parsing tend to be \"too loose\", or unsound, in that they would frequently accept various ill-formed strings as legitimate sentences, while the grammars used for generation are usually made \"too tight\" as a result of limiting their output to the \"best\" surface forms.", "labels": [], "entities": []}, {"text": "A reversible system for both parsing and generation requires a finely balanced grammar which is sound and as complete as possible.", "labels": [], "entities": [{"text": "parsing and generation", "start_pos": 29, "end_pos": 51, "type": "TASK", "confidence": 0.7300862073898315}]}, {"text": "\u2022 A reversible grammar provides, by design, the match between system's analysis and generation capabilities, which is especially important in interactive systems.", "labels": [], "entities": []}, {"text": "A discrepancy in this capacity may mislead the user, who tends to assume that what is generated as output is also acceptable as input, and vice-versa.", "labels": [], "entities": []}, {"text": "\u2022 Finally, a bidirectional system can be expected to be more robust, easier to maintain and modify, and altogether more perspicuous.", "labels": [], "entities": []}, {"text": "In the work reported here we concenlrated on unification-based formalisms, in particular Definite Clause Grammars, which can be compiled dually into PROLOG parser and generator, where the generator is obtained from the parser's code with the inversion procedure described below.", "labels": [], "entities": []}, {"text": "As noted by, this transformation must involve rearranging the order of literals on the right-hand side of some clauses.", "labels": [], "entities": []}, {"text": "We noted that the design of the string grammar makes it more suitable as a basis of a reversible system than other grammar designs, although other grammars can be \"normalized\".", "labels": [], "entities": []}, {"text": "We also would like to point out that our main emphasis is on the problem of reversibility rather than generation, the latter involving many problems that we don't deal with here (see, e.g..", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}