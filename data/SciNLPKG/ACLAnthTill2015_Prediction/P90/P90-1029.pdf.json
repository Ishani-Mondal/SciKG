{"title": [{"text": "Multiple Underlying Systems: Translating User Requests into Programs to Produce Answers", "labels": [], "entities": [{"text": "Translating User Requests into Programs to Produce Answers", "start_pos": 29, "end_pos": 87, "type": "TASK", "confidence": 0.6962348110973835}]}], "abstractContent": [{"text": "A user may typically need to combine the strengths of more than one system in order to perform a task.", "labels": [], "entities": []}, {"text": "In this paper, we describe a component of the Janus natural language interface that translates inten-sional logic expressions representing the meaning of a request into executable code for each application program, chooses which combination of application systems to use, and designs the transfer of data among them in order to provide an answer.", "labels": [], "entities": []}, {"text": "The complete Janus natural language system has been ported to two large command and control decision support aids.", "labels": [], "entities": []}], "introductionContent": [{"text": "The norm in the next generation of user environments will be distributed, networked applications.", "labels": [], "entities": []}, {"text": "Many problems will be solvable only by use of a cornbination of applications.", "labels": [], "entities": []}, {"text": "If natural language technology is to be applicable in such environments, we must continue to enable the user to talk to computers about his/her problem, not about which application(s) to use.", "labels": [], "entities": []}, {"text": "Most current natural language (NL) systems, whether accepting spoken or typed input, are designed to interface to a single homogeneous underlying system; they have a component geared to producing code for that single class of application systems, such as a single relational database.", "labels": [], "entities": []}, {"text": "Providing an English interface to the user's database, a separate English interface to the same user's planning system, and a third interface to a simulation package, for instance, will neither be attractive nor cost-effective.", "labels": [], "entities": []}, {"text": "By contrast, a seamless, multi-modal, natural language interface will make use of a heterogeneous environment feasible and, ff done well, transparent; this can be accomplished by enabling the user to state information needs without specifying how to decompose those needs into a program calling the various underlying systems required to meet those needs.", "labels": [], "entities": []}, {"text": "We believe users who see that NL technology does insulate them from the underlying implemantation idiosyncrasies of one application will expect that our models of language and understanding will extend to simultaneous access of several applications.", "labels": [], "entities": []}, {"text": "In DARPA's Fleet Command Center Battle Management Program (FCCBMP), several applications (call them underlying systems) are involved, including a relational database (IDB), two expert systems (CASES and FRESH), and a decision support system (OSGP).", "labels": [], "entities": [{"text": "Fleet Command Center Battle Management Program (FCCBMP)", "start_pos": 11, "end_pos": 66, "type": "TASK", "confidence": 0.7043429248862796}]}, {"text": "The hardware platforms include workstations, conventional timesharing machines, and parallel mainframes.", "labels": [], "entities": []}, {"text": "Suppose the user asks Which of those submarines has the greatest probability of locating A within 10 hours?", "labels": [], "entities": []}, {"text": "Answering that question involves subproblems from several underlying applications: the display facility, to determine what \"those submarines\" refers to; FRESH, to calculate how long each submarine would take to get to A's vicinity; CASES, for an intensive, parallelizable numerical calculation estimating the probabilities; and the display facility again, to present the response.", "labels": [], "entities": [{"text": "FRESH", "start_pos": 153, "end_pos": 158, "type": "METRIC", "confidence": 0.9956244826316833}, {"text": "CASES", "start_pos": 232, "end_pos": 237, "type": "METRIC", "confidence": 0.8851473927497864}]}, {"text": "While acoustic and linguistic processing can determine what the user wants, the problem of translating that into an effective program to do what the user wants is a challenging, but solvable problem.", "labels": [], "entities": []}, {"text": "In order to deal with multiple underlying systems, not only must our NL interface be able to represent the meaning of the user's request, but it must also be capable of organizing the various application programs at its disposal, choosing which combination of resources to use, and supervising the transfer of data among them.", "labels": [], "entities": []}, {"text": "We call this the multiple underlying systems (MUS) problem.", "labels": [], "entities": [{"text": "multiple underlying systems (MUS)", "start_pos": 17, "end_pos": 50, "type": "TASK", "confidence": 0.6588959197203318}]}, {"text": "This paper provides an overview of our approach and results on the MUS problem.", "labels": [], "entities": [{"text": "MUS problem", "start_pos": 67, "end_pos": 78, "type": "TASK", "confidence": 0.9478273093700409}]}, {"text": "The implementation is part of the back end of the Janus natural language interface and is documented in.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}