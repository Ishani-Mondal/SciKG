{"title": [{"text": "BOTTOM-UP PARSING EXTENDING CONTEXT-FREENESS IN A PROCESS GRAMMAR PROCESSOR", "labels": [], "entities": [{"text": "BOTTOM-UP PARSING EXTENDING CONTEXT-FREENESS IN A PROCESS GRAMMAR", "start_pos": 0, "end_pos": 65, "type": "METRIC", "confidence": 0.7971590012311935}]}], "abstractContent": [{"text": "A new approach to bottom-up parsing that extends Augmented Context-Free Grammar to a Process Grammar is formally presented.", "labels": [], "entities": [{"text": "bottom-up parsing", "start_pos": 18, "end_pos": 35, "type": "TASK", "confidence": 0.5534597337245941}]}, {"text": "A Process Grammar (PG) defines a set of rules suited for bottom-up parsing and conceived as processes that are applied by a PG Processor.", "labels": [], "entities": []}, {"text": "The matching phase is a crucial step for process application, and a parsing structure for efficient matching is also presented.", "labels": [], "entities": []}, {"text": "The PG Processor is composed of a process scheduler that allows immediate constituent analysis of structures, and behaves in a non-deterministic fashion.", "labels": [], "entities": []}, {"text": "On the other side, the PG offers means for implementing spec~c parsing strategies improving the lack of determinism innate in the processor.", "labels": [], "entities": []}], "introductionContent": [{"text": "Bottom-up parsing methods are usually preferred because of their property of being driven from both the input's syntactic/semantic structures and reduced constituents structures.", "labels": [], "entities": [{"text": "Bottom-up parsing", "start_pos": 0, "end_pos": 17, "type": "TASK", "confidence": 0.5404516160488129}]}, {"text": "Different strategies have been realized for handling the structures construction, e.g., parallel parsers, backtracking parsers, augmented contextfree parsers (.", "labels": [], "entities": []}, {"text": "The aim of this paper is to introduce anew approach to bottom-up parsing starting from a well known and based framework -parallel bottom-up parsing in immediate constituent analysis, where all possible parses are considered -making use of an Augmented Phrase-S tructure Grammar (APSG).", "labels": [], "entities": []}, {"text": "In such environment we must perform efficient searches in the graph the parser builds, and limit as much as possible the building of structures that will not be in the final parse tree.", "labels": [], "entities": []}, {"text": "For the efficiency of the search we introduce a Parse Graph Structure, based on the def'mition of adjacency of the subtrees, that provides an easy method of evaluation for deciding at any step whether a matching process can be accomplished or not.", "labels": [], "entities": []}, {"text": "The control of the parsing process is in the hands of an APSG called Process Grammar fPG), where grammar rules are conceived as processes that are applied whenever proper conditions, detected by a process scheduler, exist.", "labels": [], "entities": [{"text": "parsing process", "start_pos": 19, "end_pos": 34, "type": "TASK", "confidence": 0.9032828509807587}]}, {"text": "This is why the parser, called PG Processor, works following a nondeterministic parallel strategy, and only the Process Grammar has the power of altering and constraining this behaviour by means of some Kernel Functions that can modify the control structures of the PG Processor, thus improving determinism of the parsing process, or avoiding construction of useless structures.", "labels": [], "entities": []}, {"text": "Some of the concepts introduced in this paper, such as some definitions in Section 2, area development from that can be also an introductory reading regarding the description of a parallel bottom-up parser which is, even if under a different aspect, the core of the PG Processor.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}