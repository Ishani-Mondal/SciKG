{"title": [{"text": "Parsing Graphs with Hyperedge Replacement Grammars", "labels": [], "entities": []}], "abstractContent": [{"text": "Hyperedge replacement grammar (HRG) is a formalism for generating and transforming graphs that has potential applications in natural language understanding and generation.", "labels": [], "entities": [{"text": "Hyperedge replacement grammar (HRG)", "start_pos": 0, "end_pos": 35, "type": "TASK", "confidence": 0.8704627156257629}, {"text": "natural language understanding and generation", "start_pos": 125, "end_pos": 170, "type": "TASK", "confidence": 0.6598682403564453}]}, {"text": "A recognition algorithm due to Lautemann is known to be polynomial-time for graphs that are connected and of bounded degree.", "labels": [], "entities": []}, {"text": "We present a more precise characterization of the algorithm's complexity, an optimization analogous to binarization of context-free grammars, and some important implementation details, resulting in an algorithm that is practical for natural-language applications.", "labels": [], "entities": []}, {"text": "The algorithm is part of Boli-nas, anew software toolkit for HRG processing .", "labels": [], "entities": [{"text": "Boli-nas", "start_pos": 25, "end_pos": 33, "type": "DATASET", "confidence": 0.7967067956924438}, {"text": "HRG processing", "start_pos": 61, "end_pos": 75, "type": "TASK", "confidence": 0.9065670967102051}]}], "introductionContent": [{"text": "Hyperedge replacement grammar (HRG) is a context-free rewriting formalism for generating graphs (, and its synchronous counterpart can be used for transforming graphs to/from other graphs or trees.", "labels": [], "entities": [{"text": "Hyperedge replacement grammar (HRG)", "start_pos": 0, "end_pos": 35, "type": "TASK", "confidence": 0.871402511994044}]}, {"text": "As such, it has great potential for applications in natural language understanding and generation, and semantics-based machine translation ().", "labels": [], "entities": [{"text": "natural language understanding and generation", "start_pos": 52, "end_pos": 97, "type": "TASK", "confidence": 0.724679583311081}, {"text": "machine translation", "start_pos": 119, "end_pos": 138, "type": "TASK", "confidence": 0.7203347831964493}]}, {"text": "A polynomial-time recognition algorithm for HRGs was described by, building on the work of on boundary node label controlled grammars, and others have presented polynomial-time algorithms as well.", "labels": [], "entities": [{"text": "polynomial-time recognition", "start_pos": 2, "end_pos": 29, "type": "TASK", "confidence": 0.6816011369228363}]}, {"text": "Although Lautemann's algorithm is correct and tractable, its presentation is prefaced with the remark: \"As we are only interested in distinguishing polynomial time from non-polynomial time, the analysis will be rather crude, and implementation details will be explicated as little as possible.\"", "labels": [], "entities": []}, {"text": "Indeed, the key step of the algorithm, which matches a rule against the input graph, is described at a very high level, so that it is not obvious (for a non-expert in graph algorithms) how to implement it.", "labels": [], "entities": []}, {"text": "More importantly, this step as described leads to a time complexity that is polynomial, but potentially of very high degree.", "labels": [], "entities": []}, {"text": "In this paper, we describe in detail a more efficient version of this algorithm and its implementation.", "labels": [], "entities": []}, {"text": "We give a more precise complexity analysis in terms of the grammar and the size and maximum degree of the input graph, and we show how to optimize it by a process analogous to binarization of CFGs, following.", "labels": [], "entities": []}, {"text": "The resulting algorithm is practical and is implemented as part of the open-source Bolinas toolkit for hyperedge replacement grammars.", "labels": [], "entities": [{"text": "hyperedge replacement grammars", "start_pos": 103, "end_pos": 133, "type": "TASK", "confidence": 0.8517422874768575}]}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Mean and maximum treewidths of rules  extracted from the GeoQuery corpus, using exact  and approximate methods.", "labels": [], "entities": [{"text": "Mean", "start_pos": 10, "end_pos": 14, "type": "METRIC", "confidence": 0.9917631149291992}, {"text": "GeoQuery corpus", "start_pos": 67, "end_pos": 82, "type": "DATASET", "confidence": 0.9268958270549774}]}]}