{"title": [{"text": "ICARUS -An Extensible Graphical Search Tool for Dependency Treebanks", "labels": [], "entities": []}], "abstractContent": [{"text": "We present ICARUS, a versatile graphi-cal search tool to query dependency tree-banks.", "labels": [], "entities": [{"text": "ICARUS", "start_pos": 11, "end_pos": 17, "type": "METRIC", "confidence": 0.604250967502594}]}, {"text": "Search results can be inspected both quantitatively and qualitatively by means of frequency lists, tables, or dependency graphs.", "labels": [], "entities": []}, {"text": "ICARUS also ships with plugins that enable it to interface with tool chains running either locally or remotely.", "labels": [], "entities": [{"text": "ICARUS", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.8264991044998169}]}], "introductionContent": [{"text": "In this paper we present ICARUS 1 a search and visualization tool that primarily targets dependency syntax.", "labels": [], "entities": []}, {"text": "The tool has been designed such that it requires minimal effort to get started with searching a treebank or system output of an automatic dependency parser, while still allowing for flexible queries.", "labels": [], "entities": []}, {"text": "It enables the user to search dependency treebanks given a variety of constraints, including searching for particular subtrees.", "labels": [], "entities": []}, {"text": "Emphasis has been placed on a functionality that makes it possible for the user to switchback and forth between a high-level, aggregated view of the search results and browsing of particular corpus instances, with an intuitive visualization of the way in which it matches the query.", "labels": [], "entities": []}, {"text": "We believe this to bean important prerequisite for accessing annotated corpora, especially for non-expert users.", "labels": [], "entities": []}, {"text": "Search queries in ICARUS can be constructed either in a graphical or a text-based manner.", "labels": [], "entities": []}, {"text": "Building queries graphically removes the overhead of learning a specialized query language and thus makes the tool more accessible fora wider audience.", "labels": [], "entities": []}, {"text": "ICARUS provides a very intuitive way of breaking down the search results in terms of frequency statistics (such as the distribution of partof-speech on one child of a particular verb against the lemma of another child).", "labels": [], "entities": [{"text": "ICARUS", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.9355350732803345}]}, {"text": "The dimensions for the frequency break-down are simply specified by using grouping operators in the query.", "labels": [], "entities": []}, {"text": "The frequency tables are filled and updated in real time as the search proceeds through the corpus -allowing fora quick detection of misassumptions in the query.", "labels": [], "entities": []}, {"text": "ICARUS uses a plugin-based architecture that permits the user to write his own plugins and integrate them into the system.", "labels": [], "entities": [{"text": "ICARUS", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.929313600063324}]}, {"text": "For example, it comes with a plugin that interfaces with an external parser that can be used to parse a sentence from within the user interface.", "labels": [], "entities": []}, {"text": "The constraints for the query can then be copy-pasted from the resulting parse visualization.", "labels": [], "entities": []}, {"text": "This facilitates example-based querying, which is particularly helpful for inexperienced users -they do not have to recall details of the annotation conventions outside of their focus of interests but can go by what the parser provides.", "labels": [], "entities": []}, {"text": "ICARUS is written entirely in Java and runs out of the box without requiring any installation of the tool itself or additional libraries.", "labels": [], "entities": [{"text": "ICARUS", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.8137739896774292}]}, {"text": "This makes it platform independent and the only requirement is that a Java Runtime Environment (JRE) is installed on the host system.", "labels": [], "entities": []}, {"text": "It is open-source and freely available for download.", "labels": [], "entities": []}, {"text": "As parsers and other Natural Language Processing (NLP) tools are starting to find their way into other sciences such as (digital) humanities or social sciences, it gets increasingly important to provide intuitive visualization tools that integrate seamlessly with existing NLP tools and are easy to use also for non-linguists.", "labels": [], "entities": []}, {"text": "ICARUS interfaces readily with NLP tools provided as web services by CLARIN-D, the German incarnation of the European Infrastructure initiative CLARIN.", "labels": [], "entities": []}, {"text": "The remainder of this paper is structured as follows: In Section 2 we elaborate on the motivation for the tool and discuss related work.", "labels": [], "entities": []}, {"text": "Section 3 presents a running example of how to build queries and how results are visualized.", "labels": [], "entities": []}, {"text": "In Section 4 we outline the details of the architecture.", "labels": [], "entities": []}, {"text": "Section 5 discusses ongoing work, and Section 6 concludes.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}