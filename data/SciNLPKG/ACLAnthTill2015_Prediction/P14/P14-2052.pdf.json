{"title": [{"text": "Single Document Summarization based on Nested Tree Structure", "labels": [], "entities": [{"text": "Single Document Summarization", "start_pos": 0, "end_pos": 29, "type": "TASK", "confidence": 0.8211482167243958}]}], "abstractContent": [{"text": "Many methods of text summarization combining sentence selection and sentence compression have recently been proposed.", "labels": [], "entities": [{"text": "text summarization", "start_pos": 16, "end_pos": 34, "type": "TASK", "confidence": 0.7047176659107208}, {"text": "sentence selection", "start_pos": 45, "end_pos": 63, "type": "TASK", "confidence": 0.7098526209592819}, {"text": "sentence compression", "start_pos": 68, "end_pos": 88, "type": "TASK", "confidence": 0.7280891537666321}]}, {"text": "Although the dependency between words has been used inmost of these methods, the dependency between sentences , i.e., rhetorical structures, has not been exploited in such joint methods.", "labels": [], "entities": []}, {"text": "We used both dependency between words and dependency between sentences by constructing a nested tree, in which nodes in the document tree representing dependency between sentences were replaced by a sentence tree representing dependency between words.", "labels": [], "entities": []}, {"text": "We formulated a sum-marization task as a combinatorial optimization problem, in which the nested tree was trimmed without losing important content in the source document.", "labels": [], "entities": []}, {"text": "The results from an empirical evaluation revealed that our method based on the trimming of the nested tree significantly improved the summarization of texts.", "labels": [], "entities": [{"text": "summarization of texts", "start_pos": 134, "end_pos": 156, "type": "TASK", "confidence": 0.9043737053871155}]}], "introductionContent": [{"text": "Extractive summarization is one well-known approach to text summarization and extractive methods represent a document (or a set of documents) as a set of some textual units (e.g., sentences, clauses, and words) and select their subset as a summary.", "labels": [], "entities": [{"text": "Extractive summarization", "start_pos": 0, "end_pos": 24, "type": "TASK", "confidence": 0.8875107765197754}, {"text": "text summarization", "start_pos": 55, "end_pos": 73, "type": "TASK", "confidence": 0.7333025932312012}, {"text": "represent a document (or a set of documents) as a set of some textual units (e.g., sentences, clauses, and words) and select their subset as a summary", "start_pos": 97, "end_pos": 247, "type": "Description", "confidence": 0.8271974228760776}]}, {"text": "Formulating extractive summarization as a combinational optimization problem greatly improves the quality of summarization.", "labels": [], "entities": [{"text": "summarization", "start_pos": 23, "end_pos": 36, "type": "TASK", "confidence": 0.8365282416343689}, {"text": "summarization", "start_pos": 109, "end_pos": 122, "type": "TASK", "confidence": 0.9761831164360046}]}, {"text": "There has recently been increasing attention focused on approaches that jointly optimize sentence extraction and sentence compression ().", "labels": [], "entities": [{"text": "sentence extraction", "start_pos": 89, "end_pos": 108, "type": "TASK", "confidence": 0.7168020755052567}, {"text": "sentence compression", "start_pos": 113, "end_pos": 133, "type": "TASK", "confidence": 0.7439582347869873}]}, {"text": "We can only extract important content by trimming redundant parts from sentences.", "labels": [], "entities": []}, {"text": "However, as these methods did not include the discourse structures of documents, the generated summaries lacked coherence.", "labels": [], "entities": []}, {"text": "It is important for generated summaries to have a discourse structure that is similar to that of the source document.", "labels": [], "entities": []}, {"text": "Rhetorical Structure Theory (RST) () is one way of introducing the discourse structure of a document to a summarization task).", "labels": [], "entities": [{"text": "Rhetorical Structure Theory (RST)", "start_pos": 0, "end_pos": 33, "type": "TASK", "confidence": 0.8293546388546625}, {"text": "summarization task", "start_pos": 106, "end_pos": 124, "type": "TASK", "confidence": 0.8914238512516022}]}, {"text": "Hirao et al. recently transformed RST trees into dependency trees and used them for single document summarization ().", "labels": [], "entities": [{"text": "single document summarization", "start_pos": 84, "end_pos": 113, "type": "TASK", "confidence": 0.5985210339228312}]}, {"text": "They formulated the summarization problem as a tree knapsack problem with constraints represented by the dependency trees.", "labels": [], "entities": [{"text": "summarization problem", "start_pos": 20, "end_pos": 41, "type": "TASK", "confidence": 0.9264611303806305}]}, {"text": "We propose a method of summarizing a single document that utilizes dependency between sentences obtained from rhetorical structures and dependency between words obtained from a dependency parser.", "labels": [], "entities": [{"text": "summarizing a single document", "start_pos": 23, "end_pos": 52, "type": "TASK", "confidence": 0.8230553716421127}]}, {"text": "We have explained our method with an example in.", "labels": [], "entities": []}, {"text": "First, we represent a document as a nested tree, which is composed of two types of tree structures: a document tree and a sentence tree.", "labels": [], "entities": []}, {"text": "The document tree is a tree that has sentences as nodes and head modifier relationships between sentences obtained by RST as edges.", "labels": [], "entities": []}, {"text": "The sentence tree is a tree that has words as nodes and head modifier relationships between words obtained by the dependency parser as edges.", "labels": [], "entities": []}, {"text": "We can build the nested tree by regarding each node of the document tree as a sentence tree.", "labels": [], "entities": []}, {"text": "Finally, we formulate the problem of single document summarization as that of combinatorial optimization, which is based on the trimming of the nested tree.", "labels": [], "entities": [{"text": "single document summarization", "start_pos": 37, "end_pos": 66, "type": "TASK", "confidence": 0.5773485898971558}, {"text": "combinatorial optimization", "start_pos": 78, "end_pos": 104, "type": "TASK", "confidence": 0.7321963608264923}]}, {"text": "John was running on a track in the park.", "labels": [], "entities": []}], "datasetContent": [{"text": "This subsection compares the methods of subtree selection and rooted subtree selection. has two example sentences for which both methods selected a subtree as part of a summary.", "labels": [], "entities": [{"text": "subtree selection", "start_pos": 40, "end_pos": 57, "type": "TASK", "confidence": 0.7586126029491425}]}, {"text": "The {\u00b7} indicates the parser's root word.", "labels": [], "entities": []}, {"text": "The indicates the word that the system selected as the root of the subtree.", "labels": [], "entities": []}, {"text": "Subtree selection selected a root in both examples that differed from the parser's root.", "labels": [], "entities": []}, {"text": "As we can see, subtree selection only selected important subtrees that did not include the parser's root, e.g., purpose-clauses and that-clauses.", "labels": [], "entities": [{"text": "subtree selection", "start_pos": 15, "end_pos": 32, "type": "TASK", "confidence": 0.8004972636699677}]}, {"text": "This capability is very effective because we have to contain important content in summaries within given length limits, especially when the compression ratio is high (i.e., the method has to generate much shorter summaries than the source documents).: Example sentences and subtrees selected by each method.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: ROUGE score of each model. Note that  the top two rows are both our proposals.", "labels": [], "entities": [{"text": "ROUGE score", "start_pos": 10, "end_pos": 21, "type": "METRIC", "confidence": 0.966576874256134}]}, {"text": " Table 2: Average number of words that individual  extracted textual units contained.", "labels": [], "entities": []}]}