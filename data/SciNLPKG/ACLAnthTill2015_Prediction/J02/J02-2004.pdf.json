{"title": [{"text": "Incremental Construction and Maintenance of Minimal Finite-State Automata", "labels": [], "entities": [{"text": "Incremental Construction", "start_pos": 0, "end_pos": 24, "type": "TASK", "confidence": 0.8648865222930908}]}], "abstractContent": [{"text": "[Computational Linguistics 26(1):3-16 (2000)] describe a method for constructing incrementally minimal, deterministic, acyclic finite-state automata (dictionaries) from sets of strings.", "labels": [], "entities": []}, {"text": "But acyclic finite-state automata have limitations: For instance, if one wants a linguistic application to accept all possible integer numbers or Internet addresses, the corresponding finite-state automaton has to be cyclic.", "labels": [], "entities": []}, {"text": "In this article, we describe a simple and equally efficient method for modifying any minimal finite-state automaton (be it acyclic or not) so that a string is added to or removed from the language it accepts; both operations are very important when dictionary maintenance is performed and solve the dictionary construction problem addressed by Daciuk et al. as a special case.", "labels": [], "entities": [{"text": "dictionary construction", "start_pos": 299, "end_pos": 322, "type": "TASK", "confidence": 0.7770664393901825}]}, {"text": "The algorithms proposed here maybe straightforwardly derived from the customary textbook constructions for the intersection and the complementation of finite-state automata; the algorithms exploit the special properties of the automata resulting from the intersection operation when one of the finite-state automata accepts a single string.", "labels": [], "entities": []}], "introductionContent": [{"text": "Ina recent paper in this journal, describe two methods for constructing incrementally minimal, deterministic, acyclic finite-state automata (dictionaries) from sets of strings: The first method adds strings in dictionary order, and the second one is for unsorted data.", "labels": [], "entities": []}, {"text": "Adding an entry is an important dictionary maintenance operation, but so is removing an entry from the dictionary, for example, if it is found to be incorrect.", "labels": [], "entities": [{"text": "dictionary maintenance", "start_pos": 32, "end_pos": 54, "type": "TASK", "confidence": 0.7218159735202789}]}, {"text": "Since ordering cannot obviously be expected in the removal case, we will focus on the second, more general problem (a solution for which has already been sketched by).", "labels": [], "entities": []}, {"text": "But dictionaries or acyclic finite automata have limitations: For instance, if one wants an application to accept all possible integer numbers or Internet addresses, the corresponding finite-state automaton has to be cyclic.", "labels": [], "entities": []}, {"text": "In this article, we show a simple and equally efficient method for modifying any minimal finite-state automaton (be it acyclic or not) so that a string is added to or removed from the language it accepts.", "labels": [], "entities": []}, {"text": "The algorithm maybe straightforwardly derived from customary textbook constructions for the intersection and the complementation of finite-state automata; the resulting algorithm solves the dictionary construction problem addressed by second algorithm as a special case.", "labels": [], "entities": []}, {"text": "This article has the following parts.", "labels": [], "entities": []}, {"text": "In Section 2, we give some necessary mathematical preliminaries.", "labels": [], "entities": []}, {"text": "The minimal automata resulting from adding or removing a string are described in detail in Section 3; the algorithms are described in Section 4.", "labels": [], "entities": []}, {"text": "In Section 5, one addition and one removal example are explained in detail, and some closing remarks are given in Section 6.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}