{"title": [{"text": "AN EFFICIENT AUGMENTED-CONTEXT-FREE PARSING ALGORITHM 1", "labels": [], "entities": [{"text": "AN EFFICIENT AUGMENTED-CONTEXT-FREE PARSING ALGORITHM", "start_pos": 0, "end_pos": 53, "type": "METRIC", "confidence": 0.7364185869693756}]}], "abstractContent": [{"text": "An efficient parsing algorithm for augmented context-free grammars is introduced, and its application to on-line natural language interfaces discussed.", "labels": [], "entities": []}, {"text": "The algorithm is a generalized LR parsing algorithm, which precomputes an LR shift-reduce parsing table (possibly with multiple entries) from a given augmented context-free grammar.", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 31, "end_pos": 41, "type": "TASK", "confidence": 0.616757795214653}, {"text": "LR shift-reduce parsing", "start_pos": 74, "end_pos": 97, "type": "TASK", "confidence": 0.47384363412857056}]}, {"text": "Unlike the standard LR parsing algorithm, it can handle arbitrary context-free grammars, including ambiguous grammars, while most of the LR efficiency is preserved by introducing the concept of a \"graph-structured stack\".", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 20, "end_pos": 30, "type": "TASK", "confidence": 0.6238866746425629}]}, {"text": "The graph-structured stack allows an LR shift-reduce parser to maintain multiple parses without parsing any part of the input twice in the same way.", "labels": [], "entities": []}, {"text": "We can also view our parsing algorithm as an extended chart parsing algorithm efficiently guided by LR parsing tables.", "labels": [], "entities": [{"text": "parsing", "start_pos": 21, "end_pos": 28, "type": "TASK", "confidence": 0.9758007526397705}, {"text": "chart parsing", "start_pos": 54, "end_pos": 67, "type": "TASK", "confidence": 0.7900585234165192}, {"text": "LR parsing", "start_pos": 100, "end_pos": 110, "type": "TASK", "confidence": 0.5985864698886871}]}, {"text": "The algorithm is fast, due to the LR table precomputation.", "labels": [], "entities": []}, {"text": "In several experiments with different English grammars and sentences, timings indicate a five-to tenfold speed advantage over Earley's context-free parsing algorithm.", "labels": [], "entities": [{"text": "timings", "start_pos": 70, "end_pos": 77, "type": "METRIC", "confidence": 0.9722819924354553}, {"text": "speed", "start_pos": 105, "end_pos": 110, "type": "METRIC", "confidence": 0.9695863723754883}]}, {"text": "The algorithm parses a sentence strictly from left to right on-line, that is, it starts parsing as soon as the user types in the first word of a sentence, without waiting for completion of the sentence.", "labels": [], "entities": []}, {"text": "A practical on-line parser based on the algorithm has been implemented in Common Lisp, and running on Symbolics and HP AI workstations.", "labels": [], "entities": []}, {"text": "The parser is used in the multilingual machine translation project at CMU.", "labels": [], "entities": [{"text": "multilingual machine translation", "start_pos": 26, "end_pos": 58, "type": "TASK", "confidence": 0.6180846591790518}, {"text": "CMU", "start_pos": 70, "end_pos": 73, "type": "DATASET", "confidence": 0.8980699181556702}]}, {"text": "Also, a commercial on-line parser for Japanese language is being built by Intelligent Technology Incorporation, based on the technique developed at CMU.", "labels": [], "entities": []}], "introductionContent": [{"text": "Parsing efficiency is crucial when building practical natural language systems on smaller computers such as personal workstations.", "labels": [], "entities": [{"text": "Parsing", "start_pos": 0, "end_pos": 7, "type": "TASK", "confidence": 0.8438237309455872}]}, {"text": "This is especially the case for interactive systems such as natural language database access, interfaces to expert systems, and interactive machine translation.", "labels": [], "entities": [{"text": "natural language database access", "start_pos": 60, "end_pos": 92, "type": "TASK", "confidence": 0.6421479359269142}, {"text": "machine translation", "start_pos": 140, "end_pos": 159, "type": "TASK", "confidence": 0.7226077020168304}]}, {"text": "This paper introduces an efficient on-line parsing algorithm, and focuses on its practical application to natural language interfaces.", "labels": [], "entities": []}, {"text": "The algorithm can be viewed as a generalized LR parsing algorithm that can handle arbitrary context-free grammars, including ambiguous grammars.", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 45, "end_pos": 55, "type": "TASK", "confidence": 0.7727803885936737}]}, {"text": "Section 2 describes the algorithm by .extending the standard LR parsing algorithm with the idea of a \"graph-structured stack\".", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 61, "end_pos": 71, "type": "TASK", "confidence": 0.7732532918453217}]}, {"text": "Section 3 describes how to represent parse trees efficiently, so that all possible parse trees (the parse forest) take at most polynomial space as the ambiguity of a sentence grows exponentially.", "labels": [], "entities": []}, {"text": "In section 4, several examples are given.", "labels": [], "entities": []}, {"text": "Section 5 presents several empirical results of the algorithm's practical performance, including comparison with Earley's algorithm.", "labels": [], "entities": []}, {"text": "In section 6, we discuss how to enhance the algorithm to handle augmented context-free grammars rather than pure context-free grammars.", "labels": [], "entities": []}, {"text": "Section 7 describes the concept of on-line parsing, taking advantage of left-to-right operation of our parsing algorithm.", "labels": [], "entities": [{"text": "on-line parsing", "start_pos": 35, "end_pos": 50, "type": "TASK", "confidence": 0.5411667227745056}]}, {"text": "The on-line parser parses a sentence strictly from left to right, and starts parsing as soon as the user types in the first word, without waiting for the end of line.", "labels": [], "entities": [{"text": "parser parses a sentence", "start_pos": 12, "end_pos": 36, "type": "TASK", "confidence": 0.716651976108551}]}, {"text": "Benefits of on-line parsing are then discussed.", "labels": [], "entities": []}, {"text": "Finally, several versions of on-line parser have been implemented, and they are mentioned in section 8.", "labels": [], "entities": []}, {"text": "shift-reduce parsing algorithm deterministically guided by a parsing table indicating what action should betaken next.", "labels": [], "entities": []}, {"text": "The parsing table can be obtained automatically from a context-free phrase structure grammar, using an algorithm first developed by DeRemer).", "labels": [], "entities": []}, {"text": "We do not describe the algorithms here, referring the reader to chapter 6 in.", "labels": [], "entities": []}, {"text": "We assume that the reader is familiar with the standard LR parsing algorithm (not necessarily with the parsing table construction algorithm).", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 56, "end_pos": 66, "type": "TASK", "confidence": 0.693905770778656}, {"text": "parsing table construction", "start_pos": 103, "end_pos": 129, "type": "TASK", "confidence": 0.859537144502004}]}, {"text": "The LR paring algorithm is one of the most efficient parsing algorithms.", "labels": [], "entities": [{"text": "LR paring", "start_pos": 4, "end_pos": 13, "type": "TASK", "confidence": 0.647131085395813}]}, {"text": "It is totally deterministic, and no backtracking or search is involved.", "labels": [], "entities": []}, {"text": "Unfortunately, we cannot directly adopt the LR parsing technique for natural languages, because it is applicable only to a small subset of context-free grammars called LR grammars, and it is almost certain that any practical natural language grammars are not LR.", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 44, "end_pos": 54, "type": "TASK", "confidence": 0.6637676358222961}]}, {"text": "If a grammar is non-LR, its parsing table will have multiple entries; 1 one or more of the action table entries will be multiply defined.", "labels": [], "entities": []}, {"text": "Figures 2.1 and 2.2 show an example of a non-LR grammar and its parsing table.", "labels": [], "entities": []}, {"text": "Grammar symbols starting with \"*\" represent pre-terminals.", "labels": [], "entities": []}, {"text": "Entries \"sh n\" in the action table (the left part of the table) indicate the action \"shift one word from input buffer onto the stack, and go to state n\".", "labels": [], "entities": []}, {"text": "Entries \"re n\" indicate the action \"reduce constituents on the stack using rule n\".", "labels": [], "entities": []}, {"text": "The entry \"ace\" stands for the action \"accept\", and blank spaces represent \"error\".", "labels": [], "entities": [{"text": "ace", "start_pos": 11, "end_pos": 14, "type": "METRIC", "confidence": 0.9660796523094177}, {"text": "error", "start_pos": 76, "end_pos": 81, "type": "METRIC", "confidence": 0.9880372285842896}]}, {"text": "The goto decides to what state the parser should go after a reduce action.", "labels": [], "entities": []}, {"text": "These operations shall become clear when we trace the algorithm with example sentences in section 4.", "labels": [], "entities": []}, {"text": "The exact definition and operation of the LR parser can be found in.", "labels": [], "entities": []}, {"text": "We can see that there are two multiple entries in the action table; on the rows of state 11 and 12 at the (1) S --> NP VP (2) S --> S PP (3) NP --> *n (4) NP --> *det *n (5) NP --> NP PP (6) PP --> *prep NP VP --> *v NP1.", "labels": [], "entities": []}, {"text": "column labeled \"*prep\".", "labels": [], "entities": []}, {"text": "Roughly speaking, this is the situation where the parser encounters a preposition of a PP right after a NP.", "labels": [], "entities": []}, {"text": "If this PP does not modify the NP, then the parser can go ahead to reduce the NP into a higher nonterminal such as PP or VP, using rule 6 or 7, respectively (re6. and re7 in the multiple entries).", "labels": [], "entities": []}, {"text": "If, on the other hand, the PP does modify the NP, then the parser must wait (sh6) until the PP is completed so it can build a higher NP using rule 5.", "labels": [], "entities": []}, {"text": "It has been thought that, for LR parsing, multiple entries are fatal because once a parsing table has multiple entries, deterministic parsing is no longer possible and some kind of non-determinism is necessary.", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 30, "end_pos": 40, "type": "TASK", "confidence": 0.8804031312465668}]}, {"text": "We handle multiple entries with a special technique, named a graphstructured stack.", "labels": [], "entities": []}, {"text": "In order to introduce the concept, we first give a simpler form of non-determinism, and make refinements on it.", "labels": [], "entities": []}, {"text": "Subsection 2.1 describes a simple and straightforward non-deterministic technique, that is, pseudo-parallelism (breadth-first search), in which the system maintains a number of stacks simultaneously, called the Stack List.", "labels": [], "entities": []}, {"text": "A disadvantage of the stack list is then described.", "labels": [], "entities": []}, {"text": "The next subsection describes the idea of stack combination, which was introduced in the author's earlier research, to make the algorithm much more efficient.", "labels": [], "entities": [{"text": "stack combination", "start_pos": 42, "end_pos": 59, "type": "TASK", "confidence": 0.8024205267429352}]}, {"text": "With this idea, stacks are represented as trees (or a forest).", "labels": [], "entities": []}, {"text": "Finally, a further refinement, the graph-structured stack, is described to make the algo re3 re6,sh6 re6 9 re7,sh6 re7 9 Figure 2.", "labels": [], "entities": []}, {"text": "rithm even more efficient; efficient enough to run in polynomial time.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}