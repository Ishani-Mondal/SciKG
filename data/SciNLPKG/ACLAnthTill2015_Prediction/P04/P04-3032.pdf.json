{"title": [{"text": "Dyna: A Declarative Language for Implementing Dynamic Programs *", "labels": [], "entities": [{"text": "Implementing Dynamic Programs", "start_pos": 33, "end_pos": 62, "type": "TASK", "confidence": 0.884019692738851}]}], "abstractContent": [{"text": "We present the first version of anew declarative programming language.", "labels": [], "entities": []}, {"text": "Dyna has many uses but was designed especially for rapid development of new statistical NLP systems.", "labels": [], "entities": [{"text": "Dyna", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.9031146764755249}]}, {"text": "A Dyna program is a small set of equations, resembling Prolog inference rules, that specify the abstract structure of a dynamic programming algorithm.", "labels": [], "entities": []}, {"text": "It compiles into efficient, portable, C++ classes that can be easily invoked from a larger application.", "labels": [], "entities": []}, {"text": "By default, these classes run a generalization of agenda-based parsing, prioritizing the partial parses by some figure of merit.", "labels": [], "entities": [{"text": "agenda-based parsing", "start_pos": 50, "end_pos": 70, "type": "TASK", "confidence": 0.6017644107341766}]}, {"text": "The classes can also perform an exact backward (outside) pass in the service of parameter training.", "labels": [], "entities": []}, {"text": "The compiler already knows several implementation tricks, algorithmic transforms, and numerical optimization techniques.", "labels": [], "entities": []}, {"text": "It will acquire moreover time: we intend for it to generalize and encapsulate best practices, and serve as a testbed for new practices.", "labels": [], "entities": []}, {"text": "Dyna is now being used for parsing, machine translation, morphological analysis, grammar induction, and finite-state modeling.", "labels": [], "entities": [{"text": "parsing", "start_pos": 27, "end_pos": 34, "type": "TASK", "confidence": 0.9774293899536133}, {"text": "machine translation", "start_pos": 36, "end_pos": 55, "type": "TASK", "confidence": 0.7998155951499939}, {"text": "morphological analysis", "start_pos": 57, "end_pos": 79, "type": "TASK", "confidence": 0.7687116265296936}, {"text": "grammar induction", "start_pos": 81, "end_pos": 98, "type": "TASK", "confidence": 0.8084087371826172}, {"text": "finite-state modeling", "start_pos": 104, "end_pos": 125, "type": "TASK", "confidence": 0.735736757516861}]}], "introductionContent": [{"text": "Computational linguistics has become a more experimental science.", "labels": [], "entities": [{"text": "Computational linguistics", "start_pos": 0, "end_pos": 25, "type": "TASK", "confidence": 0.8682218194007874}]}, {"text": "One often uses real-world data to test one's formal models (grammatical, statistical, or both).", "labels": [], "entities": []}, {"text": "Unfortunately, as in other experimental sciences, testing each new hypothesis requires much tedious lab work: writing and tuning code until parameter estimation (\"training\") and inference over unknown variables (\"decoding\") are bug-free and tolerably fast.", "labels": [], "entities": []}, {"text": "This is intensive work, given complex models or a large search space (as in modern statistical parsing and machine translation).", "labels": [], "entities": [{"text": "statistical parsing", "start_pos": 83, "end_pos": 102, "type": "TASK", "confidence": 0.758374810218811}, {"text": "machine translation", "start_pos": 107, "end_pos": 126, "type": "TASK", "confidence": 0.7207615822553635}]}, {"text": "It is a major effort to break into the field with anew system, and modifying existing systems-even in a conceptually simple way-can require significant reengineering.", "labels": [], "entities": []}, {"text": "Such \"lab work\" mainly consists of reusing or reinventing various dynamic programming architectures.", "labels": [], "entities": []}, {"text": "We propose that it is time to jump up a level of abstraction.", "labels": [], "entities": []}, {"text": "We offer anew programming language, Dyna, that allows one to quickly and easily specify a model's combinatorial structure.", "labels": [], "entities": []}, {"text": "We also offer a compiler, dynac, that translates from Dyna into C++ classes.", "labels": [], "entities": []}, {"text": "The compiler does all the tedious work of writing the training and decoding code.", "labels": [], "entities": []}, {"text": "It is intended to do as good a job as a clever graduate student who already knows the tricks of the trade (and is willing to maintain hand-tuned C++).", "labels": [], "entities": []}, {"text": "* We would like to thank Joshua Goodman, David McAllester, and Paul Ruhlen for useful early discussions, and pioneer users Markus Dreyer, David Smith, and Roy Tromble for their feedback and input.", "labels": [], "entities": []}, {"text": "This work was supported by NSF ITR grant IIS-0313193 to the first author, by a Fannie & John Hertz Foundation fellowship to the third author, and by ONR MURI grant N00014-01-1-0685.", "labels": [], "entities": [{"text": "NSF ITR grant IIS-0313193", "start_pos": 27, "end_pos": 52, "type": "DATASET", "confidence": 0.613105796277523}, {"text": "ONR MURI grant N00014-01-1-0685", "start_pos": 149, "end_pos": 180, "type": "DATASET", "confidence": 0.597189262509346}]}, {"text": "The views expressed are not necessarily endorsed by the sponsors.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}