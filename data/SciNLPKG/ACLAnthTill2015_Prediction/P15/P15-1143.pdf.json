{"title": [], "abstractContent": [{"text": "A key problem in semantic parsing with graph-based semantic representations is graph parsing, i.e. computing all possible analyses of a given graph according to a grammar.", "labels": [], "entities": [{"text": "semantic parsing", "start_pos": 17, "end_pos": 33, "type": "TASK", "confidence": 0.7343423515558243}, {"text": "graph parsing", "start_pos": 79, "end_pos": 92, "type": "TASK", "confidence": 0.7554289102554321}]}, {"text": "This problem arises in training synchronous string-to-graph grammars, and when generating strings from them.", "labels": [], "entities": []}, {"text": "We present two algorithms for graph parsing (bottom-up and top-down) with s-graph grammars.", "labels": [], "entities": [{"text": "graph parsing", "start_pos": 30, "end_pos": 43, "type": "TASK", "confidence": 0.7547716498374939}]}, {"text": "On the related problem of graph parsing with hyperedge replacement grammars, our implementations outperform the best previous system by several orders of magnitude.", "labels": [], "entities": [{"text": "graph parsing", "start_pos": 26, "end_pos": 39, "type": "TASK", "confidence": 0.7074274867773056}, {"text": "hyperedge replacement grammars", "start_pos": 45, "end_pos": 75, "type": "TASK", "confidence": 0.756065179904302}]}], "introductionContent": [{"text": "The recent years have seen an increased interest in semantic parsing, the problem of deriving a semantic representation for natural-language expressions with data-driven methods.", "labels": [], "entities": [{"text": "semantic parsing", "start_pos": 52, "end_pos": 68, "type": "TASK", "confidence": 0.7599950432777405}]}, {"text": "With the recent availability of graph-based meaning banks (), much work has focused on computing graph-based semantic representations from strings (.", "labels": [], "entities": []}, {"text": "One major approach to graph-based semantic parsing is to learn an explicit synchronous grammar which relates strings with graphs.", "labels": [], "entities": [{"text": "graph-based semantic parsing", "start_pos": 22, "end_pos": 50, "type": "TASK", "confidence": 0.7031214038530985}]}, {"text": "One can then apply methods from statistical parsing to parse the string and read off the graph.  and represent this mapping of a (latent) syntactic structure to a graph with a grammar formalism called hyperedge replacement grammar (HRG; ().", "labels": [], "entities": [{"text": "statistical parsing", "start_pos": 32, "end_pos": 51, "type": "TASK", "confidence": 0.7013014853000641}]}, {"text": "As an alternative to introduced s-graph grammars and showed that they support linguistically reasonable grammars for graph-based semantics construction.", "labels": [], "entities": [{"text": "graph-based semantics construction", "start_pos": 117, "end_pos": 151, "type": "TASK", "confidence": 0.785643478234609}]}, {"text": "One problem that is only partially understood in the context of semantic parsing with explicit grammars is graph parsing, i.e. the computation of the possible analyses the grammar assigns to an input graph (as opposed to string).", "labels": [], "entities": [{"text": "semantic parsing", "start_pos": 64, "end_pos": 80, "type": "TASK", "confidence": 0.7565669417381287}, {"text": "graph parsing", "start_pos": 107, "end_pos": 120, "type": "TASK", "confidence": 0.7629454433917999}]}, {"text": "This problem arises whenever one tries to generate a string from a graph (e.g., on the generation side of an MT system), but also in the context of extracting and training asynchronous grammar, e.g. in EM training.", "labels": [], "entities": []}, {"text": "The state of the art is defined by the bottomup graph parsing algorithm for HRG by , implemented in the Bolinas tool.", "labels": [], "entities": [{"text": "bottomup graph parsing", "start_pos": 39, "end_pos": 61, "type": "TASK", "confidence": 0.6046879291534424}]}, {"text": "We present two graph parsing algorithms (topdown and bottom-up) for s-graph grammars.", "labels": [], "entities": []}, {"text": "Sgraph grammars are equivalent to HRGs, but employ a more fine-grained perspective on graphcombining operations.", "labels": [], "entities": [{"text": "Sgraph grammars", "start_pos": 0, "end_pos": 15, "type": "TASK", "confidence": 0.8885010182857513}]}, {"text": "This simplifies the parsing algorithms, and facilitates reasoning about them.", "labels": [], "entities": [{"text": "parsing", "start_pos": 20, "end_pos": 27, "type": "TASK", "confidence": 0.9707430601119995}]}, {"text": "Our bottom-up algorithm is similar to Chiang et al.'s, and derives the same asymptotic number of rule instances.", "labels": [], "entities": []}, {"text": "The top-down algorithm is novel, and achieves the same asymptotic runtime as the bottom-up algorithm by reasoning about the biconnected components of the graph.", "labels": [], "entities": []}, {"text": "Our evaluation on the \"Little Prince\" graph-bank shows that our implementations of both algorithms outperform Bolinas by several orders of magnitude.", "labels": [], "entities": []}, {"text": "Furthermore, the top-down algorithm can be more memory-efficient in practice.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}