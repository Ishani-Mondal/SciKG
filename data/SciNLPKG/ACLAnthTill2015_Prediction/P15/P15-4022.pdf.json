{"title": [{"text": "A Domain-independent Rule-based Framework for Event Extraction", "labels": [], "entities": [{"text": "Event Extraction", "start_pos": 46, "end_pos": 62, "type": "TASK", "confidence": 0.7438012957572937}]}], "abstractContent": [{"text": "We describe the design, development, and API of ODIN (Open Domain INformer), a domain-independent, rule-based event extraction (EE) framework.", "labels": [], "entities": [{"text": "rule-based event extraction (EE) framework", "start_pos": 99, "end_pos": 141, "type": "TASK", "confidence": 0.8140496867043632}]}, {"text": "The proposed EE approach is: simple (most events are captured with simple lexico-syntactic patterns), powerful (the language can capture complex constructs, such as events taking other events as arguments, and regular expressions over syntactic graphs), robust (to recover from syntactic parsing errors , syntactic patterns can be freely mixed with surface, token-based patterns), and fast (the runtime environment processes 110 sen-tences/second in a real-world domain with a grammar of over 200 rules).", "labels": [], "entities": []}, {"text": "We used this framework to develop a grammar for the biochemical domain, which approached human performance.", "labels": [], "entities": []}, {"text": "Our EE framework is accompanied by a web-based user interface for the rapid development of event grammars and vi-sualization of matches.", "labels": [], "entities": []}, {"text": "The ODIN framework and the domain-specific grammars are available as open-source code.", "labels": [], "entities": []}], "introductionContent": [{"text": "Rule-based information extraction (IE) has long enjoyed wide adoption throughout industry, though it has remained largely ignored in academia, in favor of machine learning (ML) methods ().", "labels": [], "entities": [{"text": "Rule-based information extraction (IE)", "start_pos": 0, "end_pos": 38, "type": "TASK", "confidence": 0.7715572019418081}]}, {"text": "However, rule-based systems have several advantages over pure ML systems, including: (a) the rules are interpretable and thus suitable for rapid development and domain transfer; and (b) humans and machines can contribute to the same model.", "labels": [], "entities": [{"text": "domain transfer", "start_pos": 161, "end_pos": 176, "type": "TASK", "confidence": 0.700780525803566}]}, {"text": "Why then have such systems failed to hold the attention of the academic community?", "labels": [], "entities": []}, {"text": "One argument raised by is that, despite notable efforts), there is not a standard language for this task, or a \"standard way to express rules\", which raises the entry cost for new rule-based systems.", "labels": [], "entities": []}, {"text": "Here we aim to address this issue with a novel event extraction (EE) language and framework called ODIN (Open Domain INformer).", "labels": [], "entities": [{"text": "event extraction (EE)", "start_pos": 47, "end_pos": 68, "type": "TASK", "confidence": 0.8254471063613892}]}, {"text": "We follow the simplicity principles promoted by other natural language processing toolkits, such as Stanford's CoreNLP, which aim to \"avoid over-design\", \"do one thing well\", and have a user \"up and running in ten minutes or less\" ).", "labels": [], "entities": [{"text": "simplicity", "start_pos": 14, "end_pos": 24, "type": "METRIC", "confidence": 0.9710875749588013}]}, {"text": "In particular, our approach is: Simple: Taking advantage of a syntactic dependency 1 representation (, our EE language has a simple, declarative syntax (see Examples 1 & 2) for n-ary events, which captures single or multi-word event predicates (trigger) with lexical and morphological constraints, and event arguments (e.g., theme) with (generally) simple syntactic patterns and semantic constraints.", "labels": [], "entities": []}, {"text": "Powerful: Despite its simplicity, our EE framework can capture complex constructs when necessary, such as: (a) recursive events 2 , (b) complex regular expressions over syntactic patterns for event arguments.", "labels": [], "entities": []}, {"text": "Inspired by Stanford's Semgrex 3 , we have extended a standard regular expression language to describe patterns over directed graphs 4 , e.g., we introduce new < and > operators to specify the direction of edge traversal in the dependency graph.", "labels": [], "entities": []}, {"text": "Finally, we allow for (c) optional arguments and multiple arguments with the same name.", "labels": [], "entities": []}, {"text": "Robust: To recover from unavoidable syntactic errors, SD patterns (such as the ones in Examples 1 and 2) can be can be freely mixed with surface, token-based patterns, using a language inspired by the Allen Insti-1 Hereafter abbreviated as SD.", "labels": [], "entities": []}, {"text": "Events that take other events as arguments (see and the corresponding Example (2) for such an event in the biochemical domain.", "labels": [], "entities": []}, {"text": "The Positive Regulation takes a Phosphorylation event as the Controlled argument) nlp.stanford.edu/software/tregex.", "labels": [], "entities": []}, {"text": "shtml Here we use syntactic dependencies.", "labels": [], "entities": []}, {"text": "5 cause in Example 1.", "labels": [], "entities": []}, {"text": "tute of Artificial Intelligence's Tagger . These patterns match against information extracted in our text processing pipeline , namely a token's part of speech, lemmatized form, named entity label, and the immediate incoming and outgoing edges in the SD graph.", "labels": [], "entities": []}, {"text": "Example 3 shows an equivalent rule to the one in Example 1 using surface patterns (i.e. a pattern that is independent of a token sequence's underlying syntactic structure).", "labels": [], "entities": []}, {"text": "Fast: Our EE runtime is fast because our rules use event trigger phrases, captured with shallow lexicomorphological patterns, as starting points.", "labels": [], "entities": []}, {"text": "Only when event triggers are detected is the matching of more complex syntactic patterns for arguments attempted.", "labels": [], "entities": []}, {"text": "For example, in the biochemical domain (discussed in Section 2), our framework processes an average of 110 sentences/second 8 with a grammar of 211 rules on a laptop with an i7 CPU and 16GB of RAM.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}