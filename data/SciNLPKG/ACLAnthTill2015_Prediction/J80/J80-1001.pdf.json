{"title": [], "abstractContent": [{"text": "A generalization of the notion of ATN grammar, called a cascaded ATN (CATN), is presented.", "labels": [], "entities": [{"text": "ATN grammar", "start_pos": 34, "end_pos": 45, "type": "TASK", "confidence": 0.7133475244045258}]}, {"text": "CATN's permit a decomposition of complex language understanding behavior into a sequence of cooperating ATN's with separate domains of responsibility, where each stage (called an ATN transducer) takes its input from the output of the previous stage.", "labels": [], "entities": [{"text": "decomposition of complex language understanding behavior", "start_pos": 16, "end_pos": 72, "type": "TASK", "confidence": 0.7142721712589264}]}, {"text": "The paper includes an extensive discussion of the principle of factoring-conceptual factoring reduces the number of places that a given fact needs to be represented in a grammar, and hypothesis factoring reduces the number of distinct hypotheses that have to be considered during parsing.", "labels": [], "entities": []}], "introductionContent": [{"text": "ATN grammars, as presented in, area form of augmented pushdown store automata, augmented to carry a set of register contents in addition to state and stack information and to permit arbitrary computational tests and actions associated with the state transitions.", "labels": [], "entities": []}, {"text": "Conceptually, an ATN consists of a network of states with connecting arcs between them.", "labels": [], "entities": []}, {"text": "Each arc indicates a kind of constituent that can cause a transition between the states it connects.", "labels": [], "entities": []}, {"text": "The states in the network can be conceptually divided into \"levels\" corresponding to the different constituents that can be recognized.", "labels": [], "entities": []}, {"text": "Each such level has a start state and one or more final states.", "labels": [], "entities": []}, {"text": "Transitions are of three basic types, as indicated by three different types of arc.", "labels": [], "entities": []}, {"text": "A WRD (or CAT) transition corresponds to the consumption of a single word from the input string, a JUMP transition corresponds to a transition from one state to another without consuming any of the in.put string, and a PUSH transition corresponds to the consumption of a phrase parsed by a subordinate invocation of some level of the network to recognize a constituent.", "labels": [], "entities": [{"text": "WRD", "start_pos": 2, "end_pos": 5, "type": "METRIC", "confidence": 0.8660306930541992}]}, {"text": "ATN's have the advantage of being a class of automata into which ordinary context-free phrase structure and \"augmented\" phrase structure grammars have a straightforward embedding, but which permit various transformations to be performed to produce grammars that can be more efficient than the original.", "labels": [], "entities": [{"text": "ATN", "start_pos": 0, "end_pos": 3, "type": "DATASET", "confidence": 0.8291796445846558}]}, {"text": "Such transformations can reduce the number of states or arcs in the grammar or can reduce the number of alternative hypotheses that need to be explicitly considered during parsing.", "labels": [], "entities": []}, {"text": "(Some transformations tend to reduce both, but in general there is a tradeoff between the two).", "labels": [], "entities": []}, {"text": "Both kinds of efficiency result from a principle that I have called \"factoring\", which amounts to merging common parts of alternative paths in order to reduce the number of alternative combinations explicitly enumerated.", "labels": [], "entities": []}, {"text": "The former (\"conceptual factoring\") resuits from factoring common parts of the grammar to make the grammar as compact as possible, while the latter (\"hypothesis factoring\") results from arranging the grammar so asto factor common parts of the hypotheses that will be enumerated at parse time.", "labels": [], "entities": []}, {"text": "Conceptual factoring promotes ease of human comprehension of the grammar and should facilitate learning of grammars by machine.", "labels": [], "entities": []}, {"text": "Hypothesis factoring promotes efficiency of run time execution.", "labels": [], "entities": []}, {"text": "In this paper, I will present a generalization of the notion of ATN grammar, called a cascaded ATN or CATN, that capitalizes further on the principle of factoring in a manner similar to serial decomposition of finite state machines.", "labels": [], "entities": [{"text": "ATN grammar", "start_pos": 64, "end_pos": 75, "type": "TASK", "confidence": 0.6862425655126572}]}, {"text": "A CATN consists of a sequence of ATN transducers each of which takes its input from the output of the previous.", "labels": [], "entities": []}, {"text": "An ATN transducer is an ATN that includes among its actions an output operation (\"TRANSMIT\") which can be executed on arcs to generate elements of an output sequence.", "labels": [], "entities": [{"text": "TRANSMIT", "start_pos": 82, "end_pos": 90, "type": "METRIC", "confidence": 0.9643328189849854}]}, {"text": "Cascaded ATN's are analogous to serial decomposition of finite state machines and carry many of the advantages of such decomposition into the domain of more general recognition automata.", "labels": [], "entities": []}, {"text": "The normal decomposition of natural language description into levels of phonology, lexicon, syntax, semantics, and pragmatics can be viewed as a cascade of ATN transducers -one for each of the individual levels.", "labels": [], "entities": []}, {"text": "Viewing natural language understanding as parsing with such a cascade has computational advantages and also provides an efficient, systematic framework for characterizing the relationships between different levels of analysis due to conceptual factoring.", "labels": [], "entities": []}, {"text": "The factoring advantages of cascade decompositions can thus serve as a partial explanation of why such a componential description of natural language understanding has arisen.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}