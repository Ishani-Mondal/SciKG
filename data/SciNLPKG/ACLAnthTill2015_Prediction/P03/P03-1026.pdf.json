{"title": [{"text": "A Tabulation-Based Parsing Method that Reduces Copying", "labels": [], "entities": []}], "abstractContent": [{"text": "This paper presents anew bottom-up chart parsing algorithm for Prolog along with a compilation procedure that reduces the amount of copying at run-time to a constant number (2) per edge.", "labels": [], "entities": [{"text": "bottom-up chart parsing", "start_pos": 25, "end_pos": 48, "type": "TASK", "confidence": 0.6651773254076639}, {"text": "Prolog", "start_pos": 63, "end_pos": 69, "type": "DATASET", "confidence": 0.9248713254928589}]}, {"text": "It has applications to unification-based grammars with very large partially ordered categories , in which copying is expensive, and can facilitate the use of more sophisticated indexing strategies for retrieving such categories that may otherwise be overwhelmed by the cost of such copying.", "labels": [], "entities": [{"text": "unification-based grammars", "start_pos": 23, "end_pos": 49, "type": "TASK", "confidence": 0.8883364796638489}]}, {"text": "It also provides anew perspective on \"quick-checking\" and related heuris-tics, which seems to confirm that forcing an early failure (as opposed to seeking an early guarantee of success) is in fact the best approach to use.", "labels": [], "entities": []}, {"text": "A preliminary empirical evaluation of its performance is also provided.", "labels": [], "entities": []}], "introductionContent": [{"text": "This paper addresses the cost of copying edges in memoization-based, all-paths parsers for phrasestructure grammars.", "labels": [], "entities": []}, {"text": "While there have been great advances in probabilistic parsing methods in the last five years, which find one or a few most probable parses fora string relative to some grammar, allpaths parsing is still widely used in grammar development, and as a means of verifying the accuracy of syntactically more precise grammars, given a corpus or test suite.", "labels": [], "entities": [{"text": "allpaths parsing", "start_pos": 177, "end_pos": 193, "type": "TASK", "confidence": 0.6949084401130676}, {"text": "accuracy", "start_pos": 271, "end_pos": 279, "type": "METRIC", "confidence": 0.9911127686500549}]}, {"text": "Most if not all efficient all-paths phrase-structurebased parsers for natural language are chart-based because of the inherent ambiguity that exists in large-scale natural language grammars.", "labels": [], "entities": []}, {"text": "Within WAM-based Prolog, memoization can be a fairly costly operation because, in addition to the cost of copying an edge into the memoization table, there is the additional cost of copying an edge out of the table onto the heap in order to be used as a premise in further deductions (phrase structure rule applications).", "labels": [], "entities": []}, {"text": "All textbook bottom-up Prolog parsers copy edges out: once for every attempt to match an edge to a daughter category, based on a matching endpoint node, which is usually the first-argument on which the memoization predicate is indexed.", "labels": [], "entities": []}, {"text": "Depending on the grammar and the empirical distribution of matching mother/lexical and daughter descriptions, this number could approach \u00a2 \u00a4 \u00a3 \u00a6 \u00a5 copies for an edge added early to the chart, where \u00a2 is the length of the input to be parsed.", "labels": [], "entities": []}, {"text": "For classical context-free grammars, the category information that must be copied is normally quite small in size.", "labels": [], "entities": []}, {"text": "For feature-structure-based grammars and other highly lexicalized grammars with large categories, however, which have become considerably more popular since the advent of the standard parsing algorithms, it becomes quite significant.", "labels": [], "entities": []}, {"text": "The ALE system) attempts to reduce this by using an algorithm due to Carpenter that traverses the string breadth-first, right-to-left, but matches rule daughters rule depth-first, left-toright in a failure-driven loop, which eliminates the need for active edges and keeps the sizes of the heap and call stack small.", "labels": [], "entities": []}, {"text": "It still copies a candidate edge every time it tries to match it to a daughter description, however, which can approach because of its lack of active edges.", "labels": [], "entities": []}, {"text": "employs selective memoization, which tabulates only maximal projections in a head-corner parser -partial projections of ahead are still recomputed.", "labels": [], "entities": []}, {"text": "A chart parser with zero copying overhead has yet to be discovered, of course.", "labels": [], "entities": [{"text": "chart parser", "start_pos": 2, "end_pos": 14, "type": "TASK", "confidence": 0.7233957648277283}]}, {"text": "This paper presents one that reduces this worst case to two copies per non-empty edge, regardless of the length of the input string or when the edge was added to the chart.", "labels": [], "entities": []}, {"text": "Since textbook chart parsers require at least two copies per edge as well (assertion and potentially matching the next lexical edge to the left/right), this algorithm always achieves the best-case number of copies attainable by them on non-empty edges.", "labels": [], "entities": []}, {"text": "It is thus of some theoretical interest in that it proves that at least a constant bound is attainable within a Prolog setting.", "labels": [], "entities": [{"text": "Prolog setting", "start_pos": 112, "end_pos": 126, "type": "DATASET", "confidence": 0.8927988708019257}]}, {"text": "It does so by invoking anew kind of grammar transformation, called EFD-closure, which ensures that a grammar need not match an empty category to the leftmost daughter of any rule.", "labels": [], "entities": []}, {"text": "This transformation is similar to many of the myriad of earlier transformations proposed for exploring the decidability of recognition under various parsing control strategies, but the property it establishes is more conservative than brute-force epsilon elimination for unification-based grammars.", "labels": [], "entities": []}, {"text": "It also still treats empty categories distinctly from non-empty ones, unlike the linking tables proposed for treating leftmost daughters in left-corner parsing.", "labels": [], "entities": []}, {"text": "Its motivation, the practical consideration of copying overhead, is also rather different, of course.", "labels": [], "entities": [{"text": "copying overhead", "start_pos": 47, "end_pos": 63, "type": "TASK", "confidence": 0.9362069964408875}]}, {"text": "The algorithm will be presented as an improved version of ALE's parser, although other standard bottom-up parsers can be similarly adapted.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 2: Successful unification rate for the (non- indexing) EFD parser.", "labels": [], "entities": []}]}