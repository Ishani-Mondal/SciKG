{"title": [{"text": "An MDL-based approach to extracting subword units for grapheme-to-phoneme conversion", "labels": [], "entities": []}], "abstractContent": [{"text": "We address a key problem in grapheme-to-phoneme conversion: the ambiguity in mapping grapheme units to phonemes.", "labels": [], "entities": [{"text": "grapheme-to-phoneme conversion", "start_pos": 28, "end_pos": 58, "type": "TASK", "confidence": 0.737736165523529}]}, {"text": "Rather than using single letters and phonemes as units, we propose learning chunks, or subwords, to reduce ambiguity.", "labels": [], "entities": []}, {"text": "This can be interpreted as learning a lexicon of subwords that has minimum description length.", "labels": [], "entities": []}, {"text": "We implement an algorithm to build such a lexicon, as well as a simple decoder that uses these subwords.", "labels": [], "entities": []}], "introductionContent": [{"text": "A system for converting written words to their pronunciations is an important component of speechrelated applications, especially in large vocabulary tasks.", "labels": [], "entities": [{"text": "converting written words to their pronunciations", "start_pos": 13, "end_pos": 61, "type": "TASK", "confidence": 0.7667588094870249}]}, {"text": "This problem, commonly termed \"graphemeto-phoneme conversion\", or g2p, is non-trivial for several written languages, including English, since a given letter (grapheme) may represent one of several possible phonemes, depending on the context.", "labels": [], "entities": [{"text": "graphemeto-phoneme conversion", "start_pos": 31, "end_pos": 60, "type": "TASK", "confidence": 0.7796714305877686}]}, {"text": "Because the length of the context varies throughout the dictionary, fixed-length contexts may overfit some words, or inaccurately model others.", "labels": [], "entities": []}, {"text": "We approach this problem by treating g2p as a function from contiguous sequences of graphemes, which we call 'grapheme subwords', to sequences of phonemes ('phoneme subwords'), so that there is minimal ambiguity in finding the phoneme subword that corresponds to a given grapheme subword.", "labels": [], "entities": []}, {"text": "That is, we seek to minimize both these quantities: 1.", "labels": [], "entities": []}, {"text": "The conditional entropy of the phoneme subwords given a grapheme subword.", "labels": [], "entities": []}, {"text": "This directly tackles the problem of ambiguity -a perfectly unambiguous phoneme subword conditional distribution would have entropy = 0. 2. The entropy of the grapheme subwords.", "labels": [], "entities": []}, {"text": "This prevents the model from getting arbitrarily complex.", "labels": [], "entities": []}, {"text": "As a toy example, consider the following wordpronunciation 1 pairs: There are at least 5 graphemes whose corresponding phoneme distribution is ambiguous ('i', 'e', 't', 'n', 'g').", "labels": [], "entities": []}, {"text": "In the segmentation below, every grapheme subword corresponds to only one phoneme subword:", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 2: Results after each iteration of subword extrac- tion. While the maximum subword length after iteration  3 is 8, the vast majority of subwords have length 6 or less.", "labels": [], "entities": []}]}