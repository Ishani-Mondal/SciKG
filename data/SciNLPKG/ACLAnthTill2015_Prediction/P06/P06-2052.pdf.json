{"title": [{"text": "Efficient sentence retrieval based on syntactic structure", "labels": [], "entities": [{"text": "Efficient sentence retrieval", "start_pos": 0, "end_pos": 28, "type": "TASK", "confidence": 0.6451166669527689}]}], "abstractContent": [{"text": "This paper proposes an efficient method of sentence retrieval based on syntactic structure.", "labels": [], "entities": [{"text": "sentence retrieval", "start_pos": 43, "end_pos": 61, "type": "TASK", "confidence": 0.7653113901615143}]}, {"text": "Collins proposed Tree Kernel to calculate structural similarity.", "labels": [], "entities": []}, {"text": "However, structual retrieval based on Tree Kernel is not practicable because the size of the index table by Tree Kernel becomes impractical.", "labels": [], "entities": []}, {"text": "We propose more efficient algorithms approximating Tree Kernel: Tree Overlapping and Subpath Set.", "labels": [], "entities": [{"text": "approximating Tree Kernel", "start_pos": 37, "end_pos": 62, "type": "TASK", "confidence": 0.6598445773124695}]}, {"text": "These algorithms are more efficient than Tree Kernel because indexing is possible with practical computation resources.", "labels": [], "entities": [{"text": "Tree Kernel", "start_pos": 41, "end_pos": 52, "type": "TASK", "confidence": 0.6481552720069885}]}, {"text": "The results of the experiments comparing these three algorithms showed that structural retrieval with Tree Overlapping and Subpath Set were faster than that with Tree Kernel by 100 times and 1,000 times respectively.", "labels": [], "entities": []}], "introductionContent": [{"text": "Retrieving similar sentences has attracted much attention in recent years, and several methods have been already proposed.", "labels": [], "entities": [{"text": "Retrieving similar sentences", "start_pos": 0, "end_pos": 28, "type": "TASK", "confidence": 0.8859234849611918}]}, {"text": "They are useful for many applications such as information retrieval and machine translation.", "labels": [], "entities": [{"text": "information retrieval", "start_pos": 46, "end_pos": 67, "type": "TASK", "confidence": 0.8829881250858307}, {"text": "machine translation", "start_pos": 72, "end_pos": 91, "type": "TASK", "confidence": 0.8280390799045563}]}, {"text": "Most of the methods are based on frequencies of surface information such as words and parts of speech.", "labels": [], "entities": []}, {"text": "These methods might work well concerning similarity of topics or contents of sentences.", "labels": [], "entities": []}, {"text": "Although the surface information of two sentences is similar, their syntactic structures can be completely different).", "labels": [], "entities": []}, {"text": "If a translation system regards these sentences as similar, the translation would fail.", "labels": [], "entities": [{"text": "translation", "start_pos": 64, "end_pos": 75, "type": "TASK", "confidence": 0.9561024904251099}]}, {"text": "This is because conventional retrieval techniques exploit only similarity of surface information such as words and parts-of-speech, but not more abstract information such as syntactic structures.", "labels": [], "entities": []}, {"text": "proposed Tree Kernel, a method to calculate a similarity between syntactic structures.", "labels": [], "entities": []}, {"text": "Tree Kernel defines the similarity between two syntactic structures as the number of shared subtrees.", "labels": [], "entities": []}, {"text": "Retrieving similar sentences in a huge corpus requires calculating the similarity between a given query and each of sentences in the corpus.", "labels": [], "entities": []}, {"text": "Building an index table in advance could improve retrieval efficiency, but indexing with Tree Kernel is impractical due to the size of its index table.", "labels": [], "entities": []}, {"text": "In this paper, we propose two efficient algo-rithms to calculate similarity of syntactic structures: Tree Overlapping and Subpath Set.", "labels": [], "entities": []}, {"text": "These algorithms are more efficient than Tree Kernel because it is possible to make an index table in reasonable size.", "labels": [], "entities": [{"text": "Tree Kernel", "start_pos": 41, "end_pos": 52, "type": "TASK", "confidence": 0.6760532557964325}]}, {"text": "The experiments comparing these three algorithms showed that Tree Overlapping is 100 times faster and Subpath Set is 1,000 times faster than Tree Kernel when being used for structural retrieval.", "labels": [], "entities": []}, {"text": "After briefly reviewing Tree Kernel in section 2, in what follows, we describe two algorithms in section 3 and 4.", "labels": [], "entities": []}, {"text": "Section 5 describes experiments to compare these three algorithms and discussion on the results.", "labels": [], "entities": []}, {"text": "Finally, we conclude the paper and look at the future direction of our research in section 6.", "labels": [], "entities": []}], "datasetContent": [{"text": "This section describes the experiments which were conducted to compare the performance of structure retrieval based on Tree Kernel, Tree Overlapping and Subpath Set.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: Example of the index table", "labels": [], "entities": []}, {"text": " Table 3: Summary of experiments", "labels": [], "entities": []}, {"text": " Table 4: Average retrieval time per query [sec]", "labels": [], "entities": [{"text": "Average retrieval time per", "start_pos": 10, "end_pos": 36, "type": "METRIC", "confidence": 0.9108572453260422}]}, {"text": " Table 5: The rank of the top-ranked tree by other  algorithm [%]", "labels": [], "entities": []}]}