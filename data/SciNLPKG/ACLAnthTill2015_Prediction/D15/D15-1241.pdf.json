{"title": [{"text": "Knowledge Base Inference using Bridging Entities", "labels": [], "entities": []}], "abstractContent": [{"text": "Large-scale Knowledge Bases (such as NELL, Yago, Freebase, etc.) are often sparse, i.e., a large number of valid relations between existing entities are missing.", "labels": [], "entities": [{"text": "Yago", "start_pos": 43, "end_pos": 47, "type": "DATASET", "confidence": 0.7367980480194092}]}, {"text": "Recent research have addressed this problem by augmenting the KB graph with additional edges mined from a large text corpus while keeping the set of nodes fixed, and then using the Path Ranking Algorithm (PRA) to perform KB inference over this augmented graph.", "labels": [], "entities": []}, {"text": "In this paper, we extend this line of work by augmenting the KB graph not only with edges, but also with bridging entities, where both the edges and bridging entities are mined from a 500 million web text corpus.", "labels": [], "entities": []}, {"text": "Through experiments on real-world datasets, we demonstrate the value of bridging entities in improving the performance and running time of PRA in the KB inference task.", "labels": [], "entities": [{"text": "PRA", "start_pos": 139, "end_pos": 142, "type": "TASK", "confidence": 0.9548954963684082}]}], "introductionContent": [{"text": "Large-scale knowledge bases (KB) like Freebase (,), NELL ( can be useful in a variety of applications like natural language question answering, semantic search engines, etc.", "labels": [], "entities": [{"text": "question answering", "start_pos": 124, "end_pos": 142, "type": "TASK", "confidence": 0.6860033273696899}]}, {"text": "These knowledge bases consist of millions of real world entities and relationships between them which are stored in the form of a directed graph where links represent relations and nodes represent the entities.", "labels": [], "entities": []}, {"text": "Although such KBs contain millions of entities, they are still very sparse, i.e., they are missing a large number of relations between existing entities.", "labels": [], "entities": []}, {"text": "Performing inference over the knowledge graph for predicting relations between two entities is one way of densifying the KB graph.", "labels": [], "entities": [{"text": "predicting relations between two entities", "start_pos": 50, "end_pos": 91, "type": "TASK", "confidence": 0.8587718367576599}]}, {"text": "For example,: Example showing how addition of the bridging entity, Brian McCain, and the two edges incident on it can help the PRA algorithm to infer the initially missing relation instance teamPlaysSport(Yankees, BaseBall).", "labels": [], "entities": []}, {"text": "The original KB graph consisted only of two nodes, Yankees and Baseball, and no edges. from (Germany, playsinTournament, FIFA) and (FIFA, tournamentofSport, Soccer), we can infer (Germany, playsSport, Soccer).", "labels": [], "entities": []}, {"text": "The Path Ranking Algorithm (PRA) (,) performs such an inference by learning inference rules over the knowledge graph.", "labels": [], "entities": []}, {"text": "If the knowledge graph is sparse, i.e., if there area very few or no paths between source and target entities, then PRA is unable to predict the existence of a relation.", "labels": [], "entities": []}, {"text": "To address this shortcoming, () augmented the knowledge graph with paths obtained from an external corpus.", "labels": [], "entities": []}, {"text": "The added paths consisted of unlexicalized dependency labels obtained from a dependency parsed external corpus.", "labels": [], "entities": []}, {"text": "To improve the expressivity of the added paths, instead of the unlexicalized labels, () augmented the KB graph with verbs (surface relations) from a corpus containing over 600 million Subject-Verb-Object (SVO) triples.", "labels": [], "entities": []}, {"text": "These verbs act as edges that connect previously unconnected entities thereby increasing the connectivity of the KB graph which can potentially improve PRA performance.", "labels": [], "entities": [{"text": "PRA", "start_pos": 152, "end_pos": 155, "type": "TASK", "confidence": 0.9847224354743958}]}, {"text": "However, na\u00a8\u0131velyna\u00a8\u0131vely adding these edges increases the feature sparsity which degrades the discriminative ability of the logistic regression classifier used in PRA.", "labels": [], "entities": []}, {"text": "This can be addressed by adding latent relations obtained by clustering the surface relations, instead of directly adding the surface relations.", "labels": [], "entities": []}, {"text": "This reduces feature sparsity and has been shown to improve PRA inference ( , (.", "labels": [], "entities": [{"text": "PRA inference", "start_pos": 60, "end_pos": 73, "type": "TASK", "confidence": 0.947676807641983}]}, {"text": "In this article we propose a scheme for augmenting the KB using paths obtained by mining noun phrases that connect two SVO triples from an external corpus.", "labels": [], "entities": []}, {"text": "We term these noun phrases as bridging entities since they bridge two KB relations to form a path.", "labels": [], "entities": []}, {"text": "This is different from the scheme in ( and (, which adds edges between KB nodes by mining surface relations from an external corpus.", "labels": [], "entities": []}, {"text": "We search for such bridging entities in the corpus by performing a limited depth DFS (depth first search) on the corpus graph in an on-demand fashion.", "labels": [], "entities": []}, {"text": "We term this procedure as On-Demand Augmentation (ODA), because the search can be performed during test time in an on-demand manner.", "labels": [], "entities": [{"text": "On-Demand Augmentation (ODA)", "start_pos": 26, "end_pos": 54, "type": "TASK", "confidence": 0.6970773100852966}]}, {"text": "In contrast, the previous approaches of adding edges or embeddings to the KB (, and vector space random walk PRA () are batch procedures.", "labels": [], "entities": [{"text": "vector space random walk PRA", "start_pos": 84, "end_pos": 112, "type": "TASK", "confidence": 0.5528959035873413}]}, {"text": "As we shall see in Section 4, due to a limited search space, on-demand augmentation is much faster compared to algorithms in ().", "labels": [], "entities": []}, {"text": "Furthermore, since edges are not added blindly, on-demand augmentation does not increase feature sparsity which is responsible for performance degradation.", "labels": [], "entities": []}, {"text": "Our experiments suggest that ODA provides better performance than () and nearly the same prediction performance as provided by), but in both cases with the added advantage of faster running time and greater flexibility due to its online and on-demand nature.", "labels": [], "entities": []}, {"text": "The code along with the results can be obtained at https://github.com/malllabiisc/pra-oda.", "labels": [], "entities": []}], "datasetContent": [{"text": "We used the implementation of PRA provided by the authors of ().", "labels": [], "entities": []}, {"text": "For our experiments, we used the same 10 NELL relation data as used in ().", "labels": [], "entities": []}, {"text": "The augmentation resulted in the addition of 1086 paths during training and 1430 paths during test time.", "labels": [], "entities": [{"text": "augmentation", "start_pos": 4, "end_pos": 16, "type": "METRIC", "confidence": 0.9559165239334106}]}, {"text": "We split the NELL data into 60% training data, 15 % development data and 25% test data.", "labels": [], "entities": [{"text": "NELL data", "start_pos": 13, "end_pos": 22, "type": "DATASET", "confidence": 0.8434246480464935}]}, {"text": "Values ford max , and K, the most frequent paths, were obtained by tuning on a development set for 4 relations (athleteplaysforsport,actorstarredinmovie,citylocatedincountry: Runtime comparison for the entire experiment (lower is better).", "labels": [], "entities": []}, {"text": "PRA-SVO, PRA-VS are the systems proposed in ().", "labels": [], "entities": [{"text": "PRA-SVO", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.8751624226570129}]}, {"text": "PRA-ODA is the approach proposed in this paper.", "labels": [], "entities": []}, {"text": "Between the two top performing systems, i.e., PRA-ODA and PRA-VS, PRA-ODA is faster by a factor of 1.8. and journalistwritesforpublication).", "labels": [], "entities": []}, {"text": "The hyperparameter values d max = 2, K = 10 reported the highest MRR and were used for the rest of the relations.", "labels": [], "entities": [{"text": "MRR", "start_pos": 65, "end_pos": 68, "type": "METRIC", "confidence": 0.9985318183898926}]}, {"text": "For the L 1 and L 2 regularization parameters in the logistic regression classifier, we used the same values as used in (), viz., L 1 = 0.005, and L 2 = 1.0.", "labels": [], "entities": []}, {"text": "This is because the parameters were reported to be robust, and seemed to work well even when the knowledge base was augmented.", "labels": [], "entities": []}, {"text": "We compare the results (PRA-ODA) with the PRA algorithm executed on the NELL KB, NELL KB augmented with surface relations (PRA-SVO) () and vector space random walk PRA (PRA-VS) ().", "labels": [], "entities": []}, {"text": "The run times, i.e, the time taken to perform an entire experiment for PRA-SVO and PRA-VS includes the time taken to augment NELL KB with SVO edges.", "labels": [], "entities": []}, {"text": "The PRA-VS runtime also includes the time taken for generating embeddings to perform the vector space random walk.", "labels": [], "entities": []}, {"text": "As can be seen from, our scheme, PRA-ODA, provides performance equivalent to PRA-VS with faster running time (speed up of 1.8).", "labels": [], "entities": []}, {"text": "In addition to the time taken for the full SVO augmentation, PRA-VS takes additional time to generate embeddings (13 minutes) from the added verbs.", "labels": [], "entities": []}, {"text": "We note that the batch augmentation in case of PRA-SVO and PRA-VS, and embedding computation in case of PRA-VS are all specific to the relations in the evaluation set, and hence can't be ignored as a one-time offline cost.", "labels": [], "entities": []}, {"text": "In other words, these costs are likely to increase as more relations (and their instances) are included during training and testing.", "labels": [], "entities": []}, {"text": "Runtime gains with PRA-ODA are likely to be even more pronounced in such settings.", "labels": [], "entities": []}, {"text": "An additional advantage of the proposed algorithm is that it can also be run on the top of any PRA based algorithm such as the PRA-SVO and PRA-VS.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 2: Comparison of Mean Reciprocal Rank  (MRR) metric for 10 relations from NELL (higher  is better). PRA-SVO, PRA-VS are the systems  proposed in (", "labels": [], "entities": [{"text": "Mean Reciprocal Rank  (MRR) metric", "start_pos": 24, "end_pos": 58, "type": "METRIC", "confidence": 0.949315002986363}, {"text": "NELL", "start_pos": 81, "end_pos": 85, "type": "METRIC", "confidence": 0.7387622594833374}]}, {"text": " Table 3: Runtime comparison for the entire ex- periment (lower is better). PRA-SVO, PRA-VS  are the systems proposed in (", "labels": [], "entities": []}]}