{"title": [{"text": "Acquisition of Conceptual Data Models from Natural Language Descriptions", "labels": [], "entities": []}], "abstractContent": [{"text": "Acquiring information systems specifications from natural language description is presented as a problem class that requires a different treatment of semantics when compared with other applied NL systems such as database and operating system interfaces.", "labels": [], "entities": []}, {"text": "Within this problem class, the specific task of obtaining explicit conceptual data models from natural language text or dialogue is being investigated.", "labels": [], "entities": []}, {"text": "The knowledge brought to bear on this task is classified into syntactic, semantic and systems analysis knowledge.", "labels": [], "entities": []}, {"text": "Investigations with a simple syntactic parse and with a semantic analysis using McCorcl's Slot Grammar are reported, and the structure of the systems analysis knowledge is considered.", "labels": [], "entities": [{"text": "McCorcl's Slot Grammar", "start_pos": 80, "end_pos": 102, "type": "DATASET", "confidence": 0.8280623406171799}]}], "introductionContent": [{"text": "This section introduces the application of computer-based tools for information systems requirements analysis, design. and implementation, and outlines a motivation for endowing such tools with natural language interfaces.", "labels": [], "entities": [{"text": "information systems requirements analysis", "start_pos": 68, "end_pos": 109, "type": "TASK", "confidence": 0.6238318681716919}]}, {"text": "It concludes with the structure of the remainder of the paper.", "labels": [], "entities": []}, {"text": "Information systems development suffers from two widely acknowledged problems: \u2022 an applications backlog, whereby demand for applications exceeds resources available for its satisfaction.", "labels": [], "entities": [{"text": "Information systems development", "start_pos": 0, "end_pos": 31, "type": "TASK", "confidence": 0.7547296682993571}]}, {"text": "\u2022 a requirements analysis problem.", "labels": [], "entities": [{"text": "requirements analysis", "start_pos": 4, "end_pos": 25, "type": "TASK", "confidence": 0.8756554126739502}]}, {"text": "This is often manifested as a maintenance problem, whereby resources that could be put into reducing the applications backlog are instead devoted to correcting faults in delivered systems.", "labels": [], "entities": []}, {"text": "Most such faults are traceable to erroneous specifications, resulting from a failure to establish user requirements correctly.", "labels": [], "entities": []}, {"text": "The industry has provided solutions to each of these problems: The problem of productivity has been addressed by the provision of more powerful higher-level languages known as 'application generators' or 'fourth generation languages ' (4GLs), in which the same functionality can be achieved in a tenth or less of the instructions needed in a conventional procedural computer language.", "labels": [], "entities": []}, {"text": "A general feature of such software tools is that they do away with the need for much procedural programming by employing declarative notations in which requirements can be expressed in sufficient detail for the software to provide procedures to meet them.", "labels": [], "entities": []}, {"text": "(Naturally, the sophistication of these declarative notations varies according to the breadth of their application coverage.)", "labels": [], "entities": []}, {"text": "The requirements analysis problem has been addressed since the mid nineteen-seventies by a range of prescriptive development methods providing working procedures and graphical representation languages, in place of traditional approaches which rely heavily on natural language narrative to specify prooessing requirements.", "labels": [], "entities": [{"text": "requirements analysis", "start_pos": 4, "end_pos": 25, "type": "TASK", "confidence": 0.8120863735675812}]}, {"text": "A typical representation or conceptual modelling language is described in section 2.", "labels": [], "entities": []}, {"text": "A problem with both the high-level application generators and the development methods is that they have been established independently by a variety of manufacturers, software houses, consultants and academics, resulting in a multitude of competing products and methods, with no standard accepted by the industry.", "labels": [], "entities": []}, {"text": "Suppliers and users therefore face considerable training and consultancy costs due to staff mobility.", "labels": [], "entities": []}, {"text": "A more recent trend is to combine the two approaches to produce a more powerful software tool environment or analyst's workbench which enables the analyst to edit diagrams that formally represent the requirements, and using these specifications to automatically generate computer programs.", "labels": [], "entities": []}, {"text": "Such tools represent an improvement on previous practice in two ways: firstly by bringing forward the use of precise formal languages from the coding to the specification phase in the software life-cycle, and secondly by automating the coding phase.", "labels": [], "entities": []}, {"text": "However, they do not similarly automate the analysis phase that must precede the formal expression of requirements in a specification, although they may mechanize the process of recording and revising a specification.", "labels": [], "entities": []}, {"text": "The nature of such tools is described in section 3.", "labels": [], "entities": []}, {"text": "It is proposed that a natural language interface to tools provided to mechanize such methods would provide several benefits: It is possible to develop a specification using a representation language with which the analyst is not familiar, by hiding the representation language from the analyst.", "labels": [], "entities": []}, {"text": "It can alternatively help the analyst learn the specification language by displaying the graphical representation of a given description.", "labels": [], "entities": []}, {"text": "With a natural language generation facility it is possible for an analyst to informally verify that a graphical representation of some aspect of a system expresses the desired meaning.", "labels": [], "entities": []}, {"text": "A natural language generator can be used to translate a specification developed by someone else using a representation that the reader is not familiar with.", "labels": [], "entities": []}, {"text": "In addition to facilitating communication between analysts ~ained on different methods, this technique could facilitate communication between analysts and their users or expert informants.", "labels": [], "entities": []}, {"text": "A further motivation is that increasingly, the 4GLs described above are in the hands of end users who develop applications directly.", "labels": [], "entities": []}, {"text": "4GLs typically make straightforward applications easy to develop, often prompting the users for the parameters that specialize the application as an instance of the stereotype systems that lie within the tool's application bandwidth.", "labels": [], "entities": []}, {"text": "However, they are often poor at enabling more elaborate requirements to be met where there are interdependencies between data Ides and complex integrity and validation rules.", "labels": [], "entities": []}, {"text": "A tool built on the lines described below cart help end users inexpert in analysis to articulate their own requirements and then to convert those requirements into executable code.", "labels": [], "entities": []}, {"text": "The architecture of an information systems development workbench with an integrated natural language and graphics interface is described in section 4.", "labels": [], "entities": []}, {"text": "An approach to knowledge representation within this system is discussed in section 5.", "labels": [], "entities": [{"text": "knowledge representation", "start_pos": 15, "end_pos": 39, "type": "TASK", "confidence": 0.7308651059865952}]}, {"text": "Approaches to natural language analysis and generation and the results of some prototyping work are discussed in section 6.", "labels": [], "entities": [{"text": "natural language analysis and generation", "start_pos": 14, "end_pos": 54, "type": "TASK", "confidence": 0.668994802236557}]}], "datasetContent": [], "tableCaptions": []}