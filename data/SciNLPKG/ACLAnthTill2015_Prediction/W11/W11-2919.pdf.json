{"title": [{"text": "Prefix Probabilities for Linear Context-Free Rewriting Systems", "labels": [], "entities": []}], "abstractContent": [{"text": "We present a novel method for the computation of prefix probabilities for linear context-free rewriting systems.", "labels": [], "entities": []}, {"text": "Our approach streamlines previous procedures to compute prefix probabilities for context-free grammars, synchronous context-free grammars and tree adjoining grammars.", "labels": [], "entities": []}, {"text": "In addition , the methodology is general enough to be used fora wider range of problems involving , for example, several prefixes.", "labels": [], "entities": []}], "introductionContent": [{"text": "There area number of problems related to probabilistic grammatical formalisms that involve summing an infinite number of values.", "labels": [], "entities": []}, {"text": "For example, if P is a probability distribution over strings defined by a probabilistic grammar, and w is a string, then the prefix probability of w is defined to be: v P (wv) In words, all possible suffixes v that may follow prefix ware considered, and the probabilities of the concatenations of v and ware summed.", "labels": [], "entities": []}, {"text": "Prefix probabilities can be exploited to predict the next word or part of speech, for incremental processing of text or speech from left to right.", "labels": [], "entities": [{"text": "Prefix", "start_pos": 0, "end_pos": 6, "type": "METRIC", "confidence": 0.955980658531189}]}, {"text": "They can also be used in speech processing to score partial hypotheses in beam search (.", "labels": [], "entities": [{"text": "beam search", "start_pos": 74, "end_pos": 85, "type": "TASK", "confidence": 0.8178160488605499}]}, {"text": "At first sight, it is not clear that prefix probabilities can be effectively computed, as the number of possible strings v is infinite.", "labels": [], "entities": []}, {"text": "It was shown however by that in the case of probabilistic context-free grammars, the infinite sums can be isolated from any particular w, and these sums can be computed off-line by solving linear systems of equations.", "labels": [], "entities": []}, {"text": "For any particular w, the prefix probability can then be computed in cubic time in the length of w, on the basis of the values computed off-line.", "labels": [], "entities": []}, {"text": "Whereas consider parsing in the style of the Cocke-Kasami-Younger algorithm, prefix probabilities for probabilistic context-free grammars can also be computed in the style of the algorithm by, as shown by.", "labels": [], "entities": []}, {"text": "This approach is not restricted to context-free grammars.", "labels": [], "entities": []}, {"text": "It was shown by that prefix probabilities can also be effectively computed for probabilistic tree adjoining grammars.", "labels": [], "entities": []}, {"text": "That effective computation is also possible for probabilistic synchronous context-free grammars was shown by, which departed from earlier papers on the subject in that the solution was divided into a number of steps, namely anew type of transformation of the grammar, followed by elimination of epsilon and unit rules, and the computation of the inside probability of a string.", "labels": [], "entities": []}, {"text": "In this paper we focus on a much more general formalism than those mentioned above, namely that of probabilistic linear context-free rewriting systems (PLCFRS).", "labels": [], "entities": []}, {"text": "This formalism is equivalent to the probabilistic simple RCGs discussed by and by, and probabilistic extensions of multiple context-free grammars, such as those considered by.", "labels": [], "entities": []}, {"text": "Nonterminals in a PLCFRS can generate discontinuous constituents.", "labels": [], "entities": []}, {"text": "For this reason, (P)LCFRSs have recently been used to model discontinuous phrase structure treebanks as well as non-projective dependency treebanks; see.", "labels": [], "entities": []}, {"text": "The main contribution of this paper is a method for computing prefix probabilities for PLCFRSs.", "labels": [], "entities": []}, {"text": "We are not aware of any existing algorithm in the literature for this task.", "labels": [], "entities": []}, {"text": "Our method implies existence of algorithms for the computation of prefix probabilities for probabilistic versions of for-malisms that are special cases of LCFRSs, such as the generalized multitext grammars of, which are used to model translation, and the already mentioned formalism proposed by to model non-projective dependency structures.", "labels": [], "entities": []}, {"text": "We follow essentially the same approach as, and reduce the problem of computing the prefix probabilities for PLCFRSs to the well-known problem of computing inside probabilities for PLCFRSs.", "labels": [], "entities": []}, {"text": "The reduction is obtained by the composition of a PLCFRS with a special finite-state transducer.", "labels": [], "entities": []}, {"text": "Most importantly, this composition is independent of the specific input string for which we need to solve the prefix probability problem, and can therefore be computed off-line.", "labels": [], "entities": []}, {"text": "We also show how off-line application of a generic form of epsilon and unit rule elimination for PLCFRS can be exploited, which simplifies the computation of the inside probability.", "labels": [], "entities": []}, {"text": "The rest of this paper is organized as follows.", "labels": [], "entities": []}, {"text": "In Section 2 we introduce PLCFRS and finite-state transducers.", "labels": [], "entities": []}, {"text": "In Section 3 we discuss a general algorithm for composing a PLCFRS with a finitestate transducer.", "labels": [], "entities": []}, {"text": "This construction will be used in several places in later sections.", "labels": [], "entities": []}, {"text": "Section 4 shows an effective way of computing the inside probabilities for PLCFRSs, and Section 5 presents a method for the elimination of epsilon and unit rules in a PLCFRS.", "labels": [], "entities": []}, {"text": "Section 6 combines all of the previous techniques, resulting in an algorithm for the computation of prefix probabilities via a reduction to the computation of inside probabilities.", "labels": [], "entities": []}, {"text": "We then conclude in Section 7 with some discussion.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}