{"title": [{"text": "The OSU System for Surface Realization at Generation Challenges 2011", "labels": [], "entities": [{"text": "Surface Realization", "start_pos": 19, "end_pos": 38, "type": "TASK", "confidence": 0.7244831323623657}]}], "abstractContent": [{"text": "This report documents our efforts to develop a Generation Challenges 2011 surface realization system by converting the shared task deep inputs to ones compatible with OpenCCG.", "labels": [], "entities": [{"text": "Generation Challenges 2011 surface realization", "start_pos": 47, "end_pos": 93, "type": "TASK", "confidence": 0.6121240615844726}]}, {"text": "Although difficulties in conversion led us to employ machine learning for relation mapping and to introduce several robustness measures into OpenCCG's grammar-based chart real-izer, the percentage of grammatically complete realizations still remained well below results using native OpenCCG inputs on the development set, with a corresponding drop in output quality.", "labels": [], "entities": [{"text": "relation mapping", "start_pos": 74, "end_pos": 90, "type": "TASK", "confidence": 0.9117856323719025}]}, {"text": "We discuss known conversion issues and possible ways to improve performance on shared task inputs.", "labels": [], "entities": []}], "introductionContent": [{"text": "Our Generation Challenges 2011 shared task system represents an initial attempt to develop a surface realizer for shared task inputs that takes advantage of prior work on broad coverage realization with OpenCCG.", "labels": [], "entities": [{"text": "broad coverage realization", "start_pos": 171, "end_pos": 197, "type": "TASK", "confidence": 0.6068836748600006}]}, {"text": "OpenCCG is a parsing/generation library for Combinatory Categorial Grammar).", "labels": [], "entities": [{"text": "OpenCCG", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.951442301273346}, {"text": "parsing/generation", "start_pos": 13, "end_pos": 31, "type": "TASK", "confidence": 0.8299093246459961}]}, {"text": "CCG is a unification-based categorial grammar formalism defined almost entirely in terms of lexical entries that encode sub-categorization as well as syntactic features.", "labels": [], "entities": []}, {"text": "OpenCCG implements a grammarbased chart realization algorithm in the tradition of approach to bidirectional processing with unification grammars.", "labels": [], "entities": [{"text": "OpenCCG", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.9512367844581604}, {"text": "grammarbased chart realization", "start_pos": 21, "end_pos": 51, "type": "TASK", "confidence": 0.6893997192382812}]}, {"text": "The chart realizer takes as input logical forms represented internally using Hybrid Logic Dependency Semantics (HLDS), a dependency-based approach to representing linguistic meaning ().", "labels": [], "entities": []}, {"text": "To illustrate the input to OpenCCG, consider the semantic dependency graph in.", "labels": [], "entities": [{"text": "OpenCCG", "start_pos": 27, "end_pos": 34, "type": "DATASET", "confidence": 0.9142160415649414}]}, {"text": "In the graph, each node has a lexical predication (e.g. make.03) and a set of semantic features (e.g. NUMsg); nodes are connected via dependency relations (e.g. ARG0).", "labels": [], "entities": [{"text": "ARG0", "start_pos": 161, "end_pos": 165, "type": "DATASET", "confidence": 0.8450472354888916}]}, {"text": "Such graphs are broadly similar to the \"deep\" shared task inputs.", "labels": [], "entities": []}, {"text": "Note, however, that they are quite different from the shallow input trees, where many of the expected dependencies from coordination, control and relatization are missing.", "labels": [], "entities": []}, {"text": "For example, in the figure, both dependents of make.03 would be missing in the shallow tree, which involve control and relativization (with a null relativizer).", "labels": [], "entities": []}, {"text": "As it would be difficult to hallucinate such dependencies, we have only attempted the deep task.", "labels": [], "entities": []}, {"text": "Grammar-based chart realization in the tradition of Kay is capable of attaining high precision, but achieving broad coverage is a challenge, as is robustness to any deviations in the expected input.", "labels": [], "entities": [{"text": "Grammar-based chart realization", "start_pos": 0, "end_pos": 31, "type": "TASK", "confidence": 0.5933865706125895}, {"text": "precision", "start_pos": 85, "end_pos": 94, "type": "METRIC", "confidence": 0.9971814155578613}]}, {"text": "Previous work on chart realization has primarily used inputs derived from gold standard parses, and indeed, native OpenCCG inputs have been obtained from gold standard derivations in the CCGbank.", "labels": [], "entities": [{"text": "chart realization", "start_pos": 17, "end_pos": 34, "type": "TASK", "confidence": 0.7470882534980774}, {"text": "CCGbank", "start_pos": 187, "end_pos": 194, "type": "DATASET", "confidence": 0.9457796812057495}]}, {"text": "Given the available time, our strategy was to make minor adjustments to OpenCCG's extracted grammars while devoting the bulk of our effort to converting the shared task inputs to be as similar as possible to the native inputs.", "labels": [], "entities": []}, {"text": "Difficulties in conversion led us to employ machine learning for relation mapping and to introduce several robustness measures into OpenCCG's realization algorithm.", "labels": [], "entities": [{"text": "relation mapping", "start_pos": 65, "end_pos": 81, "type": "TASK", "confidence": 0.9247163236141205}]}, {"text": "Nevertheless, the percentage of grammatically complete realizations still remained well below results using native OpenCCG inputs on the development set, with a corresponding drop in output quality.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1 provides  frequencies of converted elements. Finally, to derive", "labels": [], "entities": []}, {"text": " Table 2: Development set scores for all realizations (OSU.1) and grammatically complete realizations only (OSU.2)  for the shared task inputs and using native inputs", "labels": [], "entities": []}]}