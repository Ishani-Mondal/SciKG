{"title": [{"text": "Empty Categories in Hindi Dependency Treebank: Analysis and Recovery", "labels": [], "entities": [{"text": "Hindi Dependency Treebank", "start_pos": 20, "end_pos": 45, "type": "DATASET", "confidence": 0.7481833895047506}, {"text": "Analysis and Recovery", "start_pos": 47, "end_pos": 68, "type": "TASK", "confidence": 0.7572159767150879}]}], "abstractContent": [{"text": "In this paper, we first analyze and classify the empty categories in a Hindi dependency tree-bank and then identify various discovery procedures to automatically detect the existence of these categories in a sentence.", "labels": [], "entities": []}, {"text": "For this we make use of lexical knowledge along with the parsed output from a constraint based parser.", "labels": [], "entities": []}, {"text": "Through this work we show that it is possible to successfully discover certain types of empty categories while some other types are more difficult to identify.", "labels": [], "entities": []}, {"text": "This work leads to the state-of-the-art system for automatic insertion of empty categories in the Hindi sentence.", "labels": [], "entities": [{"text": "automatic insertion of empty categories in the Hindi sentence", "start_pos": 51, "end_pos": 112, "type": "TASK", "confidence": 0.8076559835010104}]}], "introductionContent": [{"text": "Empty categories play a crucial role in the annotation framework of the Hindi dependency treebank 1).", "labels": [], "entities": []}, {"text": "They are inserted in a sentence in case the dependency analysis does not lead to a fully connected tree.", "labels": [], "entities": []}, {"text": "In the Hindi treebank, an empty category (denoted by a NULL node) always has at least one child.", "labels": [], "entities": [{"text": "Hindi treebank", "start_pos": 7, "end_pos": 21, "type": "DATASET", "confidence": 0.7472795844078064}]}, {"text": "These elements have essentially the same properties (e.g. case-marking, agreement, etc.) as an overtly realized element and they provide valuable information (such as predicate-argument structure, etc.).", "labels": [], "entities": []}, {"text": "A different kind of motivation for postulating empty categories comes from the demands of natural lan-guage processing, in particular parsing.", "labels": [], "entities": []}, {"text": "There are several types of empty categories in the Hindi dependency treebank serving different purposes.", "labels": [], "entities": [{"text": "Hindi dependency treebank", "start_pos": 51, "end_pos": 76, "type": "DATASET", "confidence": 0.5811827977498373}]}, {"text": "The presence of these elements can be crucial for correct automatic parsing.", "labels": [], "entities": []}, {"text": "Traditional parsing algorithms do not insert empty categories and require them to be part of the input.", "labels": [], "entities": []}, {"text": "The performance of such parser will be severely affected if one removes these elements from the input data.", "labels": [], "entities": []}, {"text": "Statistical parsers like MaltParser, MSTParser, as well as Constraint Based Hybrid Parser (CBHP) () produce incorrect parse trees once the empty categories are removed from the input data.", "labels": [], "entities": [{"text": "MSTParser", "start_pos": 37, "end_pos": 46, "type": "DATASET", "confidence": 0.8874226212501526}]}, {"text": "Hence there is a need for automatic detection and insertion of empty categories in the Hindi data.", "labels": [], "entities": []}, {"text": "Additionally, it is evident that successful detection of such nodes will help the annotation process as well.", "labels": [], "entities": []}, {"text": "There have been many approaches for the recovery of empty categories in the treebanks like Penn treebank, both ML based and rule based).", "labels": [], "entities": [{"text": "Penn treebank", "start_pos": 91, "end_pos": 104, "type": "DATASET", "confidence": 0.9900960028171539}]}, {"text": "Some approaches such as follow a post processing step of recovering empty categories after parsing the text.", "labels": [], "entities": []}, {"text": "In this paper we make use of lexical knowledge along with the parsed output from a constraint based parser to successfully insert empty category in the input sentence, which may further be given for parsing or other applications.", "labels": [], "entities": [{"text": "parsing", "start_pos": 199, "end_pos": 206, "type": "TASK", "confidence": 0.966316282749176}]}, {"text": "Throughout this paper, we use the term recovery (of empty categories) for the insertion of different types of empty categories into the input sentence.", "labels": [], "entities": []}, {"text": "The paper is arranged as follows, Section 2 discusses the empty nodes in the treebank and classifies: Empty categories in Hindi Tree bank them based on their syntactic type.", "labels": [], "entities": []}, {"text": "In section 3 we provide an algorithm to automatically recover these elements.", "labels": [], "entities": []}, {"text": "Section 4 shows the performance of our system and discusses the results.", "labels": [], "entities": []}, {"text": "We conclude the paper in section 5.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Empty categories in Hindi Tree bank", "labels": [], "entities": [{"text": "Hindi Tree bank", "start_pos": 30, "end_pos": 45, "type": "DATASET", "confidence": 0.8706590533256531}]}, {"text": " Table 11: Recovery of empty categories in Hindi tree- bank.", "labels": [], "entities": [{"text": "Hindi tree- bank", "start_pos": 43, "end_pos": 59, "type": "DATASET", "confidence": 0.8076925128698349}]}, {"text": " Table 12: Empty categories in Hindi Tree bank", "labels": [], "entities": [{"text": "Hindi Tree bank", "start_pos": 31, "end_pos": 46, "type": "DATASET", "confidence": 0.8680335879325867}]}]}