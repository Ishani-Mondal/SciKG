{"title": [{"text": "Designing an Extensible API for Integrating Language Modeling and Realization", "labels": [], "entities": [{"text": "Integrating Language Modeling", "start_pos": 32, "end_pos": 61, "type": "TASK", "confidence": 0.7811526656150818}, {"text": "Realization", "start_pos": 66, "end_pos": 77, "type": "TASK", "confidence": 0.7939319014549255}]}], "abstractContent": [{"text": "We present an extensible API for integrating language modeling and realization , describing its design and efficient implementation in the OpenCCG surface realizer.", "labels": [], "entities": [{"text": "OpenCCG surface realizer", "start_pos": 139, "end_pos": 163, "type": "TASK", "confidence": 0.7036359310150146}]}, {"text": "With OpenCCG, language models maybe used to select realiza-tions with preferred word orders, promote alignment with a conversational partner, avoid repetitive language use, and increase the speed of the best-first anytime search.", "labels": [], "entities": []}, {"text": "The API enables a variety of n-gram models to be easily combined and used in conjunction with appropriate edge pruning strategies.", "labels": [], "entities": []}, {"text": "The n-gram models maybe of any order, operate in reverse (\"right-to-left\"), and selectively replace certain words with their semantic classes.", "labels": [], "entities": []}, {"text": "Factored language models with generalized backoff may also be employed, over words represented as bundles of factors such as form, pitch accent, stem, part of speech, supertag, and semantic class.", "labels": [], "entities": []}], "introductionContent": [{"text": "The OpenCCG 1 realizer () is an open source surface realizer for Steedman's (2000a; 2000b) Combinatory Categorial Grammar (CCG).", "labels": [], "entities": [{"text": "OpenCCG 1 realizer", "start_pos": 4, "end_pos": 22, "type": "TASK", "confidence": 0.664066751797994}, {"text": "Steedman's (2000a; 2000b) Combinatory Categorial Grammar (CCG)", "start_pos": 65, "end_pos": 127, "type": "TASK", "confidence": 0.6242915781644675}]}, {"text": "It is designed to be the first practical, reusable realizer for CCG, and includes implementations of 1 http://openccg.sourceforge.net CCG's unique accounts of coordination and information structure-based prosody.", "labels": [], "entities": []}, {"text": "Like other surface realizers, the OpenCCG realizer takes as input a logical form specifying the propositional meaning of a sentence, and returns one or more surface strings that express this meaning according to the lexicon and grammar.", "labels": [], "entities": []}, {"text": "A distinguishing feature of OpenCCG is that it implements a hybrid symbolic-statistical chart realization algorithm that combines (1) a theoretically grounded approach to syntax and semantic composition, with (2) the use of integrated language models for making choices among the options left open by the grammar (thereby reducing the need for hand-crafted rules).", "labels": [], "entities": [{"text": "symbolic-statistical chart realization", "start_pos": 67, "end_pos": 105, "type": "TASK", "confidence": 0.7240994970003763}]}, {"text": "In contrast, previous chart realizers) have not included a statistical component, while previous statistical realizers) have employed less general approaches to semantic representation and composition, and have not typically made use of finegrained logical forms that include specifications of such information structural notions as theme, rheme and focus.", "labels": [], "entities": []}, {"text": "In this paper, we present OpenCCG's extensible API (application programming interface) for integrating language modeling and realization, describing its design and efficient implementation in Java.", "labels": [], "entities": [{"text": "language modeling and realization", "start_pos": 103, "end_pos": 136, "type": "TASK", "confidence": 0.7031644582748413}]}, {"text": "With OpenCCG, language models maybe used to select realizations with preferred word orders, promote alignment with a conversational partner (, and avoid repetitive language use.", "labels": [], "entities": []}, {"text": "In addition, by integrating language model scoring into the search, it also becomes possible to use more accurate models to improve realization times, when the realizer is run in anytime mode.", "labels": [], "entities": []}, {"text": "To allow language models to be combined in flexible ways-as well as to enable research on how to best combine language modeling and realization-OpenCCG's design includes interfaces that allow user-defined functions to be used for scoring partial realizations and for pruning low-scoring ones during the search.", "labels": [], "entities": []}, {"text": "The design also includes classes for supporting a range of language models and typical ways of combining them.", "labels": [], "entities": []}, {"text": "As we shall see, experience to date indicates that the benefits of employing a highly generalized approach to scoring and pruning can be enjoyed with little or no loss of performance.", "labels": [], "entities": [{"text": "scoring", "start_pos": 110, "end_pos": 117, "type": "TASK", "confidence": 0.9493446946144104}]}, {"text": "The rest of this paper is organized as follows.", "labels": [], "entities": []}, {"text": "Section 2 gives an overview of the realizer architecture, highlighting the role of the interfaces for plugging in custom scoring and pruning functions, and illustrating how n-gram scoring affects accuracy and speed.", "labels": [], "entities": [{"text": "accuracy", "start_pos": 196, "end_pos": 204, "type": "METRIC", "confidence": 0.9988021850585938}, {"text": "speed", "start_pos": 209, "end_pos": 214, "type": "METRIC", "confidence": 0.9465582966804504}]}, {"text": "Sections 3 and 4 present Open-CCG's classes for defining scoring and pruning functions, respectively, giving examples of their usage.", "labels": [], "entities": []}, {"text": "Finally, Section 5 summarizes the design and concludes with a discussion of future work.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Test suite sizes.", "labels": [], "entities": []}]}