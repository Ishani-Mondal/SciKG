{"title": [], "abstractContent": [{"text": "Productions systems, traditionally mainly used for developing expert systems, can also be employed for implementing chart generators.", "labels": [], "entities": [{"text": "chart generators", "start_pos": 116, "end_pos": 132, "type": "TASK", "confidence": 0.6855482906103134}]}, {"text": "Fo-cusing on bottom-up chart generation, we describe how the notions of chart algorithms relate to the knowledge base and Rete network of production systems.", "labels": [], "entities": [{"text": "bottom-up chart generation", "start_pos": 13, "end_pos": 39, "type": "TASK", "confidence": 0.7043258349100748}]}, {"text": "We draw on experience gained in two research projects on natural language generation (NLG), one involving surface realization, the other involving both a content determination task (referring expression generation) and surface realization.", "labels": [], "entities": [{"text": "natural language generation (NLG)", "start_pos": 57, "end_pos": 90, "type": "TASK", "confidence": 0.8082056045532227}, {"text": "referring expression generation)", "start_pos": 182, "end_pos": 214, "type": "TASK", "confidence": 0.6700164675712585}]}, {"text": "The projects centered around the idea of 'overgeneration', i.e. of generating large numbers of output candidates which served as input to a ranking component.", "labels": [], "entities": []}, {"text": "The purpose of this paper is to extend the range of implementation options available to the NLG practitioner by detailing the specific advantages and disadvantages of using production systems for NLG.", "labels": [], "entities": []}], "introductionContent": [{"text": "A general question faced by the NLG practitioner is whether to use an off-the-shelf generator or develop one 'from scratch.'", "labels": [], "entities": []}, {"text": "Often, understanding the workings of the off-the-shelf generator and providing the required input structures requires substantial work.", "labels": [], "entities": []}, {"text": "Furthermore, the off-the-shelf generator may not provide the required functionality without additional programming, the project may dictate the use of a particular programming language or frequent interaction with components written in that language.", "labels": [], "entities": []}, {"text": "In this paper, we describe how to implement chart generators in production systems, i.e. from scratch.", "labels": [], "entities": []}, {"text": "Production systems have traditionally mainly been used for developing expert systems.", "labels": [], "entities": []}, {"text": "The particular production system we use, JESS] is implemented in Java, making it easy to interact with other Java components.", "labels": [], "entities": []}, {"text": "The rule encodings described in this paper should also work for other production systems such as CLIPS (\"C Language Integrated Production System\",).", "labels": [], "entities": []}, {"text": "We used JESS in two projects centering around the concept of overgeneration-and-ranking.", "labels": [], "entities": [{"text": "JESS", "start_pos": 8, "end_pos": 12, "type": "DATASET", "confidence": 0.8894209861755371}]}, {"text": "Both involved the generation of a large number of alternative outputs which served as input to a ranker written in Java.", "labels": [], "entities": []}, {"text": "Search was directed by influencing the agenda ordering of the chart generator.", "labels": [], "entities": []}, {"text": "At the syntactic level, realization in both projects was 'shallow.'", "labels": [], "entities": []}, {"text": "However, since we were using expert system technology, we were able to use more sophisticated domain reasoning for content planningmore specifically, referring expression generation -to drive the realizer in one of the projects.", "labels": [], "entities": [{"text": "content planningmore", "start_pos": 115, "end_pos": 135, "type": "TASK", "confidence": 0.7122460156679153}, {"text": "referring expression generation", "start_pos": 150, "end_pos": 181, "type": "TASK", "confidence": 0.66829780737559}]}, {"text": "The two characteristics just described, the ability to deal with issues of search and the integration with reasoning capabilities, make generation using production systems quite different from other methods of shallow generation.", "labels": [], "entities": []}, {"text": "For example, pipelines of XSLT stylesheets can be used to transform XML trees encoding linguistic structures.", "labels": [], "entities": []}, {"text": "However, the focus in using XSLT for generation is more on pursuing a single alternative than on searching for the best one.", "labels": [], "entities": []}, {"text": "Furthermore, rewriting XML trees with XSLT lends itself toward top-down generation, whereas the use of production systems naturally results in bottom-up generation.", "labels": [], "entities": []}, {"text": "In the following section, we relate chart algorithms to production systems at a more abstract level.", "labels": [], "entities": []}, {"text": "We then discuss two generators implemented in the production system JESS.", "labels": [], "entities": [{"text": "JESS", "start_pos": 68, "end_pos": 72, "type": "DATASET", "confidence": 0.9556915163993835}]}], "datasetContent": [], "tableCaptions": []}