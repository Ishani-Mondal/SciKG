{"title": [], "abstractContent": [{"text": "Dependency parsing algorithms capable of producing the types of crossing dependencies seen in natural language sentences have traditionally been orders of magnitude slower than algorithms for projective trees.", "labels": [], "entities": [{"text": "Dependency parsing", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.8241097927093506}]}, {"text": "For 95.8-99.8% of dependency parses in various natural language treebanks, whenever an edge is crossed, the edges that cross it all have a common vertex.", "labels": [], "entities": [{"text": "dependency parses", "start_pos": 18, "end_pos": 35, "type": "TASK", "confidence": 0.747832179069519}]}, {"text": "The optimal dependency tree that satisfies this 1-Endpoint-Crossing property can be found with an O(n 4) parsing algorithm that recursively combines forests over intervals with one exterior point.", "labels": [], "entities": []}, {"text": "1-Endpoint-Crossing trees also have natural connections to linguistics and another class of graphs that has been studied in NLP.", "labels": [], "entities": []}], "introductionContent": [{"text": "Dependency parsing is one of the fundamental problems in natural language processing today, with applications such as machine translation), information extraction (), and question answering ().", "labels": [], "entities": [{"text": "Dependency parsing", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.9006416201591492}, {"text": "machine translation", "start_pos": 118, "end_pos": 137, "type": "TASK", "confidence": 0.7688814699649811}, {"text": "information extraction", "start_pos": 140, "end_pos": 162, "type": "TASK", "confidence": 0.8449825644493103}, {"text": "question answering", "start_pos": 171, "end_pos": 189, "type": "TASK", "confidence": 0.8956849575042725}]}, {"text": "Most high-accuracy graph-based dependency parsers () find the highest-scoring projective trees (in which no edges cross), despite the fact that a large proportion of natural language sentences are non-projective.", "labels": [], "entities": []}, {"text": "Projective trees can be found in O(n 3 ) time), but cover only 63.6% of sentences in some natural language treebanks.", "labels": [], "entities": []}, {"text": "The class of directed spanning trees covers all treebank trees and can be parsed in O(n 2 ) with edge-based features), but it is NP-hard to find the maximum scoring such tree with grandparent or sibling features.", "labels": [], "entities": []}, {"text": "There are various existing definitions of mildly non-projective trees with better empirical coverage than projective trees that do not have the hardness of extensibility that spanning trees do.", "labels": [], "entities": []}, {"text": "However, these have had parsing algorithms that are orders of magnitude slower than the projective case or the edgebased spanning tree case.", "labels": [], "entities": [{"text": "parsing", "start_pos": 24, "end_pos": 31, "type": "TASK", "confidence": 0.9646483659744263}]}, {"text": "For example, well-nested dependency trees with block degree 2 ( cover at least 95.4% of natural language structures, but have a parsing time of O(n 7 ) (.", "labels": [], "entities": []}, {"text": "No previously defined class of trees simultaneously has high coverage and low-degree polynomial algorithms for parsing, allowing grandparent or sibling features.", "labels": [], "entities": []}, {"text": "We propose 1-Endpoint-Crossing trees, in which for any edge that is crossed, all other edges that cross that edge share an endpoint.", "labels": [], "entities": []}, {"text": "While simple to state, this property covers 95.8% or more of dependency parses in natural language treebanks (Table 1).", "labels": [], "entities": [{"text": "dependency parses", "start_pos": 61, "end_pos": 78, "type": "TASK", "confidence": 0.688511922955513}]}, {"text": "The optimal 1-Endpoint-Crossing tree can be found in faster asymptotic time than any previously proposed mildly non-projective dependency parsing algorithm.", "labels": [], "entities": []}, {"text": "We show how any 1-EndpointCrossing tree can be decomposed into isolated sets of intervals with one exterior point (Section 3).", "labels": [], "entities": []}, {"text": "This is the key insight that allows efficient parsing; the O(n 4 ) parsing algorithm is presented in Section 4. 1-Endpoint-Crossing trees area subclass of 2-planar graphs (Section 5.1), a class that has been studied in NLP.", "labels": [], "entities": [{"text": "parsing", "start_pos": 46, "end_pos": 53, "type": "TASK", "confidence": 0.9701799154281616}]}, {"text": "1-Endpoint-Crossing trees also have some linguistic interpretation (pairs of cross serial verbs produce 1-Endpoint-Crossing trees, Section 5.2).", "labels": [], "entities": []}, {"text": "2 Definitions of Non-Projectivity Definition 1.", "labels": [], "entities": []}, {"text": "Edges e and f cross if e and f have distinct endpoints and exactly one of the endpoints off lies between the endpoints of e.", "labels": [], "entities": []}, {"text": "A dependency tree is 1-EndpointCrossing if for any edge e, all edges that cross e share an endpoint p. shows the percentage of dependency parses in the CoNLL-X training sets that are 1-Endpoint-Crossing trees.", "labels": [], "entities": [{"text": "CoNLL-X training sets", "start_pos": 152, "end_pos": 173, "type": "DATASET", "confidence": 0.8766234119733175}]}, {"text": "Across six languages with varying amounts of non-projectivity, 95.8-99.8% of dependency parses in treebanks are 1-EndpointCrossing trees.", "labels": [], "entities": []}, {"text": "We next review and compare other relevant definitions of non-projectivity from prior work: wellnested with block degree 2, gap-minding, projective, and 2-planar.", "labels": [], "entities": []}, {"text": "The definitions of block degree and wellnestedness are given below: Definition 3.", "labels": [], "entities": [{"text": "degree", "start_pos": 25, "end_pos": 31, "type": "METRIC", "confidence": 0.5439741015434265}]}, {"text": "For each node u in the tree, a block of the node is \"a longest segment consisting of descendants of u.\".", "labels": [], "entities": []}, {"text": "The block-degree of u is \"the number of distinct blocks of u\".", "labels": [], "entities": []}, {"text": "The block degree of a tree is the maximum block degree of any of its nodes.", "labels": [], "entities": []}, {"text": "The gap degree is the number of gaps between these blocks, and so by definition is one less than the block degree.", "labels": [], "entities": [{"text": "gap degree", "start_pos": 4, "end_pos": 14, "type": "METRIC", "confidence": 0.8984807431697845}]}, {"text": "Two trees \"T 1 and T 2 interleave iff there are nodes l 1 ,r 1 \u2208 T 1 and l 2 ,r 2 \u2208 T 2 such that l 1 < l 2 < r 1 < r 2 .\" A tree is well-nested if no two disjoint subtrees interleave.", "labels": [], "entities": []}, {"text": "( As can be seen in, 95.4%-99.9% of dependency parses across treebanks are both well-nested and have block degree 2.", "labels": [], "entities": []}, {"text": "The optimal such tree can be found in O(n 7 ) time and O(n 5 ) space ().", "labels": [], "entities": []}, {"text": "Conventional edges from the artificial root node to the root(s) of the sentence reduce the empirical coverage of 1-Endpoint-Crossing trees.", "labels": [], "entities": []}, {"text": "Excluding these artificial root edges, the empirical coverage for Dutch rises to 12949 (97.0%).", "labels": [], "entities": [{"text": "coverage", "start_pos": 53, "end_pos": 61, "type": "METRIC", "confidence": 0.5823925137519836}]}, {"text": "These edges have no effect on the coverage of well-nested trees with block degree at most 2, gap-minding trees, or projective trees.", "labels": [], "entities": []}, {"text": "Figure 1: 1a is 1-Endpoint-Crossing, but is neither block degree 2 nor well-nested; 1b is gap-minding but not 2-planar.", "labels": [], "entities": []}, {"text": "A tree is gap-minding if it is wellnested, has gap degree at most 1, and has gap inheritance degree 0.", "labels": [], "entities": [{"text": "gap degree", "start_pos": 47, "end_pos": 57, "type": "METRIC", "confidence": 0.9538818597793579}, {"text": "gap inheritance degree 0", "start_pos": 77, "end_pos": 101, "type": "METRIC", "confidence": 0.8463542759418488}]}, {"text": "Gap inheritance degree 0 requires that there are no child nodes with descendants in more than one of their parent's blocks.", "labels": [], "entities": []}, {"text": "( Gap-minding trees can be parsed in O(n 5 ) ().", "labels": [], "entities": []}, {"text": "They have slightly less empirical coverage, however: 90.4-97.7%.", "labels": [], "entities": [{"text": "coverage", "start_pos": 34, "end_pos": 42, "type": "METRIC", "confidence": 0.8812147974967957}]}, {"text": "A tree is projective if it has block degree 1 (gap degree 0).", "labels": [], "entities": []}, {"text": "This definition has the least coverage (as low as 63.6% for Dutch), but can be parsed in O(n 3 )).", "labels": [], "entities": [{"text": "coverage", "start_pos": 30, "end_pos": 38, "type": "METRIC", "confidence": 0.9964808821678162}, {"text": "O", "start_pos": 89, "end_pos": 90, "type": "METRIC", "confidence": 0.7824310064315796}]}, {"text": "A tree is 2-planar if each edge can be drawn either above or below the sentence such that no edges cross (.", "labels": [], "entities": []}, {"text": "presented a transition-based parser for 2-planar trees, but there is no known globally optimal parsing algorithm for 2-planar trees.", "labels": [], "entities": []}, {"text": "Clearly projective gap-minding well-nested with block degree at most 2.", "labels": [], "entities": []}, {"text": "In Section 5.1, we prove the somewhat surprising fact that 1-EndpointCrossing 2-planar.", "labels": [], "entities": []}, {"text": "These are two distinct hierarchies capturing different dimensions of nonprojectivity: 1-Endpoint-Crossing \u2286 well-nested with block degree 2, and gap-minding \u2286 2-planar ().", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Over 95% of the dependency parse trees in the CoNLL-X training sets are 1-Endpoint-Crossing  trees. Coverage statistics and parsing times of previously proposed properties are shown for comparison.", "labels": [], "entities": [{"text": "dependency parse", "start_pos": 26, "end_pos": 42, "type": "TASK", "confidence": 0.7133220434188843}, {"text": "CoNLL-X training sets", "start_pos": 56, "end_pos": 77, "type": "DATASET", "confidence": 0.9223526914914449}]}]}