{"title": [{"text": "Efficient Parsing for Head-Split Dependency Trees", "labels": [], "entities": []}], "abstractContent": [{"text": "Head splitting techniques have been successfully exploited to improve the asymptotic runtime of parsing algorithms for project-ive dependency trees, under the arc-factored model.", "labels": [], "entities": [{"text": "Head splitting", "start_pos": 0, "end_pos": 14, "type": "TASK", "confidence": 0.7968802154064178}]}, {"text": "In this article we extend these techniques to a class of non-projective dependency trees, called well-nested dependency trees with block-degree at most 2, which has been previously investigated in the literature.", "labels": [], "entities": []}, {"text": "We define a structural property that allows head splitting for these trees, and present two algorithms that improve over the runtime of existing algorithms at no significant loss in coverage.", "labels": [], "entities": [{"text": "head splitting", "start_pos": 44, "end_pos": 58, "type": "TASK", "confidence": 0.7735811769962311}]}], "introductionContent": [{"text": "Much of the recent work on dependency parsing has been aimed at finding a good balance between accuracy and efficiency.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 27, "end_pos": 45, "type": "TASK", "confidence": 0.8893152475357056}, {"text": "accuracy", "start_pos": 95, "end_pos": 103, "type": "METRIC", "confidence": 0.9986037611961365}]}, {"text": "For one end of the spectrum, showed that the highest-scoring projective dependency tree under an arc-factored model can be computed in time O.n 3 /, where n is the length of the input string.", "labels": [], "entities": []}, {"text": "Later work has focused on making projective parsing viable under more expressive models.", "labels": [], "entities": [{"text": "projective parsing", "start_pos": 33, "end_pos": 51, "type": "TASK", "confidence": 0.6202143430709839}]}, {"text": "At the same time, it has been observed that for many standard data sets, the coverage of projective trees is far from complete (), which has led to an interest in parsing algorithms for non-projective trees.", "labels": [], "entities": []}, {"text": "While non-projective parsing under an arc-factored model can be done in time O.n 2 / (, parsing with more informed models is intractable.", "labels": [], "entities": []}, {"text": "This has led several authors to investigate 'mildly non-projective' classes of trees, with the goal of achieving a balance between expressiveness and complexity ().", "labels": [], "entities": []}, {"text": "In this article we focus on a class of mildly nonprojective dependency structures called well-nested dependency trees with block-degree at most 2.", "labels": [], "entities": []}, {"text": "This class was first introduced by, who showed that it corresponds, in a natural way, to the class of derivation trees of lexicalized tree-adjoining grammars.", "labels": [], "entities": []}, {"text": "While there are linguistic arguments against the restriction to this class (, found that it has excellent coverage on standard data sets.", "labels": [], "entities": []}, {"text": "Assuming an arc-factored model, well-nested dependency trees with block-degree \u00c4 2 can be parsed in time O.n 7 / using the algorithm of.", "labels": [], "entities": []}, {"text": "Recently, have shown that if an additional restriction called 1-inherit is imposed, parsing can be done in time O.n 6 /, without any additional loss in coverage on standard data sets.", "labels": [], "entities": [{"text": "parsing", "start_pos": 84, "end_pos": 91, "type": "TASK", "confidence": 0.9738889336585999}]}, {"text": "Standard context-free parsing methods, when adapted to the parsing of projective trees, provide O.n 5 / time complexity.", "labels": [], "entities": [{"text": "parsing of projective trees", "start_pos": 59, "end_pos": 86, "type": "TASK", "confidence": 0.8419370353221893}, {"text": "O.n 5 / time complexity", "start_pos": 96, "end_pos": 119, "type": "METRIC", "confidence": 0.9030016899108887}]}, {"text": "The O.n 3 / time result reported by has been obtained by exploiting more sophisticated dynamic programming techniques that 'split' dependency trees at the position of their heads, in order to save bookkeeping.", "labels": [], "entities": []}, {"text": "Splitting techniques have also been exploited to speedup parsing time for other lexicalized formalisms, such as bilexical context-free grammars and head automata).", "labels": [], "entities": []}, {"text": "However, to our knowledge no attempt has been made in the literature to extend these techniques to non-projective dependency parsing.", "labels": [], "entities": [{"text": "non-projective dependency parsing", "start_pos": 99, "end_pos": 132, "type": "TASK", "confidence": 0.7092746694882711}]}, {"text": "In this article we leverage the central idea from Eisner's algorithm and extend it to the class of wellnested dependency trees with block-degree at most 2.", "labels": [], "entities": []}, {"text": "We introduce a structural property, called head-split, that allows us to split these trees at the positions of their heads.", "labels": [], "entities": []}, {"text": "The property is restrictive, meaning that it reduces the class of trees that can be generated.", "labels": [], "entities": []}, {"text": "However, we show that the restriction to head-split trees comes at no significant loss in coverage, and it allows parsing in time O.n 6 /, an asymptotic improvement of one order of magnitude over the algorithm by for the unrestricted class.", "labels": [], "entities": [{"text": "coverage", "start_pos": 90, "end_pos": 98, "type": "METRIC", "confidence": 0.9870935082435608}, {"text": "parsing", "start_pos": 114, "end_pos": 121, "type": "TASK", "confidence": 0.9764686822891235}]}, {"text": "We also show that restricting the class of head-split trees by imposing the already mentioned 1-inherit property does not cause any additional loss in coverage, and that parsing for the combined class is possible in time O.n 5 /, one order of magnitude faster than the algorithm by for the 1-inherit class without the head-split condition.", "labels": [], "entities": [{"text": "coverage", "start_pos": 151, "end_pos": 159, "type": "METRIC", "confidence": 0.9536858201026917}]}, {"text": "The above results have consequences also for the parsing of other related formalisms, such as the already mentioned lexicalized tree-adjoining grammars.", "labels": [], "entities": []}, {"text": "This will be discussed in the final section.", "labels": [], "entities": []}], "datasetContent": [{"text": "In order to assess the empirical loss in coverage that the restriction to head-split trees incurs, we evaluated the coverage of several classes of dependency trees on standard data sets.", "labels": [], "entities": []}, {"text": "Following, we report in figures for the training sets of six languages used in the CoNLL-X shared task on dependency parsing).", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 106, "end_pos": 124, "type": "TASK", "confidence": 0.6672953069210052}]}, {"text": "As we can see, the O.n 6 / class of head-split trees has only slightly lower coverage on this data than the baseline class of well-nested dependency trees with block-degree at most 2.", "labels": [], "entities": []}, {"text": "The losses are up to 0.2 percentage points on five of the six languages, and 0.9 points on the Dutch data.", "labels": [], "entities": [{"text": "Dutch data", "start_pos": 95, "end_pos": 105, "type": "DATASET", "confidence": 0.9375381469726562}]}, {"text": "Our even more restricted O.n 5 / class of 1-inherit head-split trees has the same coverage as our O.n 6 / class, which is expected given the results of: Their O.n 6 / class of 1-inherit trees has exactly the same coverage as the baseline (and thereby more coverage than our O.n 6 / class).", "labels": [], "entities": []}, {"text": "Interestingly though, their O.n 5 / class of 'gap-minding' trees has a significantly smaller coverage than our O.n 5 / class.", "labels": [], "entities": []}, {"text": "We conclude that our class seems to strike a good balance between expressiveness and parsing complexity.", "labels": [], "entities": []}, {"text": "While the original motivation behind introducing the head-split property was to improve parsing complexity, it is interesting to also discuss the linguistic relevance of this property.", "labels": [], "entities": [{"text": "parsing", "start_pos": 88, "end_pos": 95, "type": "TASK", "confidence": 0.9621706604957581}]}, {"text": "A first inspection of the structures that violate the head-split property revealed that many such violations disappear if one ignores gaps caused by punctuation.", "labels": [], "entities": []}, {"text": "Some decisions about what nodes should function as the heads of punctuation symbols lead to more gaps than others.", "labels": [], "entities": []}, {"text": "In order to quantify the implications of this, we recomputed the coverage of the class of head-split trees on data sets where we first removed all punctuation.", "labels": [], "entities": []}, {"text": "The results are given in.", "labels": [], "entities": []}, {"text": "We restrict ourselves to the five native dependency treebanks used in the CoNLL-X shared task, ignoring treebanks that have been converted from phrase structure representations.", "labels": [], "entities": []}, {"text": "Arabic: Violations against the head-split property (relative to the class of well-nested trees with block-degree \u00c4 2) with and without punctuation.", "labels": [], "entities": []}, {"text": "We see that when we remove punctuation from the sentences, the number of violations against the head-split property at most decreases.", "labels": [], "entities": []}, {"text": "For Danish and Slovene, removing punctuation even has the effect that all well-nested dependency trees with blockdegree at most 2 become head-split.", "labels": [], "entities": []}, {"text": "Overall, the absolute numbers of violations are extremely smallexcept for Czech, where we have 139 violations with and 46 without punctuation.", "labels": [], "entities": [{"text": "Czech", "start_pos": 74, "end_pos": 79, "type": "DATASET", "confidence": 0.9075936079025269}]}, {"text": "A closer inspection of the Czech sentences reveals that many of these feature rather complex coordinations.", "labels": [], "entities": []}, {"text": "Indeed, out of the 46 violations in the punctuation-free data, only 9 remain when one ignores those with coordination.", "labels": [], "entities": []}, {"text": "For the remaining ones, we have not been able to identify any clear patterns.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: Coverage of various classes of dependency trees on the training sets used in the CoNLL-X shared task (WN2 =  well-nested, block-degree \u00c4 2; HS = head-split; 1I = 1-inherit; 0I = 0-inherit, 'gap-minding')", "labels": [], "entities": []}, {"text": " Table 2: Violations against the head-split property (relative  to the class of well-nested trees with block-degree \u00c4 2)  with and without punctuation.", "labels": [], "entities": [{"text": "Violations", "start_pos": 10, "end_pos": 20, "type": "TASK", "confidence": 0.9713647365570068}]}]}