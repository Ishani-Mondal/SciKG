{"title": [{"text": "Systematic Verb Stem Generation for Arabic *", "labels": [], "entities": [{"text": "Systematic Verb Stem Generation", "start_pos": 0, "end_pos": 31, "type": "TASK", "confidence": 0.554938055574894}]}], "abstractContent": [{"text": "Performing root-based searching, concordancing, and grammar checking in Arabic requires an efficient method for matching stems with roots and vice versa.", "labels": [], "entities": [{"text": "root-based searching", "start_pos": 11, "end_pos": 31, "type": "TASK", "confidence": 0.7000883519649506}, {"text": "grammar checking", "start_pos": 52, "end_pos": 68, "type": "TASK", "confidence": 0.7242902666330338}]}, {"text": "Such mapping is complicated by the hundreds of manifestations of the same root.", "labels": [], "entities": []}, {"text": "An algorithm based on the generation method used by native speakers is proposed hereto provide a mapping from roots to stems.", "labels": [], "entities": []}, {"text": "Verb roots are classified by the types of their radicals and the stems they generate.", "labels": [], "entities": []}, {"text": "Roots are moulded with morphosemantic and morphosyntactic patterns to generate stems modified for tense, voice, and mode, and affixed for different subject number, gender, and person.", "labels": [], "entities": []}, {"text": "The surface forms of applicable morphophonemic transformations are then derived using finite state machines.", "labels": [], "entities": []}, {"text": "This paper defines what is meant by 'stem', describes a stem generation engine that the authors developed, and outlines how a generated stem database is compiled for all Arabic verbs.", "labels": [], "entities": []}], "introductionContent": [{"text": "Morphological parsers and analysers for Arabic are required to dissect an input word and analyse its components in order to perform even the simplest of language processing tasks.", "labels": [], "entities": [{"text": "Morphological parsers", "start_pos": 0, "end_pos": 21, "type": "TASK", "confidence": 0.6985963732004166}]}, {"text": "The letters of the majority of Arabic words undergo transformations rendering their roots unrecognisable.", "labels": [], "entities": []}, {"text": "Without the root, it is difficult to identify a word's morphosemantic template, which is necessary for pinpointing its meaning, or its morphosyntactic pattern, which is essential for realising properties of the verb, such as its tense, voice, and mode, and its subject's number, gender, and person.", "labels": [], "entities": []}, {"text": "It is fundamental that an analyser be able to reverse the transformations a word undergoes in order to match the separated root and template with the untransformed ones in its database.", "labels": [], "entities": []}, {"text": "Unfortunately, defining rules to reverse transformations is not simple.", "labels": [], "entities": []}, {"text": "* The authors wish to thank the anonymous reviewers of this article as their suggestions have improved it significantly.", "labels": [], "entities": []}, {"text": "Research in Arabic morphology has primarily focused on morphological analysis rather than stem generation.", "labels": [], "entities": [{"text": "morphological analysis", "start_pos": 55, "end_pos": 77, "type": "TASK", "confidence": 0.7458464205265045}, {"text": "stem generation", "start_pos": 90, "end_pos": 105, "type": "TASK", "confidence": 0.7229916751384735}]}, {"text": "Sliding window algorithms) use an approximate string matching approach of input words against lists of roots, morphological patterns, prefixes, and suffixes.", "labels": [], "entities": []}, {"text": "Algebraic algorithms, on the other hand, assign binary values to morphological patterns and input words, then perform some simple algebraic operations to decompose a word into a stem and affixes.", "labels": [], "entities": []}, {"text": "Permutation algorithms) use the input word's letters to generate all possible trilateral or quadrilateral sequences without violation of the original order of the letters which is then compared with items in a dictionary of roots until a match is found.", "labels": [], "entities": []}, {"text": "Linguistic algorithms remove letters from an input word that belong to prefixes and suffixes and place the remainder of the word into a list.", "labels": [], "entities": []}, {"text": "The members of this list are then tested fora match with a dictionary of morphological patterns.", "labels": [], "entities": []}, {"text": "The primary drawback of many of these techniques is that they attempt to analyse using the information found in the letters of the input word.", "labels": [], "entities": []}, {"text": "When roots form words, root letters are often transformed by replacement, fusion, inversion, or deletion, and their positions are lost between stem and affix letters.", "labels": [], "entities": []}, {"text": "Most attempts use various closest match algorithms, which introduce a high level of uncertainty.", "labels": [], "entities": []}, {"text": "In this paper, we define Arabic verb stems such that root radicals, morphological patterns, and transformations are formally specified.", "labels": [], "entities": []}, {"text": "When stems are defined this way, input words can be mapped to correct stem definitions, ensuring that transformations match root radicals rather than estimate them.", "labels": [], "entities": []}, {"text": "Morphological transformation in our definition is largely built around finite state morphology) which assumes that these transformations can be represented in terms of regular relations between regular language forms.", "labels": [], "entities": [{"text": "Morphological transformation", "start_pos": 0, "end_pos": 28, "type": "TASK", "confidence": 0.8682859838008881}]}, {"text": "uses finite state transducers to encode the intersection between roots, morphological patterns, and the transformation rules that account for morphophonemic phenomena such as assimilation, deletion, epenthesis, metathesis, etc.", "labels": [], "entities": []}, {"text": "In this paper, a description of the database required for stem generation is presented, followed by a definition of stem generation.", "labels": [], "entities": [{"text": "stem generation", "start_pos": 58, "end_pos": 73, "type": "TASK", "confidence": 0.9377792477607727}, {"text": "stem generation", "start_pos": 116, "end_pos": 131, "type": "TASK", "confidence": 0.8683987557888031}]}, {"text": "Then the database together with the definition are used to implement a stem generation engine.", "labels": [], "entities": []}, {"text": "This is followed by a suggestion for optimising stem generation.", "labels": [], "entities": [{"text": "stem generation", "start_pos": 48, "end_pos": 63, "type": "TASK", "confidence": 0.8102237284183502}]}, {"text": "Finally, a database of generated stems is compiled in a format useful to various applications that the conclusion alludes to.", "labels": [], "entities": []}, {"text": "In the course of this paper, roots are represented in terms of their ordered sequence of three or four radicals in a set notation, i.e., {F,M,L,Q}.", "labels": [], "entities": []}, {"text": "When the capitalised Roman characters F, M, L, and Q are used, they represent a radical variable or placeholder.", "labels": [], "entities": []}, {"text": "They stand for First Radical (F), Medial Radical (M), Last Radical in a trilateral root (L), and Last Radical in a quadrilateral root (Q).", "labels": [], "entities": [{"text": "Last", "start_pos": 54, "end_pos": 58, "type": "METRIC", "confidence": 0.9510378241539001}]}, {"text": "For readability, all Arabic script used here is followed by an orthographic transliteration between parentheses, using the Buckwalter standard 1 . Buckwalter's orthographic transliteration provides a oneto-one character mapping from Arabic to US-ASCII characters.", "labels": [], "entities": [{"text": "Buckwalter standard 1", "start_pos": 123, "end_pos": 144, "type": "DATASET", "confidence": 0.959803064664205}]}, {"text": "With the exception of a few characters, this transliteration scheme attempts to match the sounds of the Roman letters to the Arabic ones.", "labels": [], "entities": []}, {"text": "The following list is a subset of the less obvious transliterations used here: (@), (Y), \u064e (a), \u0650 (i), \u064f (u), \u0652 (o), and \u0651 (~).", "labels": [], "entities": []}, {"text": "Arabic stems can be generated if lists of all roots and all morphological patterns are provided.", "labels": [], "entities": []}, {"text": "It is necessary that this data be coupled with a database that links the roots with their morphological patterns (or templates) so that only valid stems are generated for each root.", "labels": [], "entities": []}, {"text": "The roots in this database maybe moulded with morphosemantic and morphosyntactic patterns to generate intermediate form stems.", "labels": [], "entities": []}, {"text": "The stems may then be transformed into final surface forms with a number of specific morphophonemic rules using a finite state transducer compiling language.", "labels": [], "entities": []}, {"text": "shows a summary of the stem generation tables and their relations.", "labels": [], "entities": []}, {"text": "The RootsList table contains all verb roots from the popular Arabic dictionary, Al-Waseet, ( Stems generated with these tables are unaffixed stems.", "labels": [], "entities": []}, {"text": "The affix id field links each entry to a subject pronominal affix table that uses transformation rules generating affixed stems.", "labels": [], "entities": []}, {"text": "Although object pronominal affixes are not dealt within this paper, they are generally agglutinating in nature and therefore cause no morphophonemic alterations to a stem.", "labels": [], "entities": []}, {"text": "They can be added for generation or removed for analysis without affecting the stem at all.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}