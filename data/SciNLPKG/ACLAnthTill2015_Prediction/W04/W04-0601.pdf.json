{"title": [{"text": "Techniques for Text Planning with XSLT", "labels": [], "entities": [{"text": "Text Planning", "start_pos": 15, "end_pos": 28, "type": "TASK", "confidence": 0.8939579129219055}, {"text": "XSLT", "start_pos": 34, "end_pos": 38, "type": "TASK", "confidence": 0.49153921008110046}]}], "abstractContent": [{"text": "We describe an approach to text planning that uses the XSLT template-processing engine to create logical forms for an external surface realizer.", "labels": [], "entities": [{"text": "text planning", "start_pos": 27, "end_pos": 40, "type": "TASK", "confidence": 0.8428514301776886}]}, {"text": "Using a realizer that can process logical forms with embedded alternatives provides a substitute for backtrack-ing in the text-planning process.", "labels": [], "entities": []}, {"text": "This allows the text planner to combine the strengths of the AI-planning and template-based traditions in natural language generation.", "labels": [], "entities": [{"text": "natural language generation", "start_pos": 106, "end_pos": 133, "type": "TASK", "confidence": 0.698076864083608}]}], "introductionContent": [{"text": "In the traditional pipeline view of natural language generation), many steps involve converting between increasingly specific tree representations.", "labels": [], "entities": [{"text": "natural language generation", "start_pos": 36, "end_pos": 63, "type": "TASK", "confidence": 0.7067323128382365}]}, {"text": "As Wilcock (2001) points out, this sort of tree-to-tree transformation is a task to which XML-and particularly XSLT template processing-is particularly suited.", "labels": [], "entities": []}, {"text": "In this paper, we describe how we plan text by treating the XSLT processor as a top-down ruleexpanding planner that translates dialogue-manager specifications into logical forms to be sent to the OpenCCG text realizer.", "labels": [], "entities": [{"text": "OpenCCG text realizer", "start_pos": 196, "end_pos": 217, "type": "TASK", "confidence": 0.7472356756528219}]}, {"text": "XSLT is used to perform many text-planning tasks, including structuring and aggregating the content, performing lexical choice via the selection of logical-form templates, and generating multiple alternative realizations for messages where possible.", "labels": [], "entities": []}, {"text": "Using an external realizer at the end of the planning process provides two advantages.", "labels": [], "entities": []}, {"text": "First, we can use the realizer to deal with those aspects of surface realization that are difficult to implement in XSLT, but that the realizer is designed to handle (e.g., syntactic agreement via unification).", "labels": [], "entities": []}, {"text": "Second, we take advantage of OpenCCG's use of statistical language models by sending multiple alternative logical forms to the realizer, and having it make the final choice of surface form.", "labels": [], "entities": []}, {"text": "Allowing the text planner to produce multiple alternatives also obviates the need for backtracking, which is not something that is otherwise easily incorporated into the a system based on XSLT processing.", "labels": [], "entities": []}, {"text": "We have implemented this approach in two dialogue systems.", "labels": [], "entities": []}, {"text": "In this paper, we concentrate on how text is planned in the COMIC multimodal dialogue system (den.", "labels": [], "entities": []}, {"text": "Similar techniques are also used in the FLIGHTS spokendialogue system), which generates user-tailored descriptions and comparisons of flight itineraries.", "labels": [], "entities": [{"text": "FLIGHTS spokendialogue system", "start_pos": 40, "end_pos": 69, "type": "DATASET", "confidence": 0.8202578028043112}]}, {"text": "The rest of this paper is organized as follows: Section 2 gives an overview of the COMIC dialogue system and the OpenCCG text realizer.", "labels": [], "entities": [{"text": "COMIC dialogue system", "start_pos": 83, "end_pos": 104, "type": "DATASET", "confidence": 0.7236094872156779}, {"text": "OpenCCG text realizer", "start_pos": 113, "end_pos": 134, "type": "TASK", "confidence": 0.8024111191431681}]}, {"text": "Section 3 then shows how the COMIC text planner generates logical forms for the realizer from highlevel dialogue-manager specifications.", "labels": [], "entities": [{"text": "COMIC text planner", "start_pos": 29, "end_pos": 47, "type": "TASK", "confidence": 0.5564665695031484}]}, {"text": "Section 4 describes how the interface between the text planner and the realizer allows us to send multiple alternative logical forms, and shows the advantages of this approach.", "labels": [], "entities": []}, {"text": "Section 5 discusses related work, while Section 6 outlines the future plans for this work and gives some conclusions.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}