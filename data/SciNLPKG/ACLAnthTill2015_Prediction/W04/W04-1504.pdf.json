{"title": [{"text": "Axiomatization of Restricted Non-Projective Dependency Trees through Finite-State Constraints that Analyse Crossing Bracketings", "labels": [], "entities": []}], "abstractContent": [{"text": "In this paper, a representation for syntactic dependency trees (D-trees) is defined through a finite set of axioms.", "labels": [], "entities": []}, {"text": "The axiomatized representation constitutes a string that can encode non-projective D-trees of restricted structural complexity.", "labels": [], "entities": []}, {"text": "Upper-bounds for the structural complexity of these D-trees are fixed through the following new parameters: proper embracement depth , nested crossing depth \u00a1 , and non-projectivity depth \u00a2.", "labels": [], "entities": []}, {"text": "In the representation, syntactic dependencies between words are indicated with pairs of brackets.", "labels": [], "entities": []}, {"text": "When the brackets indicate dependencies that cross each other, the crossing pairs of brackets are distinguished by assigning separate colors to each of them.", "labels": [], "entities": []}, {"text": "These colors are allocated in away (Yli-Jyr\u00e4 and Nyk\u00e4nen, 2004) that ensures a unique representation for each D-tree, and entails that languages whose nested crossing depth is not bounded cannot be captured using a fixed number of colors.", "labels": [], "entities": []}, {"text": "Although the axiomatization is finite, it ensures that the represented dependency structures are trees.", "labels": [], "entities": []}, {"text": "This is possible because the described D-trees have bounded non-projectivity depth.", "labels": [], "entities": []}, {"text": "The axioms are also regular because proper embracement depth of represented D-trees is bounded.", "labels": [], "entities": []}, {"text": "Our representation suggests that extra strong gen-erative power can be squeezed out of finite-state equivalent grammars.", "labels": [], "entities": []}, {"text": "Bracketed D-tree representations (cf. annotated sentences) are structural descriptions that are assigned to their subsequences (cf. generated strings or yields of trees) where brackets and other special-purpose characters have been omitted.", "labels": [], "entities": []}], "introductionContent": [{"text": "Recently, many dependency syntactic parsers using finite-state machines (FSMs) have been presented ().", "labels": [], "entities": [{"text": "dependency syntactic parsers", "start_pos": 15, "end_pos": 43, "type": "TASK", "confidence": 0.7514947652816772}]}, {"text": "This article shows that a finite-state equivalent grammatical system is capable of assigning even non-projective syntactic dependency trees -or their representations -to terminal strings.", "labels": [], "entities": []}, {"text": "An appropriate representation is conveniently defined through a set of axioms presented in this work.", "labels": [], "entities": []}, {"text": "The complexity of the structures assigned is bounded by some special parameters.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}