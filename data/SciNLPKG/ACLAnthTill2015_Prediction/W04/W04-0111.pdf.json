{"title": [{"text": "Vi-xfst: A Visual Regular Expression Development Environment for Xerox Finite State Tool", "labels": [], "entities": []}], "abstractContent": [{"text": "This paper describes Vi-xfst, a visual interface and a development environment, for developing finite state language processing applications using the Xe-rox Finite State Tool, xfst.", "labels": [], "entities": []}, {"text": "Vi-xfst lets a user construct complex regular expressions via a drag-and-drop visual interface, treating simpler regular expressions as \"Lego Blocks.\"", "labels": [], "entities": []}, {"text": "It also enables the vi-sualization of the structure of the regular expression components, providing a bird's eye view of the overall system, enabling a user to easily understand and track the structural and functional relationships among the components involved.", "labels": [], "entities": []}, {"text": "Since the structure of a large regular expression (built in terms of other regular expressions) is now transparent , users can also interact with regular expressions at any level of detail, easily navigating among them for testing.", "labels": [], "entities": []}, {"text": "Vi-xfst also keeps track of dependencies among the regular expressions at a very fine-grained level.", "labels": [], "entities": []}, {"text": "So when a certain regular expression is modified as a result of testing, only the dependent regular expressions are recompiled resulting in an improvement in development process time, by avoiding file level recompiles which usually causes redundant regular expression compilations.", "labels": [], "entities": []}], "introductionContent": [{"text": "Finite state machines are widely used in many language processing applications to implement components such as tokenizers, morphological analyzers/generators, shallow parsers, etc.", "labels": [], "entities": []}, {"text": "Large scale finite state language processing systems built using tools such as the Xerox Finite State Tool, van Noord's Prolog-based tool), the AT&T weighted finite state machine suite () or the IN-TEX System, involve tensor hundreds of regular expressions which are compiled into finite state transducers that are interpreted by the underlying run-time engines of the (respective) tools.", "labels": [], "entities": [{"text": "AT&T weighted finite state machine suite", "start_pos": 144, "end_pos": 184, "type": "DATASET", "confidence": 0.6966322809457779}]}, {"text": "Developing such large scale finite state systems is currently done without much of a support for the \"software engineering\" aspects.", "labels": [], "entities": []}, {"text": "Regular expressions are constructed manually by the developer with a text-editor and then compiled, and the resulting transducers are tested.", "labels": [], "entities": []}, {"text": "Any modifications have to be done afterwards on the same text file(s) and the whole project has to be recompiled many times in a development cycle.", "labels": [], "entities": []}, {"text": "Visualization, an important aid in understanding and managing the complexity of any large scale system, is limited to displaying the finite state machine graph (e.g.,, or the visualization functionality in INTEX).", "labels": [], "entities": []}, {"text": "However, such visualization (sort of akin to visualizing the machine code of a program written in a high-level language) may not be very helpful, as developers rarely, and possibly never, think of such large systems in terms of states and transitions.", "labels": [], "entities": []}, {"text": "The relationship between the regular expressions and the finite state machines they are compiled into are opaque except for the simplest of regular expressions.", "labels": [], "entities": []}, {"text": "Further, the size of the resulting machines, in terms of states and transitions, is very large, usually in the thousands to hundreds of thousands states, if not more, making such visualization meaningless.", "labels": [], "entities": []}, {"text": "On the other hand, it may prove quite useful to visualize the structural components of a set of regular expressions and how they are put together, much in the spirit of visualizing the relationships amongst the data objects and/or modules in a large program.", "labels": [], "entities": []}, {"text": "However such visualization and other maintenance operations for large finite state projects spanning over many files, depend on tracking the structural relationships and dependencies among the regular expressions, which may prove hard or inconvenient when text-editors are the only development tool.", "labels": [], "entities": []}, {"text": "This paper presents a visual interface and development environment, Vi-xfst, for the Xerox Finite State Tool, xfst, one of the most sophisticated tools for constructing finite state language processing applications (.", "labels": [], "entities": []}, {"text": "Proceedings of the Workshop of the Vi-xfst enables incremental construction of complex regular expressions via a drag-and-drop interface, treating simpler regular expressions as \"Lego Blocks\".", "labels": [], "entities": []}, {"text": "Vi-xfst also enables the visualization of the structure of the regular expression components, so that the developer can have a bird's eye view of the overall system, easily understanding and tracking the relationships among the components involved.", "labels": [], "entities": []}, {"text": "Since the structure of a large regular expression (built in terms of other regular expressions) is now transparent, the developer can interact with regular expressions at any level of detail, easily navigating among them for testing and debugging.", "labels": [], "entities": []}, {"text": "Vi-xfst also keeps track of the dependencies among the regular expressions at a very fine-grained level.", "labels": [], "entities": []}, {"text": "So, when a certain regular expression is modified as a result of testing or debugging, only the dependent regular expressions are recompiled.", "labels": [], "entities": []}, {"text": "This results is an improvement in development time, by avoiding file level recompiles which usually causes substantial redundant regular expression compilations.", "labels": [], "entities": []}, {"text": "In the following sections, after a short overview of the Xerox xfst finite state machine development environment, we describe salient features of Vi-xfst through some simple examples.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}