{"title": [], "abstractContent": [{"text": "Taken abstractly, the two-level (Kimmo) morphological framework allows computationally difficult problems to arise.", "labels": [], "entities": []}, {"text": "For example, N + 1 small automata are sufficient to encode the Boolean satisfiability problem (SAT) for formulas in N variables.", "labels": [], "entities": [{"text": "Boolean satisfiability problem (SAT)", "start_pos": 63, "end_pos": 99, "type": "TASK", "confidence": 0.49443769951661426}]}, {"text": "However, the suspicion arises that natural-language problems may have a special structure-not shared with SAT-that is not directly captured in the two-level model.", "labels": [], "entities": []}, {"text": "In particular, the natural problems may generally have a modular and local nature that distinguishes them from more \"global\" SAT problems.", "labels": [], "entities": []}, {"text": "By exploiting this structure, it maybe possible to solve the natural problems by methods that do not involve combi-natorial search.", "labels": [], "entities": []}, {"text": "We have explored this possibility in a preliminary way by applying constraint propagation methods to Kimmo generation and recognition.", "labels": [], "entities": [{"text": "Kimmo generation", "start_pos": 101, "end_pos": 117, "type": "TASK", "confidence": 0.8902803659439087}]}, {"text": "Constraint propagation can succeed when the solution falls into place step-by-step through a chain of limited and local inferences, but it is insufficiently powerful to solve unnaturally hard SAT problems.", "labels": [], "entities": [{"text": "Constraint propagation", "start_pos": 0, "end_pos": 22, "type": "TASK", "confidence": 0.8606370985507965}]}, {"text": "Limited tests indicate that the constraint-propagation algorithm for Kimmo generation works for English, Turkish, and Warlpiri.", "labels": [], "entities": [{"text": "Kimmo generation", "start_pos": 69, "end_pos": 85, "type": "TASK", "confidence": 0.7844367325305939}]}, {"text": "When applied to a Kimmo system that encodes SAT problems, the algorithm succeeds on \"easy\" SAT problems but fails (as desired) on \"hard\" problems.", "labels": [], "entities": []}], "introductionContent": [{"text": "A formal computational model of a linguistic process makes explicit a set of assumptions about the nature of the process and the kind of information that it fundamentally involves.", "labels": [], "entities": []}, {"text": "At the same time, the formal model will ignore some details and introduce others that are only artifacts of formalization.", "labels": [], "entities": []}, {"text": "Thus, whenever the formal model and the actual process seem to differ markedly in properties, a natural assumption is that something has been missed in formalization --though it maybe difficult to say exactly what.", "labels": [], "entities": []}, {"text": "When the difference is one of worst-case complexity, with the formal framework allowing problems to arise that are too difficult to be consistent with the received difficulty of actual problems, one suspects that the natural computational task might have significant features that the formalized version does not capture and exploit effectively.", "labels": [], "entities": []}, {"text": "This paper introduces a constraint propagation method for \"two-lever' morphology that represents a preliminary attempt to exploit the features of local in]orrnation flow and linear separability that we believe are found in natural morphological-analysis problems.", "labels": [], "entities": []}, {"text": "Such a local character is not shared by more difficult computational problems such as Boolean satisfiability, though such problems can be encoded in the unrestricted two-level model.", "labels": [], "entities": []}, {"text": "Constraint propagation is less powerful than backtracking search, but does not allow possibilities to buildup in combinatorial fashion.", "labels": [], "entities": [{"text": "Constraint propagation", "start_pos": 0, "end_pos": 22, "type": "TASK", "confidence": 0.8072919845581055}]}], "datasetContent": [], "tableCaptions": []}