{"title": [{"text": "Using Higher-Order Logic Programming for Semantic Interpretation of Coordinate Constructs", "labels": [], "entities": [{"text": "Semantic Interpretation of Coordinate Constructs", "start_pos": 41, "end_pos": 89, "type": "TASK", "confidence": 0.7774644613265991}]}], "abstractContent": [{"text": "Many theories of semantic interpretation use A-term manipulation to composition-ally compute the meaning of a sentence.", "labels": [], "entities": [{"text": "semantic interpretation", "start_pos": 17, "end_pos": 40, "type": "TASK", "confidence": 0.7832410335540771}]}, {"text": "These theories are usually implemented in a language such as Prolog that can simulate A-term operations with first-order unification.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 61, "end_pos": 67, "type": "DATASET", "confidence": 0.9534386992454529}]}, {"text": "However, for some interesting cases, such as a Combinatory Categorial Grammar account of coordination constructs, this can only be done by obscuring the underlying linguistic theory with the \"tricks\" needed for implementation.", "labels": [], "entities": []}, {"text": "This paper shows how the use of abstract syntax permitted by higher-order logic programming allows an elegant implementation of the semantics of Combinatory Categorial Grammar , including its handling of coordination constructs.", "labels": [], "entities": [{"text": "Combinatory Categorial Grammar", "start_pos": 145, "end_pos": 175, "type": "TASK", "confidence": 0.61239626010259}]}], "introductionContent": [{"text": "Many theories of semantic interpretation use A-term manipulation to compositionally compute the meaning of a sentence.", "labels": [], "entities": [{"text": "semantic interpretation", "start_pos": 17, "end_pos": 40, "type": "TASK", "confidence": 0.7767800688743591}]}, {"text": "These theories are usually implemented in a language such as Prolog that can simulate A-term operations with first-order unification.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 61, "end_pos": 67, "type": "DATASET", "confidence": 0.9534386992454529}]}, {"text": "However, there are cases in which this can only be done by obscuring the underlying linguistic theory with the \"tricks\" needed for implementation.", "labels": [], "entities": []}, {"text": "For example, Combinatory Categorial Grammar (CCG)) is a theory of syntax and semantic interpretation that has the attractive characteristic of handling many coordination constructs that other theories cannot.", "labels": [], "entities": [{"text": "Combinatory Categorial Grammar (CCG))", "start_pos": 13, "end_pos": 50, "type": "TASK", "confidence": 0.8135355015595754}, {"text": "semantic interpretation", "start_pos": 77, "end_pos": 100, "type": "TASK", "confidence": 0.7638407945632935}]}, {"text": "While many aspects of CCG semantics can be reasonably simulated in first-order unification, the simulation breaks down on some of the most interesting cases that CCG can theoretically handle.", "labels": [], "entities": []}, {"text": "The problem in general, and for CCG in particular, is that the implementation language does not have sufficient expressive power to allow a more direct encoding.", "labels": [], "entities": []}, {"text": "The solution given in this paper is to show how advances in logic programming allow the implementation of semantic theories in a very direct and natural way, using CCG as a case study.", "labels": [], "entities": []}, {"text": "We begin by briefly illustrating why first-order unification is inadequate for some coordination constructs, and then review two proposed solutions.", "labels": [], "entities": [{"text": "first-order unification", "start_pos": 37, "end_pos": 60, "type": "TASK", "confidence": 0.6964455246925354}]}, {"text": "The sentence in (la) usually has the logical form (LF) in (lb).", "labels": [], "entities": [{"text": "logical form (LF)", "start_pos": 37, "end_pos": 54, "type": "METRIC", "confidence": 0.6414399981498718}]}, {"text": "(la) John and Bill run.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}