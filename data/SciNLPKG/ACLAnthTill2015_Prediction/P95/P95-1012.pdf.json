{"title": [{"text": "Compiling HPSG type constraints into definite clause programs", "labels": [], "entities": []}], "abstractContent": [{"text": "We present anew approach to HPSG processing: compiling HPSG grammars expressed as type constraints into definite clause programs.", "labels": [], "entities": [{"text": "HPSG processing", "start_pos": 28, "end_pos": 43, "type": "TASK", "confidence": 0.9230627715587616}]}, {"text": "This provides a clear and computationally useful correspondence between linguistic theories and their implementation.", "labels": [], "entities": []}, {"text": "The compiler performs off-line constraint inheritance and code optimization.", "labels": [], "entities": [{"text": "off-line constraint inheritance", "start_pos": 22, "end_pos": 53, "type": "TASK", "confidence": 0.6985514362653097}]}, {"text": "As a result, we are able to efficiently process with HPSG grammars without haviog to hand-translate them into definite clause or phrase structure based systems .", "labels": [], "entities": []}], "introductionContent": [{"text": "The HPSG architecture as defined in) (henceforth HPSGII) is being used by an increasing number of linguists, since the formally well-defined framework allows fora rigid and explicit formalization of a linguistic theory.", "labels": [], "entities": []}, {"text": "At the same time, the feature logics which provide the formal foundation of HPSGII have been used as basis for several NLP systems, such as ALE, CUF, Troll or TFS ().", "labels": [], "entities": [{"text": "HPSGII", "start_pos": 76, "end_pos": 82, "type": "DATASET", "confidence": 0.8985312581062317}]}, {"text": "These systems are -at least partly -intended as computational environments for the implementation of HPSG grammars.", "labels": [], "entities": []}, {"text": "HPSG linguists use the description language of the logic to express their theories in the form of implicative constraints.", "labels": [], "entities": [{"text": "HPSG", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.8789147138595581}]}, {"text": "On the other hand, most of the computational setups only allow feature descriptions as extra constraints with a phrase structure or definite clause based language.", "labels": [], "entities": []}, {"text": "1 From a computational point of view the latter setup has several advantages.", "labels": [], "entities": []}, {"text": "It provides access to the pool of work done in the *The authors are listed alphabetically.", "labels": [], "entities": []}, {"text": "1One exception is the TFS system.", "labels": [], "entities": [{"text": "1One", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.844494104385376}, {"text": "TFS system", "start_pos": 22, "end_pos": 32, "type": "DATASET", "confidence": 0.8879930377006531}]}, {"text": "However, the possibility to express recursive relations on the level of the description language leads to serious control problems in that system.", "labels": [], "entities": []}, {"text": "area of natural language processing, e.g., to efficient control strategies for the definite clause level based on tabelling methods like Earley deduction, or different parsing strategies in the phrase structure setup.", "labels": [], "entities": [{"text": "natural language processing", "start_pos": 8, "end_pos": 35, "type": "TASK", "confidence": 0.6841837962468466}]}, {"text": "The result is a gap between the description language theories of HPSG linguists and the definite clause or phrase structure based NLP systems provided to implement these theories.", "labels": [], "entities": []}, {"text": "Most grammars currently implemented therefore have no clear correspondence to the linguistic theories they originated from.", "labels": [], "entities": []}, {"text": "To be able to use implemented grammars to provide feedback fora rigid and complete formalization of linguistic theories, a clear and computationMly useful correspondence has to be established.", "labels": [], "entities": []}, {"text": "This link is also needed to stimulate further development of the computational systems.", "labels": [], "entities": []}, {"text": "Finally, an HPSGII style setup is also interesting to model from a software engineering point of view, since it permits a modular development and testing of the grammar.", "labels": [], "entities": []}, {"text": "The purpose of this paper is to provide the desired link, i.e., to show how a HPSG theory formulated as implicative constraints can be modelled on the level of the relational extension of the constraint language.", "labels": [], "entities": []}, {"text": "More specifically, we define a compilation procedure which translates the type constraints of the linguistic theory into definite clauses runnable in systems such as Troll, ALE, or CUF.", "labels": [], "entities": []}, {"text": "Thus, we perform constraint inheritance and code optimization off-line.", "labels": [], "entities": [{"text": "constraint inheritance", "start_pos": 17, "end_pos": 39, "type": "TASK", "confidence": 0.7296872735023499}]}, {"text": "This results in a considerable efficiency gain over a direct on-line treatment of type constraints as, e.g., in TFS.", "labels": [], "entities": []}, {"text": "The structure of the paper is as follows: A short discussion of the logical setup for HPSGII provides the necessary formal background and terminology.", "labels": [], "entities": [{"text": "HPSGII", "start_pos": 86, "end_pos": 92, "type": "DATASET", "confidence": 0.9065854549407959}]}, {"text": "Then the two possibilities for expressing a theoryusing the description language as in HPSGII or the relational level as in the computational architectures -are introduced.", "labels": [], "entities": [{"text": "HPSGII", "start_pos": 87, "end_pos": 93, "type": "DATASET", "confidence": 0.9398340582847595}]}, {"text": "The third section provides a simple picture of how HPSGII theories can be modelled on the relational level.", "labels": [], "entities": []}, {"text": "This simple picture is then refined in the fourth section, where the compilation procedure and its implementation is discussed.", "labels": [], "entities": []}, {"text": "A small example grammar is provided in the appendix.", "labels": [], "entities": []}, {"text": "A HPSG grammar consists of two components: the declaration of the structure of the domain of linguistic objects in a signature (consisting of the type hierarchy and the appropriateness conditions) and the formulation of constraints on that domain.", "labels": [], "entities": []}, {"text": "The signature introduces the structures the linguist wants to talk about.", "labels": [], "entities": []}, {"text": "The theory the linguist proposes distinguishes between those objects in a domain which are part of the natural language described, and those which are not.", "labels": [], "entities": []}, {"text": "HPSGII gives a closed world interpretation to the type hierarchy: every object is of exactly one minimal (most specific) type.", "labels": [], "entities": [{"text": "HPSGII", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.9663903117179871}]}, {"text": "This implies that every object in the denotation of a non-minimal type is also described by at least one of its subtypes.", "labels": [], "entities": []}, {"text": "Our compilation procedure will adhere to this interpretation.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}