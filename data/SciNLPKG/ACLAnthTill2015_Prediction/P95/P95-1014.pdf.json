{"title": [], "abstractContent": [{"text": "Some linguistic constraints cannot be effectively resolved during parsing at the location in which they are most naturally introduced.", "labels": [], "entities": []}, {"text": "This paper shows how constraints can be propagated in a memoizing parser (such as a chart parser) in much the same way that variable bindings are, providing a general treatment of constraint coroutining in memoization.", "labels": [], "entities": []}, {"text": "Prolog code fora simple application of our technique to Bouma and van Noord's (1994) categorial grammar analysis of Dutch is provided.", "labels": [], "entities": [{"text": "categorial grammar analysis of Dutch", "start_pos": 85, "end_pos": 121, "type": "TASK", "confidence": 0.7268424153327941}]}], "introductionContent": [{"text": "As the examples discussed below show, some linguistic constraints cannot be effectively resolved during parsing at the location in which they are most naturally introduced.", "labels": [], "entities": []}, {"text": "Ina backtracking parser, a natural way of dealing with such constraints is to coroutine them with the other parsing processes, reducing them only when the parse tree is sufficiently instantiated so that they can be deterministically resolved.", "labels": [], "entities": []}, {"text": "Such parsers are particularly easy to implement in extended versions of Prolog (such as ProloglI, SICStus Prolog and Eclipse) which have such coroutining facilities built-in.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 72, "end_pos": 78, "type": "DATASET", "confidence": 0.9243735074996948}, {"text": "ProloglI", "start_pos": 88, "end_pos": 96, "type": "DATASET", "confidence": 0.9682198166847229}]}, {"text": "Like all backtracking parsers, they can exhibit non-termination and exponential parse times in situations where memoizing parsers (such as chart parsers) can terminate in polynomial time.", "labels": [], "entities": []}, {"text": "Unfortunately, the coroutining approach, which requires that constraints share variables in order to communicate, seems to be incompatible with standard memoization techniques, which *This research was largely conducted at the Institut ffir maschinelle Sprachverarbeitung in Stuttgart.", "labels": [], "entities": []}, {"text": "We would like to thank Andreas Eisele, Pascal van Hentenryck, Martin Kay, Fernando Pereira, Edward Stabler and our colleagues at the Institut ffir maschinelle Sprachverarbeitung for helpful comments and suggestions.", "labels": [], "entities": []}, {"text": "All remaining errors are our own.", "labels": [], "entities": [{"text": "errors", "start_pos": 14, "end_pos": 20, "type": "METRIC", "confidence": 0.9537991285324097}]}, {"text": "The Prolog code presented in this paper is available via anonymous ftp from Ix.cog.brown.edu as/pub/lernrna.tar.Z require systematic variable-renaming (i.e., copying) in order to avoid spurious variable binding.", "labels": [], "entities": [{"text": "Ix.cog.brown.edu", "start_pos": 76, "end_pos": 92, "type": "DATASET", "confidence": 0.9506456851959229}]}, {"text": "For generality, conciseness and precision, we formalize our approach to memoization and constraints within general theory of Constraint Logic Programming (CLP), but we discuss how our method can be applied to mote standard chart parsing as well.", "labels": [], "entities": [{"text": "precision", "start_pos": 32, "end_pos": 41, "type": "METRIC", "confidence": 0.9991447925567627}, {"text": "mote standard chart parsing", "start_pos": 209, "end_pos": 236, "type": "TASK", "confidence": 0.6424534246325493}]}, {"text": "This paper extends our previous work reported in and by generalizing those methods to arbitrary constraint systems (including feature-structure constraints), even though for reasons of space such systems are not discussed here.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}