{"title": [{"text": "A Fast and Portable Realizer for Text Generation Systems", "labels": [], "entities": [{"text": "Text Generation", "start_pos": 33, "end_pos": 48, "type": "TASK", "confidence": 0.8117309212684631}]}], "abstractContent": [], "introductionContent": [{"text": "Systems that generate natural language output as part of their interaction with a user have become a major area of research and development.", "labels": [], "entities": []}, {"text": "Typically, natural language generation is divided into several phases, namely text planning (determining output content and structure), sentence planning (determining abstract target language resources to express content, such as lexical items and syntactic constructions), and realization (producing the final text string).", "labels": [], "entities": [{"text": "natural language generation", "start_pos": 11, "end_pos": 38, "type": "TASK", "confidence": 0.709939161936442}, {"text": "sentence planning", "start_pos": 136, "end_pos": 153, "type": "TASK", "confidence": 0.7023771107196808}]}, {"text": "While text and sentence planning may sometimes be combined, a realizer is almost always included as a distinct module.", "labels": [], "entities": []}, {"text": "It is in the realizer that knowledge about the target language resides (syntax, morphology, idiosyncratic properties of lexical items).", "labels": [], "entities": []}, {"text": "Realization is fairly well understood both from a linguistic and from a computational point of view, and therefore most projects that use text generation do not include the realizer in the scope of their research.", "labels": [], "entities": [{"text": "text generation", "start_pos": 138, "end_pos": 153, "type": "TASK", "confidence": 0.7222244143486023}]}, {"text": "Instead, such projects use an off-the-shelf realizer, among which PENMAN and SURGE/FUF ( are probably the most popular.", "labels": [], "entities": [{"text": "PENMAN", "start_pos": 66, "end_pos": 72, "type": "METRIC", "confidence": 0.6508520841598511}, {"text": "FUF", "start_pos": 83, "end_pos": 86, "type": "METRIC", "confidence": 0.628261387348175}]}, {"text": "In this technical note and demo we present anew off-theshelf realizer, REALPRO.", "labels": [], "entities": [{"text": "REALPRO", "start_pos": 71, "end_pos": 78, "type": "METRIC", "confidence": 0.944092333316803}]}, {"text": "REALPRO is derived from previous systems), but represents anew design and a completely new implementation.", "labels": [], "entities": [{"text": "REALPRO", "start_pos": 0, "end_pos": 7, "type": "METRIC", "confidence": 0.9003434777259827}]}, {"text": "REALPRO has the following characteristics, which we believe are unique in this combination: \u2022 REALPRO is implemented in C++.", "labels": [], "entities": [{"text": "REALPRO", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.6408835649490356}]}, {"text": "It is therefore both fast and portable cross-platform.", "labels": [], "entities": []}, {"text": "\u2022 REALPRO can be run as a standalone server, and has C++ and Java APIs.", "labels": [], "entities": [{"text": "REALPRO", "start_pos": 2, "end_pos": 9, "type": "METRIC", "confidence": 0.8168898224830627}]}, {"text": "\u2022 The input to REALPRO is based on syntactic dependency (roughly, predicate-argument and predicate-modifier structure).", "labels": [], "entities": [{"text": "REALPRO", "start_pos": 15, "end_pos": 22, "type": "TASK", "confidence": 0.39912477135658264}]}, {"text": "\u2022 Syntactic and lexical knowledge about the target language is expressed in ASCII files which are interpreted at run-time.", "labels": [], "entities": []}, {"text": "It can easily be updated.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}