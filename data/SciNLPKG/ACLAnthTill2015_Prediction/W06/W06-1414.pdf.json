{"title": [{"text": "Generic Querying of Relational Databases using Natural Language Generation Techniques", "labels": [], "entities": [{"text": "Generic Querying of Relational Databases", "start_pos": 0, "end_pos": 40, "type": "TASK", "confidence": 0.837459659576416}]}], "abstractContent": [{"text": "This paper presents a method of querying databases by means of a natural language-like interface which offers the advantage of minimal configuration necessary for porting the system.", "labels": [], "entities": []}, {"text": "The method allows us to first automatically infer the set of possible queries that can apply to a given database, automatically generate a lexicon and grammar rules for expressing these queries, and then provide users with an interface that allows them to pose these queries in natural language without the well-known limitations of most natural language interfaces to databases.", "labels": [], "entities": []}, {"text": "The way the queries are inferred and constructed means that semantic translation is performed with perfect reliability.", "labels": [], "entities": [{"text": "semantic translation", "start_pos": 60, "end_pos": 80, "type": "TASK", "confidence": 0.7947043776512146}]}], "introductionContent": [{"text": "Natural Language interfaces to databases (hereafter NLIDBs ) have long held an appeal to both the databases and NLP communities.", "labels": [], "entities": []}, {"text": "However, difficulties associated with text processing, semantic encoding, translation to database querying languages and, above all, portability, have meant that, despite recent advances in the field, NLIDBs are still more a research topic than a commercial solution.", "labels": [], "entities": [{"text": "semantic encoding", "start_pos": 55, "end_pos": 72, "type": "TASK", "confidence": 0.7351228594779968}]}, {"text": "We report hereon a generic method we have developed to automatically infer the set of possible queries that can apply to a given database, and an interface that allows users to pose these questions in natural language but without the previously mentioned drawbacks of most NLIDBs . Our work is substantially different from previous research in that it does not require the user to input free text queries, but it assists the user in composing query through a natural language-like interface.", "labels": [], "entities": []}, {"text": "Consequently, the necessity for syntactic parsing and semantic interpretation is eliminated.", "labels": [], "entities": [{"text": "syntactic parsing", "start_pos": 32, "end_pos": 49, "type": "TASK", "confidence": 0.7777978479862213}, {"text": "semantic interpretation", "start_pos": 54, "end_pos": 77, "type": "TASK", "confidence": 0.7526733875274658}]}, {"text": "Also, since users are in control of the meaning of the query they compose, ambiguity is not an issue.", "labels": [], "entities": []}, {"text": "Our work builds primarily on two directions of research: conceptual authoring of queries via WYSIWYM interfaces, as described in section 2, and NLIDB portability research.", "labels": [], "entities": []}, {"text": "From the perspective of the query composing technique, our system resembles early menu-based techniques, such as, NL-Menu ( and its more recent re-development LingoLogic ().", "labels": [], "entities": [{"text": "query composing", "start_pos": 28, "end_pos": 43, "type": "TASK", "confidence": 0.7285259962081909}]}, {"text": "This resemblance is however only superficial.", "labels": [], "entities": []}, {"text": "Our query editing interface employs natural language generation techniques for rendering queries in fluent language; it also allows the editing of the semantic content of a query rather than its surface form, which allows seamless translation to SQL . As in (), our system makes use of a semantic graph as a mean of representing the database model.", "labels": [], "entities": []}, {"text": "However, whilst use the Semantic Graph as a resource for providing and interpreting keywords in the input query, we use this information as the main means of automatically generating query frames.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}