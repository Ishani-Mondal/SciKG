{"title": [{"text": "Towards an Alternative Implementation of NXT's Query Language via XQuery", "labels": [], "entities": [{"text": "XQuery", "start_pos": 66, "end_pos": 72, "type": "DATASET", "confidence": 0.6089223623275757}]}], "abstractContent": [{"text": "The NITE Query Language (NQL) has been used successfully for analysis of a number of heavily cross-annotated data sets, and users especially value its elegance and flexibility.", "labels": [], "entities": [{"text": "NITE Query Language (NQL)", "start_pos": 4, "end_pos": 29, "type": "DATASET", "confidence": 0.6972484687964121}]}, {"text": "However, when using the current implementation, many of the more complicated queries that users have formulated must be run in batch mode.", "labels": [], "entities": []}, {"text": "For a re-implementation, we require the query processor to be capable of handling large amounts of data at once, and work quickly enough for on-line data analysis even when used on complete corpora.", "labels": [], "entities": []}, {"text": "Early results suggest that the most promising implementation strategy is one that involves the use of XQuery on a multiple file data representation that uses the structure of individual XML files to mirror tree structures in the data, with redundancy where a data node has multiple parents in the underlying data object model.", "labels": [], "entities": []}], "introductionContent": [{"text": "Computational linguistics increasingly requires data sets which have been annotated for many different phenomena which relate independently to the base text or set of signals, segmenting the data in different, conflicting ways.", "labels": [], "entities": [{"text": "Computational linguistics", "start_pos": 0, "end_pos": 25, "type": "TASK", "confidence": 0.87071493268013}]}, {"text": "The NITE XML Toolkit, or NXT (, has been used successfully on a range of text, spoken language, and multimodal corpora to provide and work with data of this character.", "labels": [], "entities": [{"text": "NITE XML Toolkit", "start_pos": 4, "end_pos": 20, "type": "DATASET", "confidence": 0.8012006282806396}]}, {"text": "Because the original motivation behind it was to makeup fora dearth of tools that could be used to hand-annotate and display such data, the initial implementation of data search was required to work well on one data observation at a time -that is, one text, dialogue, or other language event -and to be usable but slow on multiple observations.", "labels": [], "entities": []}, {"text": "However, the clear and flexible design of NXT's query language, NQL), makes it attractive for larger-scale data analysis, and a number of users have up-translated existing data for the express purpose of improving their search options.", "labels": [], "entities": [{"text": "data analysis", "start_pos": 107, "end_pos": 120, "type": "TASK", "confidence": 0.7899139523506165}]}, {"text": "We are now in the process of devising a strategy for re-implementing the NQL processor to serve the needs of this class of user better.", "labels": [], "entities": [{"text": "NQL processor", "start_pos": 73, "end_pos": 86, "type": "DATASET", "confidence": 0.9122324287891388}]}, {"text": "In this paper, we describe our requirements for the new implementation, outline the various implementation options that we have, and give early results suggesting how well they meet our requirements.", "labels": [], "entities": []}, {"text": "NQL is arguably the most mature of the current specialpurpose facilities for searching data sets where the data is not structured as a singletree, and therefore experiences with implementing it are likely to provide lessons for search facilities that are still to come.", "labels": [], "entities": [{"text": "NQL", "start_pos": 0, "end_pos": 3, "type": "DATASET", "confidence": 0.8993302583694458}]}], "datasetContent": [], "tableCaptions": []}