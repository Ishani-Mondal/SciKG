{"title": [{"text": "A generation-oriented workbench for Performance Grammar: Capturing linear order variability in German and Dutch", "labels": [], "entities": [{"text": "Performance Grammar", "start_pos": 36, "end_pos": 55, "type": "TASK", "confidence": 0.8024746477603912}, {"text": "Capturing linear order variability", "start_pos": 57, "end_pos": 91, "type": "TASK", "confidence": 0.8196851909160614}]}], "abstractContent": [{"text": "We describe a generation-oriented workbench for the Performance Grammar (PG) formalism, highlighting the treatment of certain word order and movement constraints in Dutch and German.", "labels": [], "entities": []}, {"text": "PG enables a simple and uniform treatment of a heterogeneous collection of linear order phenomena in the domain of verb constructions (variably known as Cross-serial Dependencies , Verb Raising, Clause Union , Extraposition, Third Construction, Particle Hopping, etc.).", "labels": [], "entities": [{"text": "Verb Raising", "start_pos": 181, "end_pos": 193, "type": "TASK", "confidence": 0.6845112293958664}, {"text": "Clause Union", "start_pos": 195, "end_pos": 207, "type": "TASK", "confidence": 0.7530732154846191}, {"text": "Particle Hopping", "start_pos": 245, "end_pos": 261, "type": "TASK", "confidence": 0.8115640878677368}]}, {"text": "The central data structures enabling this feature are clausal \"topologies\": one-dimensional arrays associated with clauses, whose cells (\"slots\") provide landing sites for the constituents of the clause.", "labels": [], "entities": []}, {"text": "Movement operations are enabled by unification of lateral slots of topologies at adjacent levels of the clause hierarchy.", "labels": [], "entities": []}, {"text": "The PGW generator assists the grammar developer in testing whether the implemented syntactic knowledge allows all and only the well-formed permutations of constituents.", "labels": [], "entities": []}], "introductionContent": [{"text": "Workbenches for natural-language grammar formalisms typically provide a parser to test whether given sentences are treated adequately -D-PATR for Unification Grammar or XTAG for Tree-Adjoining Grammars) are early examples.", "labels": [], "entities": [{"text": "D-PATR", "start_pos": 135, "end_pos": 141, "type": "METRIC", "confidence": 0.925118088722229}]}, {"text": "However, a parser is not a convenient tool for checking whether the current grammar implementation licenses all and only the strings qualifying as well-formed expressions of a given input.", "labels": [], "entities": []}, {"text": "Sentence generators that tryout all possible combinations of grammar rules applicable to the current input, are better suited.", "labels": [], "entities": []}, {"text": "Few workbenches in the literature come with such a facility.", "labels": [], "entities": []}, {"text": "LinGO), for Head-Driven Phrase Structure Grammar, provides a generator in addition to a parser.", "labels": [], "entities": [{"text": "LinGO", "start_pos": 0, "end_pos": 5, "type": "DATASET", "confidence": 0.9090837836265564}, {"text": "Head-Driven Phrase Structure Grammar", "start_pos": 12, "end_pos": 48, "type": "TASK", "confidence": 0.6599845811724663}]}, {"text": "For Tree Adjoining Grammars, several workbenches with generation components have been built: InTeGenInE) is a recent example.", "labels": [], "entities": []}, {"text": "Finetuning the grammar such that it neither over-nor undergenerates, is a major problem for semi-free word order languages (e.g., German; cf.).", "labels": [], "entities": []}, {"text": "Working out a satisfactory solution to this problem is logically prior to designing a generator capable of selecting, from the set of all possible paraphrases, those that sound \"natural,\" i.e., the ones human speakers/writers would choose in the situation at hand (cf..", "labels": [], "entities": []}, {"text": "Verb constructions in German and Dutch exhibit extremely intricate word order patterns (cf..", "labels": [], "entities": []}, {"text": "One of the factors contributing to this complexity is the phenomenon of clause union, which allows constituents of a complement clause to be interspersed between those of the dominating clause.", "labels": [], "entities": [{"text": "clause union", "start_pos": 72, "end_pos": 84, "type": "TASK", "confidence": 0.7021344304084778}]}, {"text": "The resulting sequences exhibit, among other things, cross-serial dependencies and clause-final verb clusters.", "labels": [], "entities": []}, {"text": "Further complications arise from all sorts of 'movement' phenomena such as fronting, extraction, dislocation, extraposition, scrambling, etc.", "labels": [], "entities": [{"text": "fronting, extraction", "start_pos": 75, "end_pos": 95, "type": "TASK", "confidence": 0.7209538122018179}]}, {"text": "Given the limited space available, we cannot describe the Performance Grammar (PG) formalism and the linearization algorithm that enables generating abroad range of linear order phenomena in Dutch, German, and English verb constructions.", "labels": [], "entities": []}, {"text": "Instead, we refer to , and.", "labels": [], "entities": []}, {"text": "Here, we present the generation-oriented PG Workbench (PGW), which assists grammar developers, among other things, in testing whether the implemented syntactic and lexical knowledge allows all and only well-formed permutations.", "labels": [], "entities": []}, {"text": "In Section 2, we describe PG's topologybased linearizer implemented in the PGW generator, whose software design is sketched in Section 3.", "labels": [], "entities": [{"text": "PGW generator", "start_pos": 75, "end_pos": 88, "type": "DATASET", "confidence": 0.9069893658161163}]}, {"text": "Section 4 shows the PGW at work and draws some conclusions.", "labels": [], "entities": [{"text": "PGW", "start_pos": 20, "end_pos": 23, "type": "DATASET", "confidence": 0.8032852411270142}]}], "datasetContent": [], "tableCaptions": []}