{"title": [], "abstractContent": [{"text": "LR parsing is a popular parsing strategy for variants of Context-Free Grammar (CFG).", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 0, "end_pos": 10, "type": "TASK", "confidence": 0.7255072295665741}]}, {"text": "It has also been used for mildly context-sensitive formalisms, such as Tree-Adjoining Grammar.", "labels": [], "entities": []}, {"text": "In this paper, we present the first LR-style parsing algorithm for Linear Context-Free Rewriting Systems (LCFRS), a mildly context-sensitive extension of CFG which has received considerable attention in the last years.", "labels": [], "entities": [{"text": "LR-style parsing", "start_pos": 36, "end_pos": 52, "type": "TASK", "confidence": 0.48973093926906586}, {"text": "Linear Context-Free Rewriting Systems (LCFRS)", "start_pos": 67, "end_pos": 112, "type": "TASK", "confidence": 0.7666059817586627}]}], "introductionContent": [{"text": "LR parsing is an incremental shift-reduce parsing strategy in which the transitions between parser states are guided by an automaton which is compiled offline.", "labels": [], "entities": [{"text": "LR parsing", "start_pos": 0, "end_pos": 10, "type": "TASK", "confidence": 0.721724659204483}]}, {"text": "LR parsers were first introduced for deterministic context-free languages and later generalized to context-free languages and tree-adjoining languages.", "labels": [], "entities": []}, {"text": "Linear Context-Free Rewriting System (LCFRS) ( is an immediate extension of CFG in which each non-terminal can cover more than one continuous span of the input string.", "labels": [], "entities": [{"text": "Linear Context-Free Rewriting System (LCFRS)", "start_pos": 0, "end_pos": 44, "type": "TASK", "confidence": 0.6658537813595363}]}, {"text": "LCFRS and equivalent formalisms have been used for the modeling of discontinuous constituents (Maier and Lichte, 2011) and nonprojective dependencies, as well as for data-driven parsing of such structures).", "labels": [], "entities": []}, {"text": "They have also been used for modeling non-concatenative morphology), for grammar engineering, and for modeling alignments in machine translation.", "labels": [], "entities": [{"text": "grammar engineering", "start_pos": 73, "end_pos": 92, "type": "TASK", "confidence": 0.9120269119739532}, {"text": "machine translation", "start_pos": 125, "end_pos": 144, "type": "TASK", "confidence": 0.7459698021411896}]}, {"text": "To our knowledge, so far, no LR strategy for LCFRS has been presented in the literature.", "labels": [], "entities": [{"text": "LR", "start_pos": 29, "end_pos": 31, "type": "TASK", "confidence": 0.9725439548492432}]}, {"text": "In this paper, we present an LR-style parser for LCFRS.", "labels": [], "entities": []}, {"text": "It is based on the incremental parsing strategy implemented by Thread Automata (Villemonte de la).", "labels": [], "entities": [{"text": "Thread Automata (Villemonte de la)", "start_pos": 63, "end_pos": 97, "type": "DATASET", "confidence": 0.802522327218737}]}, {"text": "The remainder of the article is structured as follows.", "labels": [], "entities": []}, {"text": "In the following section, we introduce LCFRS and thread automata.", "labels": [], "entities": []}, {"text": "Section 3 presents the algorithm along an example.", "labels": [], "entities": []}, {"text": "In particular, section 3.2 gives the algorithms for automaton and parse table constructions, and section 3.3 presents the parsing algorithm.", "labels": [], "entities": [{"text": "parse table constructions", "start_pos": 66, "end_pos": 91, "type": "TASK", "confidence": 0.7204847534497579}]}, {"text": "Section 4 concludes the article.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}