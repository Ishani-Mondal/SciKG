{"title": [], "abstractContent": [{"text": "Syntactic linearization algorithms take a bag of input words and a set of optional constraints , and construct an output sentence and its syntactic derivation simultaneously.", "labels": [], "entities": []}, {"text": "The search problem is NP-hard, and the current best results are achieved by bottom-up best-first search.", "labels": [], "entities": []}, {"text": "One drawback of the method is low efficiency; and there is no theoretical guarantee that a full sentence can be found within bounded time.", "labels": [], "entities": []}, {"text": "We propose an alternative algorithm that constructs output structures from left to right using beam-search.", "labels": [], "entities": []}, {"text": "The algorithm is based on incremental parsing algorithms.", "labels": [], "entities": []}, {"text": "We extend the transition system so that word ordering is performed in addition to syntactic parsing, resulting in a linearization system that runs in guaranteed quadratic time.", "labels": [], "entities": [{"text": "word ordering", "start_pos": 40, "end_pos": 53, "type": "TASK", "confidence": 0.7664793133735657}, {"text": "syntactic parsing", "start_pos": 82, "end_pos": 99, "type": "TASK", "confidence": 0.7894890010356903}]}, {"text": "In standard evaluations, our system runs an order of magnitude faster than a state-of-the-art baseline using best-first search, with improved accuracies.", "labels": [], "entities": []}], "introductionContent": [{"text": "Linearization is the task of ordering a bag of words into a grammatical and fluent sentence.", "labels": [], "entities": []}, {"text": "Syntaxbased linearization algorithms generate a sentence along with its syntactic structure.", "labels": [], "entities": []}, {"text": "Depending on how much syntactic information is available as inputs, recent work on syntactic linearization can be classified into free word ordering (), which orders a bag of words without syntactic constraints, full tree linearization (), which orders a bag of words given a full-spanning syntactic tree, and partial tree linearization, which orders a bag of words given some syntactic relations between them as partial constraints.", "labels": [], "entities": []}, {"text": "The search space for syntactic linearization is huge.", "labels": [], "entities": []}, {"text": "Even with a full syntax tree being available as constraints, permutation of nodes on each level is an NP-hard problem.", "labels": [], "entities": []}, {"text": "As a result, heuristic search has been adopted by most previous work, and the best results have been achieved by a time-constrained best-first search framework).", "labels": [], "entities": [{"text": "heuristic search", "start_pos": 13, "end_pos": 29, "type": "TASK", "confidence": 0.7006489187479019}]}, {"text": "Though empirically highly accurate, one drawback of this approach is that there is no asymptotic upper bound on the time complexity of finding the first full sentence.", "labels": [], "entities": []}, {"text": "As a result, it can take 5-10 seconds to process a sentence, and sometimes fail to yield a full sentence at timeout.", "labels": [], "entities": []}, {"text": "This issue is more severe for larger bags of words, and makes the algorithms practically less useful.", "labels": [], "entities": []}, {"text": "We study the effect of an alternative learning and search framework for the linearization prob-  lem, which has a theoretical upper bound on the time complexity, and always yields a full sentence in quadratic time.", "labels": [], "entities": []}, {"text": "Our method is inspired by the connection between syntactic linearization and syntactic parsing: both build a syntactic tree over a sentence, with the former performing word ordering in addition to derivation construction.", "labels": [], "entities": [{"text": "syntactic parsing", "start_pos": 77, "end_pos": 94, "type": "TASK", "confidence": 0.7783554494380951}]}, {"text": "As a result, syntactic linearization can be treated as a generalized form of parsing, for which there is no input word order, and therefore extensions to parsing algorithms can be used to perform linearization.", "labels": [], "entities": []}, {"text": "For syntactic parsing, the algorithm of Zhang and Nivre (2011) gives competitive accuracies under linear complexity.", "labels": [], "entities": [{"text": "syntactic parsing", "start_pos": 4, "end_pos": 21, "type": "TASK", "confidence": 0.7814595997333527}]}, {"text": "Compared with parsers that use dynamic programming, the efficient beam-search system is more suitable for the NP-hard linearization task.", "labels": [], "entities": []}, {"text": "We extend the parser of, so that word ordering is performed in addition to syntactic tree construction.", "labels": [], "entities": [{"text": "word ordering", "start_pos": 33, "end_pos": 46, "type": "TASK", "confidence": 0.7752531170845032}, {"text": "syntactic tree construction", "start_pos": 75, "end_pos": 102, "type": "TASK", "confidence": 0.6715103189150492}]}, {"text": "Experimental results show that the transition-based linearization system runs an order of magnitude faster than a state-ofthe-art best-first baseline, with improved accuracies in standard evaluation.", "labels": [], "entities": []}, {"text": "Our linearizer is publicly available under GPL at http://sourceforge.", "labels": [], "entities": []}, {"text": "net/projects/zgen/.", "labels": [], "entities": []}], "datasetContent": [{"text": "We follow previous work and conduct experiments on the Penn Treebank (PTB), using Wall Street Jour- nal sections 2-21 for training, 22 for development testing and 23 for final testing.", "labels": [], "entities": [{"text": "Penn Treebank (PTB)", "start_pos": 55, "end_pos": 74, "type": "DATASET", "confidence": 0.9823459506034851}, {"text": "Wall Street Jour- nal sections 2-21", "start_pos": 82, "end_pos": 117, "type": "DATASET", "confidence": 0.9636913452829633}]}, {"text": "Gold-standard dependency trees are derived from bracketed sentences in the treebank using Penn2Malt 1 , and base noun phrases are treated as a single word (.", "labels": [], "entities": [{"text": "Penn2Malt 1", "start_pos": 90, "end_pos": 101, "type": "DATASET", "confidence": 0.9350701570510864}]}, {"text": "The BLEU score () is used to evaluate the performance of linearization, which has been adopted in former literals () and recent shared-tasks).", "labels": [], "entities": [{"text": "BLEU score", "start_pos": 4, "end_pos": 14, "type": "METRIC", "confidence": 0.9804653823375702}]}, {"text": "We use our implementation of the best-first system of Zhang, which gives the state-of-the-art results, as the baseline.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 3: Partial-tree linearizion results on the development test set. BL -the BLEU score, SP -number of  milliseconds to order one sentence. Z13 refers to the best-first system of Zhang", "labels": [], "entities": [{"text": "BL", "start_pos": 72, "end_pos": 74, "type": "METRIC", "confidence": 0.99797123670578}, {"text": "BLEU score", "start_pos": 80, "end_pos": 90, "type": "METRIC", "confidence": 0.9758270978927612}, {"text": "SP -number", "start_pos": 92, "end_pos": 102, "type": "METRIC", "confidence": 0.936466912428538}]}, {"text": " Table 4: Precision, recall and F-score comparison on  different spans lengths.", "labels": [], "entities": [{"text": "Precision", "start_pos": 10, "end_pos": 19, "type": "METRIC", "confidence": 0.9979312419891357}, {"text": "recall", "start_pos": 21, "end_pos": 27, "type": "METRIC", "confidence": 0.9986013770103455}, {"text": "F-score", "start_pos": 32, "end_pos": 39, "type": "METRIC", "confidence": 0.9979269504547119}]}]}