{"title": [{"text": "WOLFE: An NLP-friendly Declarative Machine Learning Stack", "labels": [], "entities": []}], "abstractContent": [{"text": "Developing machine learning algorithms for natural language processing (NLP) applications is inherently an iterative process, involving a continuous refinement of the choice of model, engineering of features, selection of inference algorithms, search for the right hyper-parameters, and error analysis.", "labels": [], "entities": [{"text": "Developing machine learning algorithms for natural language processing (NLP)", "start_pos": 0, "end_pos": 76, "type": "TASK", "confidence": 0.7551644065163352}]}, {"text": "Existing proba-bilistic program languages (PPLs) only provide partial solutions; most of them do not support commonly used models such as matrix factor-ization or neural networks, and do not facilitate interactive and iterative programming that is crucial for rapid development of these models.", "labels": [], "entities": []}, {"text": "In this demo we introduce WOLFE, a stack designed to facilitate the development of NLP applications: (1) the WOLFE language allows the user to concisely define complex models, enabling easy modification and extension, (2) the WOLFE interpreter transforms declarative machine learning code into automatically differ-entiable terms or, where applicable, into factor graphs that allow for complex models to be applied to real-world applications, and (3) the WOLFE IDE provides a number of different visual and interactive elements, allowing intuitive exploration and editing of the data representations , the underlying graphical models, and the execution of the inference algorithms.", "labels": [], "entities": []}], "introductionContent": [{"text": "Machine learning has become a critical component of practical NLP systems, however designing and training an appropriate, accurate model is an iterative and time-consuming process fora number of reasons.", "labels": [], "entities": []}, {"text": "First, initial intuitions that inform model design (such as which features to use) are often inaccurate, requiring incremental model tweaking based on performance.", "labels": [], "entities": []}, {"text": "Even if the model is accurate, the final performance depends quite critically on the choice of the algorithms and their hyper-parameters.", "labels": [], "entities": []}, {"text": "Further, bugs that are introduced by the user may not even be reflected directly in the performance (such as a feature computation bug may not degrade performance).", "labels": [], "entities": []}, {"text": "All these concerns are further compounded due to the variety of approaches commonly used in NLP, such as conditional random fields, Markov random networks, Bayesian networks (, matrix factorization (, and Deep learning.", "labels": [], "entities": []}, {"text": "Probabilistic programming languages (PPLs), by closing the gap between traditional programming and probabilistic modeling, go along way in aiding quick design and modification of expressive models 1 . However, creating accurate machine learning models using these languages remains challenging.", "labels": [], "entities": []}, {"text": "Of the probabilistic programming languages that exist today, no language can easily express the variety of models used in NLP, focusing instead on a restricted set of modeling paradigms, for example, Markov logic networks can be models by Alchemy (), Bayesian generative networks by, undirected graphical models by, and soon.", "labels": [], "entities": []}, {"text": "Further, these toolkits are only restricted to model design and inference execution, and do not provide the appropriate debugging and interactive visualization tools required for developing such models in practice.", "labels": [], "entities": [{"text": "model design and inference execution", "start_pos": 47, "end_pos": 83, "type": "TASK", "confidence": 0.641780036687851}]}, {"text": "Due to these concerns, probabilistic programming has not found significant adoption in natural language processing, and application of machine learning to NLP still consists either of arduously designing, debugging, and iterating over a variety of models, or more commonly, giving up and using the first model that is \"good enough\".", "labels": [], "entities": []}, {"text": "In this demo, we introduce our probabilistic programming toolkit WOLFE () that aids in the iterative design of machine learning models for NLP applications.", "labels": [], "entities": [{"text": "WOLFE", "start_pos": 65, "end_pos": 70, "type": "METRIC", "confidence": 0.7355988621711731}]}, {"text": "The underlying probabilistic programming language can be used to concisely express a wide range of models, including undirected graphical models, matrix factorization, Bayesian networks, neural networks, and further, its modular nature allows combinations of these modeling paradigms.", "labels": [], "entities": []}, {"text": "We additionally present an easy-touse IDE for the interactive designing of NLP models, consisting of an interactive and visual presentation of structured data, graphical models, and inference execution.", "labels": [], "entities": []}, {"text": "Using the WOLFE language and IDE can thus enable the users to quickly create, debug, and iterate on complex models and inference.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}