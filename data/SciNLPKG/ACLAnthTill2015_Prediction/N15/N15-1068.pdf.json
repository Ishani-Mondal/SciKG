{"title": [{"text": "A Linear-Time Transition System for Crossing Interval Trees", "labels": [], "entities": []}], "abstractContent": [{"text": "We define a restricted class of non-projective trees that 1) covers many natural language sentences; and 2) can be parsed exactly with a generalization of the popular arc-eager system for projective trees (Nivre, 2003).", "labels": [], "entities": []}, {"text": "Crucially , this generalization only adds constant overhead in run-time and space keeping the parser's total run-time linear in the worst case.", "labels": [], "entities": []}, {"text": "In empirical experiments, our proposed transition-based parser is more accurate on average than both the arc-eager system or the swap-based system, an unconstrained non-projective transition system with a worst-case quadratic runtime (Nivre, 2009).", "labels": [], "entities": []}], "introductionContent": [{"text": "Linear-time transition-based parsers that use either greedy inference or beam search are widely used today due to their speed and accuracy.", "labels": [], "entities": [{"text": "accuracy", "start_pos": 130, "end_pos": 138, "type": "METRIC", "confidence": 0.9982646107673645}]}, {"text": "Of the many proposed transition systems, the arc-eager transition system of Nivre is one of the most popular fora variety of reasons.", "labels": [], "entities": [{"text": "Nivre", "start_pos": 76, "end_pos": 81, "type": "DATASET", "confidence": 0.9476207494735718}]}, {"text": "The arc-eager system has a well-defined output space: it can produce all projective trees and only projective trees.", "labels": [], "entities": []}, {"text": "For an input sentence with n words, the arc-eager system always performs 2n operations and each operation takes constant time.", "labels": [], "entities": []}, {"text": "Another attractive property of the arc-eager system is the close connection between the parameterization of the parsing problem and the final predicted output structure.", "labels": [], "entities": [{"text": "parsing problem", "start_pos": 112, "end_pos": 127, "type": "TASK", "confidence": 0.9174069166183472}]}, {"text": "In the arc-eager model, each operation has a clear interpretation in terms of constraints on the final output tree, which allows for more robust learning procedures.", "labels": [], "entities": []}, {"text": "The arc-eager system, however, cannot produce trees with crossing arcs.", "labels": [], "entities": []}, {"text": "Alternative systems can produce crossing dependencies, but at the cost of taking O(n 2 ) transitions in the worst case, requiring more transitions than arc-eager to produce projective trees, or producing trees in an unknown output class 1).", "labels": [], "entities": []}, {"text": "Graph-based non-projective parsing algorithms, on the other hand, have been able to preserve many of the attractive properties of their corresponding projective parsing algorithms by restricting search to classes of mildly non-projective trees ().", "labels": [], "entities": []}, {"text": "Mildly non-projective classes of trees are characterizable subsets of directed trees.", "labels": [], "entities": []}, {"text": "Classes of particular interest are those that both have high empirical coverage and that can be parsed efficiently.", "labels": [], "entities": []}, {"text": "With appropriate definitions of feature functions and output spaces, exact higher-order graph-based non-projective parsers can match the asymptotic time and space of higher-order projective parsers.", "labels": [], "entities": []}, {"text": "In this paper, we propose a class of mildly nonprojective trees ( \u00a73) and a transition system ( \u00a74) that is sound and complete with respect to this class ( \u00a75) while preserving desirable properties of arc-eager: it runs in O(n) time in the worst case ( \u00a76), and each operation can be interpreted as a prediction about the final tree structure.", "labels": [], "entities": []}, {"text": "At the same time, it can produce trees with crossing dependencies.", "labels": [], "entities": []}, {"text": "Across ten languages, on average 96.7% of sentences have dependency trees in the proposed class, compared with 79.4% for projective trees.", "labels": [], "entities": []}, {"text": "The implemented mildly non-projective transition-based parser is more accurate than a fully projective parser (arc-eager,) and a fully non-projective parser (swap-based,) ( \u00a77.1).", "labels": [], "entities": []}], "datasetContent": [{"text": "The experiments compare the two-registers transition system for mildly non-projective trees proposed herewith two other transition systems: the arceager system for projective trees and the swap-based system for all non-projective trees.", "labels": [], "entities": []}, {"text": "We choose the swap-based system as our non-projective baseline as it currently represents the state-of-the-art in transition-based parsing, with higher empirical performance than the Attardi system or pseudo-projective parsing ().", "labels": [], "entities": []}, {"text": "The arc-eager system is a reimplementation of Zhang and Nivre (2011), using their rich feature set and beam search.", "labels": [], "entities": []}, {"text": "The features for the two other transition systems are based on the same set, but with slight modifications to account for the different relevant domains of locality.", "labels": [], "entities": []}, {"text": "In particular, for the swap transition system, we updated the features to account for the fact that this transition system is based on the arc-standard model and so the most relevant positions are the top two tokens on the stack.", "labels": [], "entities": []}, {"text": "For the two-register system, we added features over properties of the tokens stored in each of the registers.", "labels": [], "entities": []}, {"text": "All experiments use beam search with abeam of size 32 and are trained with ten iterations of averaged structured perceptron training.", "labels": [], "entities": [{"text": "beam search", "start_pos": 20, "end_pos": 31, "type": "TASK", "confidence": 0.7855187654495239}]}, {"text": "Training set trees that are outside of the reachable class (projective for arc-eager, 2-Crossing Intervals for two-registers) are transformed by lifting arcs) until the tree is within the class.", "labels": [], "entities": []}, {"text": "The test sets are left unchanged.", "labels": [], "entities": []}, {"text": "We use the standard technique of parameterizing arc creating actions with dependency labels to produce labeled dependency trees.", "labels": [], "entities": []}, {"text": "Experiments use the ten datasets in from the CoNLL 2006 and 2007 shared tasks).", "labels": [], "entities": [{"text": "CoNLL 2006 and 2007 shared tasks", "start_pos": 45, "end_pos": 77, "type": "DATASET", "confidence": 0.9277787605921427}]}, {"text": "We report numbers using both gold and automatically predicted part-of-speech tags and morphological attribute-values as features.", "labels": [], "entities": []}, {"text": "For the latter, the part of speech tagger is a first-order CRF model and the morphological tagger uses a greedy SVM perattribute classifier.", "labels": [], "entities": [{"text": "speech tagger", "start_pos": 28, "end_pos": 41, "type": "TASK", "confidence": 0.714652493596077}]}, {"text": "Evaluation uses CoNLL-X scoring conventions) and we report both labeled and unlabeled attachment scores.", "labels": [], "entities": [{"text": "CoNLL-X scoring", "start_pos": 16, "end_pos": 31, "type": "METRIC", "confidence": 0.7769584655761719}]}, {"text": "shows the results using gold tags as features, which is the most common set-up in the literature.", "labels": [], "entities": []}, {"text": "The two-registers transition system has on average 0.8% absolute higher unlabeled attachment accuracy than arc-eager across the ten datasets investigated.", "labels": [], "entities": [{"text": "accuracy", "start_pos": 93, "end_pos": 101, "type": "METRIC", "confidence": 0.9255986213684082}]}, {"text": "Its UAS is higher than arc-eager for eight out of the ten languages and is up to 2.5% (Dutch) or 3.0% (Turkish) absolute higher, while nevermore than 0.4% worse (Portuguese).", "labels": [], "entities": [{"text": "UAS", "start_pos": 4, "end_pos": 7, "type": "METRIC", "confidence": 0.9942202568054199}, {"text": "arc-eager", "start_pos": 23, "end_pos": 32, "type": "METRIC", "confidence": 0.9425646066665649}]}, {"text": "The two-registers transition system is also more accurate than the alternate non-projective swap system on seven out of the ten languages, with more than 1% absolute improvements in UAS for Basque, Dutch, and German.", "labels": [], "entities": [{"text": "UAS", "start_pos": 182, "end_pos": 185, "type": "METRIC", "confidence": 0.8053520917892456}]}, {"text": "The two-registers transition-system is still on average more accurate than either the arc-eager or swap systems using predicted tags as features).", "labels": [], "entities": []}, {"text": "for tokens in which the incoming arc in the gold tree is crossed or uncrossed (recall of both crossed and uncrossed arcs).", "labels": [], "entities": [{"text": "recall", "start_pos": 79, "end_pos": 85, "type": "METRIC", "confidence": 0.9954243302345276}]}], "tableCaptions": [{"text": " Table 1: Proportion of trees (excluding punctuation) in  each tree class for the CoNLL shared tasks training sets:  Dutch, German, Portuguese, and Slovene are from Buch- holz and Marsi (2006); Basque, Czech, English, Greek,  Hungarian, and Turkish data are from Nivre et al. (2007).", "labels": [], "entities": [{"text": "CoNLL shared tasks training sets", "start_pos": 82, "end_pos": 114, "type": "DATASET", "confidence": 0.6751891493797302}]}]}