{"title": [{"text": "Chain based RNN for Relation Classification", "labels": [], "entities": [{"text": "Relation Classification", "start_pos": 20, "end_pos": 43, "type": "TASK", "confidence": 0.9841149151325226}]}], "abstractContent": [{"text": "We present a novel approach for relation classification , using a recursive neural network (RNN), based on the shortest path between two entities in a dependency graph.", "labels": [], "entities": [{"text": "relation classification", "start_pos": 32, "end_pos": 55, "type": "TASK", "confidence": 0.9348078370094299}]}, {"text": "Previous works on RNN are based on constituency-based parsing because phrasal nodes in a parse tree can capture compositionality in a sentence.", "labels": [], "entities": [{"text": "constituency-based parsing", "start_pos": 35, "end_pos": 61, "type": "TASK", "confidence": 0.6470978558063507}]}, {"text": "Compared with constituency-based parse trees, dependency graphs can represent relations more compactly.", "labels": [], "entities": []}, {"text": "This is particularly important in sentences with distant entities , where the parse tree spans words that are not relevant to the relation.", "labels": [], "entities": []}, {"text": "In such cases RNN cannot be trained effectively in a timely manner.", "labels": [], "entities": [{"text": "RNN", "start_pos": 14, "end_pos": 17, "type": "TASK", "confidence": 0.6651085019111633}]}, {"text": "However, due to the lack of phrasal nodes in dependency graphs, application of RNN is not straightforward.", "labels": [], "entities": []}, {"text": "In order to tackle this problem, we utilize dependency constituent units called chains.", "labels": [], "entities": []}, {"text": "Our experiments on two relation classification datasets show that Chain based RNN provides a shallower network, which performs considerably faster and achieves better classification results.", "labels": [], "entities": [{"text": "relation classification", "start_pos": 23, "end_pos": 46, "type": "TASK", "confidence": 0.7578805088996887}]}], "introductionContent": [{"text": "Relation extraction is the task of finding relations between entities in text, which is useful for several tasks such as information extraction, summarization, and question answering (.", "labels": [], "entities": [{"text": "Relation extraction", "start_pos": 0, "end_pos": 19, "type": "TASK", "confidence": 0.9446951150894165}, {"text": "information extraction", "start_pos": 121, "end_pos": 143, "type": "TASK", "confidence": 0.8398915529251099}, {"text": "summarization", "start_pos": 145, "end_pos": 158, "type": "TASK", "confidence": 0.9900813698768616}, {"text": "question answering", "start_pos": 164, "end_pos": 182, "type": "TASK", "confidence": 0.8876165747642517}]}, {"text": "For instance, in the sentence: those \"cancers\" were caused by radiation \"exposures,\" the two entities have a cause-effect relation.", "labels": [], "entities": []}, {"text": "As reported in detail, one approach to the problem involves supervised methods where the models rely on lexical, syntactic, and semantic features to classify relations between pairs of entities.", "labels": [], "entities": []}, {"text": "The downside of this approach is that one has to retrain the model for other domains with different target relations.", "labels": [], "entities": []}, {"text": "Thus it is not scalable to the web, where thousands of (previously-unseen) relations exist (.", "labels": [], "entities": []}, {"text": "To address this problem, Open Information Extraction is proposed, which does not require supervision.", "labels": [], "entities": [{"text": "Open Information Extraction", "start_pos": 25, "end_pos": 52, "type": "TASK", "confidence": 0.7124525705973307}]}, {"text": "In these systems (, patterns based on lexical, syntactic, POS, and dependency features are extracted.", "labels": [], "entities": []}, {"text": "While these patterns give good precision, they suffer from low recall (.", "labels": [], "entities": [{"text": "precision", "start_pos": 31, "end_pos": 40, "type": "METRIC", "confidence": 0.9981933236122131}, {"text": "recall", "start_pos": 63, "end_pos": 69, "type": "METRIC", "confidence": 0.9995044469833374}]}, {"text": "This is because they fail to extract patterns which have not been pre-specified, and thereby are unable to generalize.", "labels": [], "entities": []}, {"text": "Recursive Neural Network (RNN) has proven to be highly successful in capturing semantic compositionality in text and has improved the results of several Natural Language Processing tasks.", "labels": [], "entities": [{"text": "capturing semantic compositionality", "start_pos": 69, "end_pos": 104, "type": "TASK", "confidence": 0.6590325832366943}]}, {"text": "Previous applications of Recursive Neural Networks (RNN) to supervised relation extraction) are based on constituency-based parsers.", "labels": [], "entities": [{"text": "supervised relation extraction", "start_pos": 60, "end_pos": 90, "type": "TASK", "confidence": 0.6234662731488546}]}, {"text": "These RNNs may span words that do not contribute to the relation.", "labels": [], "entities": []}, {"text": "We investigate the incorporation of dependency parsing into RNN that can give a more compact representation of relations.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 36, "end_pos": 54, "type": "TASK", "confidence": 0.8067296147346497}]}, {"text": "Our contribution is introducing a compositional account of dependency graphs that can match RNN's recursive nature, and can be applied to relation classification.", "labels": [], "entities": [{"text": "relation classification", "start_pos": 138, "end_pos": 161, "type": "TASK", "confidence": 0.9144396185874939}]}, {"text": "We study different data structures that incorporate dependency trees into RNNs.", "labels": [], "entities": []}, {"text": "One of these structures produces a compact full binary tree that compared with the constituency-based RNN, has higher classification accuracy and saves up to 70% in the training time.", "labels": [], "entities": [{"text": "accuracy", "start_pos": 133, "end_pos": 141, "type": "METRIC", "confidence": 0.9567261934280396}]}], "datasetContent": [{"text": "In this section we discuss our experimental results on two datasets for relation classification.", "labels": [], "entities": [{"text": "relation classification", "start_pos": 72, "end_pos": 95, "type": "TASK", "confidence": 0.9294500946998596}]}, {"text": "To derive the dependency tree for each sentence, we use arceager MaltParser ().", "labels": [], "entities": []}, {"text": "We set the hyper-parameters through a validation set for the first dataset and use them for the second dataset too.", "labels": [], "entities": []}, {"text": "Similar to the previous works, a few internal features were also added e.g., depth of the tree, distance between entities, context words, and the type of dependencies in our model.", "labels": [], "entities": []}, {"text": "We found that using dependency types inside the composition function as in typed functions worsens the results.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: Results on SemEval 2010 relation classification task with the", "labels": [], "entities": [{"text": "SemEval 2010 relation classification task", "start_pos": 21, "end_pos": 62, "type": "TASK", "confidence": 0.8570637941360474}]}, {"text": " Table 2. In this task, the goal is to extract inter- actions between drug mentions in text. The corpus", "labels": [], "entities": []}, {"text": " Table 2: Results on SemEval 2013 Drug-Drug Interaction task", "labels": [], "entities": [{"text": "SemEval 2013 Drug-Drug Interaction", "start_pos": 21, "end_pos": 55, "type": "TASK", "confidence": 0.8455358743667603}]}]}