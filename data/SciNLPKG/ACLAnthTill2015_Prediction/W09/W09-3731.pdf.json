{"title": [{"text": "Formalisation of Intensionality as Algorithms 1 Background and Recent Development", "labels": [], "entities": []}], "abstractContent": [{"text": "Ina sequence of papers, Moschovakis developed a class of languages of re-cursion as anew approach to the mathematical notion of algorithm and development of computational semantics, e.g., see Moschovakis [7], for FLR, and Moschovakis [8], for L \u03bb ar.", "labels": [], "entities": [{"text": "FLR", "start_pos": 213, "end_pos": 216, "type": "DATASET", "confidence": 0.5577821731567383}]}, {"text": "In particular, the language and theory of acyclic recursion L \u03bb ar is intended for modeling the logical concepts of meaning and synonymy, from the perspective of the theory of computability, by targeting adequateness of computational semantics of NL.", "labels": [], "entities": []}, {"text": "L \u03bb ar is a higher order type theory, which is a proper extension of Gallin's TY 2 , Gallin [3], and, thus, of Montague's Intensional Logic (IL).", "labels": [], "entities": []}, {"text": "L \u03bb ar has a highly expressive language, an effective reduction calculus and strong mathematical properties.", "labels": [], "entities": []}, {"text": "It models the notion of algorithm by abstract mathematical objects, which are tuple of functions defined by mutual recursion, called acyclic re-cursors.", "labels": [], "entities": []}, {"text": "The referential intensions of the meaningful L \u03bb ar terms are acyclic recursors defined by their canonical forms, which are recursion terms.", "labels": [], "entities": []}, {"text": "For the construction of recursion terms (where-terms), the language L \u03bb ar uses a recursion operator, denoted by the constant where that applies over ahead term A 0 and a set of assignments, called body, {p 1 := A 1 ,.", "labels": [], "entities": []}, {"text": ".. , p n := A n }, where each A i is a term of the same type as the recursion variable pi (1 \u2264 i \u2264 n): A 0 where{p 1 := A 1 ,.", "labels": [], "entities": []}, {"text": ".. , p n := A n }.", "labels": [], "entities": []}, {"text": "The where-terms represent recursive computations by designating functional recursors: intuitively , the denotation of the term A 0 depends on the functions denoted by p 1 ,.", "labels": [], "entities": []}, {"text": ".. , p n that are computed recursively by the system of assignments {p 1 := A 1 ,.", "labels": [], "entities": []}, {"text": ".. , p n := A n }.", "labels": [], "entities": []}, {"text": "In an acyclic system of assignments, the computations close-off.", "labels": [], "entities": []}, {"text": "The formal syntax of L \u03bb ar allows only recursion terms with acyclic systems of assignments, while the FLR allows cyclicity, but is limited with respect to its type system.", "labels": [], "entities": [{"text": "FLR", "start_pos": 103, "end_pos": 106, "type": "METRIC", "confidence": 0.6480834484100342}]}, {"text": "The languages of recursion (e.g., FLR and L \u03bb ar) have two semantic layers: denotational semantics and ref-295", "labels": [], "entities": [{"text": "FLR", "start_pos": 34, "end_pos": 37, "type": "DATASET", "confidence": 0.6663624048233032}]}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}