{"title": [{"text": "Building Test Suites for UIMA Components", "labels": [], "entities": []}], "abstractContent": [{"text": "We summarize our experiences building a comprehensive suite of tests fora statistical natural language processing toolkit, ClearTK.", "labels": [], "entities": [{"text": "ClearTK", "start_pos": 123, "end_pos": 130, "type": "DATASET", "confidence": 0.9288702011108398}]}, {"text": "We describe some of the challenges we encountered , introduce a software project that emerged from these efforts, summarize our resulting test suite, and discuss some of the lessons learned.", "labels": [], "entities": []}], "introductionContent": [{"text": "We are actively developing a software toolkit for statistical natural processing called ClearTK , which is built on top of the Unstructured Information Management Architecture (UIMA)).", "labels": [], "entities": [{"text": "statistical natural processing", "start_pos": 50, "end_pos": 80, "type": "TASK", "confidence": 0.7575221657752991}]}, {"text": "From the beginning of the project, we have built and maintained a comprehensive test suite for the ClearTK components.", "labels": [], "entities": []}, {"text": "This test suite has proved to be invaluable as our APIs and implementations have evolved and matured.", "labels": [], "entities": []}, {"text": "As is common with earlystage software projects, our code has undergone number of significant refactoring changes and such changes invariably break code that was previously working.", "labels": [], "entities": []}, {"text": "We have found that our test suite has made it much easier to identify problems introduced by refactoring in addition to preemptively discovering bugs that are present in new code.", "labels": [], "entities": []}, {"text": "We have also observed anecdotally that code that is http://cleartk.googlecode.com more thoroughly tested as measured by code coverage has proven to be more reliable and easier to maintain.", "labels": [], "entities": []}, {"text": "While this test suite has been an indispensable resource for our project, we have found creating tests for our UIMA components to be challenging fora number of reasons.", "labels": [], "entities": []}, {"text": "Ina typical UIMA processing pipeline, components created by developers are instantiated by a UIMA container called the Collection Processing Manager (CPM) which decides at runtime how to instantiate components and what order they should run via configuration information provided in descriptor files.", "labels": [], "entities": []}, {"text": "This pattern is typical of programming frameworks: the developer creates components that satisfy some API specification and then these components are managed by the framework.", "labels": [], "entities": []}, {"text": "This means that the developer rarely directly instantiates the components that are developed and simple programs consisting of e.g. a main method are uncommon and can be awkward to create.", "labels": [], "entities": []}, {"text": "This is indeed consistent with our experiences with UIMA.", "labels": [], "entities": [{"text": "UIMA", "start_pos": 52, "end_pos": 56, "type": "DATASET", "confidence": 0.874176561832428}]}, {"text": "While this is generally a favorable approach for system development and deployment, it presents challenges to the developer that wants to isolate specific components (or classes that support them) for unit or functional testing purposes.", "labels": [], "entities": [{"text": "system development and deployment", "start_pos": 49, "end_pos": 82, "type": "TASK", "confidence": 0.6511876210570335}]}], "datasetContent": [], "tableCaptions": []}