{"title": [{"text": "Automatically Extracting Word Relationships as Templates for Pun Generation", "labels": [], "entities": [{"text": "Automatically Extracting Word Relationships", "start_pos": 0, "end_pos": 43, "type": "TASK", "confidence": 0.7938734367489815}, {"text": "Pun Generation", "start_pos": 61, "end_pos": 75, "type": "TASK", "confidence": 0.7954160571098328}]}], "abstractContent": [{"text": "Computational models can be built to capture the syntactic structures and semantic patterns of human punning riddles.", "labels": [], "entities": []}, {"text": "This model is then used as rules by a computer to generate its own puns.", "labels": [], "entities": []}, {"text": "This paper presents T-PEG, a system that utilizes phonetic and semantic linguistic resources to automatically extract word relationships in puns and store the knowledge in template form.", "labels": [], "entities": []}, {"text": "Given a set of training examples , it is able to extract 69.2% usable templates , resulting in computer-generated puns that received an average score of 2.13 as compared to 2.70 for human-generated puns from user feedback.", "labels": [], "entities": []}], "introductionContent": [{"text": "Previous works in computational humor have shown that by analyzing the syntax and semantics of how humans combine words to produce puns, computational models can be built to capture the linguistic aspects involved in this creative wordplay.", "labels": [], "entities": []}, {"text": "The model is then used in the design of computer systems that can generate puns which are almost at par with those of human-generated puns, as the case of the Joke Analysis and Production Engine or JAPE ) system.", "labels": [], "entities": [{"text": "Joke Analysis and Production Engine or JAPE )", "start_pos": 159, "end_pos": 204, "type": "TASK", "confidence": 0.8422165252268314}]}, {"text": "The computational model used by the JAPE system is in the form of schemas and templates with rules describing the linguistic structures of human puns.", "labels": [], "entities": []}, {"text": "The use of templates in NLP tasks is not new.", "labels": [], "entities": []}, {"text": "Information extraction systems) have used templates as rules for extracting relevant information from large, unstructured text.", "labels": [], "entities": [{"text": "Information extraction", "start_pos": 0, "end_pos": 22, "type": "TASK", "confidence": 0.7918650805950165}]}, {"text": "Text generation systems use templates as linguistic patterns with variables (or slots) that can be filled in to generate syntactically correct and coherent text for their human readers.", "labels": [], "entities": [{"text": "Text generation", "start_pos": 0, "end_pos": 15, "type": "TASK", "confidence": 0.7583481967449188}]}, {"text": "One common characteristic among these NLP systems was that the templates were constructed manually.", "labels": [], "entities": []}, {"text": "This is a tedious and time-consuming task.", "labels": [], "entities": []}, {"text": "Because of this, several researches in example-based machine translation systems, such as those in) and in (, have worked on automatically extracting templates from training examples.", "labels": [], "entities": [{"text": "machine translation", "start_pos": 53, "end_pos": 72, "type": "TASK", "confidence": 0.6939782798290253}]}, {"text": "The learned templates are bilingual pairs of patterns with corresponding words and phrases replaced with variables.", "labels": [], "entities": []}, {"text": "Each template is a complete sentence to preserve the syntax and word order in the source text, regardless of the variance in the sentence structures of the source and target languages ().", "labels": [], "entities": []}, {"text": "The motivation for T-PEG (Template-Based Pun Extractor and Generator) is to build a model of human-generated puns through the automatic identification, extraction and representation of the word relationships in a template, and then using these templates as patterns for the computer to generate its own puns.", "labels": [], "entities": [{"text": "identification, extraction and representation of the word relationships", "start_pos": 136, "end_pos": 207, "type": "TASK", "confidence": 0.7608950932820638}]}, {"text": "T-PEG does not maintain its own lexical resources, but instead relies on publicly available lexicons, in order to perform these tasks.", "labels": [], "entities": []}, {"text": "The linguistic aspects of puns and the resources utilized by T-PEG are presented in Section 2.", "labels": [], "entities": []}, {"text": "Sections 3 and 4 discuss the algorithms for extracting templates and generating puns, respectively.", "labels": [], "entities": []}, {"text": "The tests conducted and the analysis of the results on the learned templates and generated puns follow in Section 5, to show the limitations of T-PEG's approach and the level of humor in the generated puns.", "labels": [], "entities": []}, {"text": "The paper concludes with a summary of what T-PEG has been able to accomplish.", "labels": [], "entities": []}, {"text": "defines a pun as \"a humorous written or spoken text which relies crucially on phonetic similarity for its humorous effect\".", "labels": [], "entities": []}, {"text": "Puns can be based on inexact matches between words, where tactics include metathesis (e.g., throw stones and stow thrones) and substitution of a phonetically similar segment (e.g., glass and grass).", "labels": [], "entities": [{"text": "Puns", "start_pos": 0, "end_pos": 4, "type": "TASK", "confidence": 0.9589082598686218}]}], "datasetContent": [], "tableCaptions": []}