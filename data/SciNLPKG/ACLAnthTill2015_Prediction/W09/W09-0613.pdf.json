{"title": [{"text": "SimpleNLG: A realisation engine for practical applications", "labels": [], "entities": [{"text": "SimpleNLG", "start_pos": 0, "end_pos": 9, "type": "DATASET", "confidence": 0.8771982192993164}]}], "abstractContent": [{"text": "This paper describes SimpleNLG, a re-alisation engine for English which aims to provide simple and robust interfaces to generate syntactic structures and linearise them.", "labels": [], "entities": []}, {"text": "The library is also flexible in allowing the use of mixed (canned and non-canned) representations.", "labels": [], "entities": []}], "introductionContent": [{"text": "Over the past several years, a significant consensus has emerged over the definition of the realisation task, through the development of realisers such as REALPRO), ALETH-GEN,, FUF/SURGE (, HALO-GEN), YAG (), and OPENCCG).", "labels": [], "entities": [{"text": "realisation task", "start_pos": 92, "end_pos": 108, "type": "TASK", "confidence": 0.8657727837562561}, {"text": "REALPRO", "start_pos": 155, "end_pos": 162, "type": "METRIC", "confidence": 0.8351511359214783}, {"text": "ALETH-GEN", "start_pos": 165, "end_pos": 174, "type": "METRIC", "confidence": 0.9936316609382629}, {"text": "FUF", "start_pos": 177, "end_pos": 180, "type": "METRIC", "confidence": 0.8971450924873352}, {"text": "YAG", "start_pos": 201, "end_pos": 204, "type": "METRIC", "confidence": 0.8582587242126465}, {"text": "OPENCCG", "start_pos": 213, "end_pos": 220, "type": "DATASET", "confidence": 0.5694290399551392}]}, {"text": "Realisation involves two logically distinguishable tasks.", "labels": [], "entities": [{"text": "Realisation", "start_pos": 0, "end_pos": 11, "type": "TASK", "confidence": 0.967857301235199}]}, {"text": "Tactical generation involves making appropriate linguistic choices given the semantic input.", "labels": [], "entities": [{"text": "Tactical generation", "start_pos": 0, "end_pos": 19, "type": "TASK", "confidence": 0.8793341219425201}]}, {"text": "However, once tactical decisions have been taken, building a syntactic representation, applying the right morphological operations, and linearising the sentence as a string are comparatively mechanical tasks.", "labels": [], "entities": []}, {"text": "With the possible exception of template-based realisers, such as YAG, existing wide-coverage realisers usually carryout both tasks.", "labels": [], "entities": [{"text": "YAG", "start_pos": 65, "end_pos": 68, "type": "DATASET", "confidence": 0.8851242065429688}]}, {"text": "By contrast, a realisation engine focuses on the second of the two tasks, making no commitments as to how semantic inputs are mapped to syntactic outputs.", "labels": [], "entities": []}, {"text": "This leaves the (tactical) problem of defining mappings from semantic inputs to morphosyntactic structures entirely up to the developer, something which maybe attractive in those applications where full control of the output of generation is required.", "labels": [], "entities": []}, {"text": "Such control is not always easily available in wide-coverage tactical generators, fora number of reasons: 1.", "labels": [], "entities": []}, {"text": "Many such realisers define an input formalism, which effectively circumscribes the (semantic) space of possibilities that the realiser handles.", "labels": [], "entities": []}, {"text": "The developer needs to ensure that the input to realisation is mapped to the requisite formalism.", "labels": [], "entities": []}, {"text": "2. Since the tactical problem involves search through a space of linguistic choices, the broader the coverage, the more efficiency maybe compromised.", "labels": [], "entities": []}, {"text": "Where real-time deployment is a goal, this maybe an obstacle.", "labels": [], "entities": [{"text": "real-time deployment", "start_pos": 6, "end_pos": 26, "type": "TASK", "confidence": 0.6110579073429108}]}, {"text": "3. Many application domains have sublanguage requirements.", "labels": [], "entities": []}, {"text": "For example, the language used in summaries of weather data) or patient information (Portet et al., to appear) differs from standard usage, and does not always allow variation to the same extent.", "labels": [], "entities": [{"text": "summaries of weather", "start_pos": 34, "end_pos": 54, "type": "TASK", "confidence": 0.8984878261884054}]}, {"text": "Since realisers don't typically address such requirements, their use in a particular application may require the alteration of the realiser's rule-base or, in the case of statistical realisers, re-training on large volumes of appropruately annotated data.", "labels": [], "entities": []}, {"text": "This paper describes SimpleNLG, a realisation engine which grew out of recent experiences in building large-scale data-to-text NLG systems, whose goal is to summarise large volumes of numeric and symbolic data.", "labels": [], "entities": [{"text": "summarise large volumes of numeric and symbolic data", "start_pos": 157, "end_pos": 209, "type": "TASK", "confidence": 0.8294920921325684}]}, {"text": "Sublanguage requirements and efficiency are important considerations in such systems.", "labels": [], "entities": []}, {"text": "Although meeting these requirements was the initial motivation behind SimpleNLG, it has since been developed into an engine with significant coverage of English syntax and morphology, while at the same time providing a simple API that offers users direct programmatic control over the realisation process.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}