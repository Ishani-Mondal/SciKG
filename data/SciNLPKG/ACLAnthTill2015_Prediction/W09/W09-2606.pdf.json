{"title": [{"text": "Parenthetical Constructions -an Argument against Modularity", "labels": [], "entities": [{"text": "Parenthetical Constructions", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.7828930914402008}]}], "abstractContent": [{"text": "This paper presents an argument against modularizing linguistic information in natural language generation systems.", "labels": [], "entities": []}, {"text": "We argue that complex linguistic constructions require grammatical information to be located in the same module, in order to avoid over-complicating the system architecture.", "labels": [], "entities": []}, {"text": "We demonstrate this point by showing how parenthetical constructions-which have only been generated in previous systems using an aggregation or revision module-can be generated by a surface realizer when using an integrated grammar.", "labels": [], "entities": []}], "introductionContent": [{"text": "The ultimate aim of research on natural language generation is to develop large-scale, domain independent NLG systems, which are able to generate high quality, fluent and well-formatted texts.", "labels": [], "entities": [{"text": "natural language generation", "start_pos": 32, "end_pos": 59, "type": "TASK", "confidence": 0.6655313273270925}]}, {"text": "Ideally the produced texts will be as long as needed to convey the information given in the input and should be presented in a style that is appropriate for the purposes of the user.", "labels": [], "entities": []}, {"text": "Current NLG systems typically produce paragraph-length text tailored to a specific domain and the grammars in these systems contain only a limited number of grammatical constructions, typically collected during a corpus study of example documents.", "labels": [], "entities": []}, {"text": "Often the grammar is implemented using schemas or \"canned\" expressions, and individual grammatical levels are distributed in independent modules.", "labels": [], "entities": []}, {"text": "Organizing the grammar this way severely limits the flexibility of NLG systems.", "labels": [], "entities": []}, {"text": "It has long been recognized in the literature that text fluency can be improved by modeling interactions between grammar modules.", "labels": [], "entities": [{"text": "text fluency", "start_pos": 51, "end_pos": 63, "type": "TASK", "confidence": 0.7559504508972168}]}, {"text": "The most commonly mentioned interactions are those among discourse/rhetorical relations and syntax, rhetorical relations, syntax and referring expressions (; and layout and referring expressions (N.).", "labels": [], "entities": []}, {"text": "It is clear that in order to generate high quality, coherent discourse, a generator needs access to a grammar which is able to model the interdependent, context-sensitive behaviour of these separate linguistic phenomena.", "labels": [], "entities": []}, {"text": "In this paper we draw a parallel between grammar design and the design of natural language generation systems.", "labels": [], "entities": [{"text": "grammar design", "start_pos": 41, "end_pos": 55, "type": "TASK", "confidence": 0.7824287116527557}]}, {"text": "We argue that in order to generate complex linguistic constructions, current NLG systems tend to have overly complicated architectures.", "labels": [], "entities": []}, {"text": "To illustrate this point we show how a surface realizer can take on tasks from other components when linguistic information from different grammar modules (and hence, system modules) is integrated.", "labels": [], "entities": []}, {"text": "This simplifies system architecture by reducing the need for interaction between modules and enables the generator to produce more complex and coherent text.", "labels": [], "entities": []}, {"text": "We illustrate this point by first showing constraints that parenthetical constructions impose on pronominalization.", "labels": [], "entities": []}, {"text": "Then we present a grammar which integrates a representation for referring expressions into a syntax/discourse grammar.", "labels": [], "entities": []}, {"text": "Finally we show that using this grammar, we can generate complex, coherent paragraphs which contain parenthetical constructions using only a surface realizer.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}