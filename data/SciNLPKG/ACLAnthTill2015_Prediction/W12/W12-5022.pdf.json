{"title": [], "abstractContent": [{"text": "Work is currently underway to develop WordNet for various Indian languages.", "labels": [], "entities": []}, {"text": "The IndoWord-Net Consortium consists of member institutions developing their own language WordNet using the expansion approach.", "labels": [], "entities": [{"text": "IndoWord-Net Consortium", "start_pos": 4, "end_pos": 27, "type": "DATASET", "confidence": 0.917829692363739}]}, {"text": "Many tools and utilities have been developed by various institutes to help in this process.", "labels": [], "entities": []}, {"text": "In this paper, we discuss an object oriented Application Programming Interface (API) that we have implemented to facilitate easy and rapid development of tools and other software resources that require WordNet access and manipulation functionality.", "labels": [], "entities": [{"text": "object oriented Application Programming Interface (API)", "start_pos": 29, "end_pos": 84, "type": "TASK", "confidence": 0.7314050644636154}]}, {"text": "The main objective of IndoWordNet Application Programming Interface (IWAPI) is to provide access to the WordNet resource independent of the underlying storage technology.", "labels": [], "entities": [{"text": "IndoWordNet Application Programming Interface (IWAPI)", "start_pos": 22, "end_pos": 75, "type": "TASK", "confidence": 0.6808068539415087}]}, {"text": "The current implementation manipulates data stored in a relational database.", "labels": [], "entities": []}, {"text": "Furthermore the IWAPI also supports parallel access and manipulation of WordNets in multiple languages.", "labels": [], "entities": [{"text": "IWAPI", "start_pos": 16, "end_pos": 21, "type": "DATASET", "confidence": 0.8755651116371155}]}, {"text": "In this paper, we discuss functional requirements, design and the implementation of IndoWordNet API and its uses.", "labels": [], "entities": []}], "introductionContent": [{"text": "An Application Programming Interfaces (API) is defined as a set of commands, functions and protocols which developer can use when building software.", "labels": [], "entities": []}, {"text": "It allows the developer to use predefined functions to interact with systems, instead of writing them from scratch.", "labels": [], "entities": []}, {"text": "APIs are specially crafted to expose only chosen functionality and/or data while safeguarding other parts of the application which provides the interface.", "labels": [], "entities": []}, {"text": "The characteristics of good API are as follows: \u2022 Easy to learn and use, hard to misuse.", "labels": [], "entities": []}, {"text": "\u2022 Easy to read and maintain code that uses it.", "labels": [], "entities": []}, {"text": "\u2022 It is programming language neutral.", "labels": [], "entities": []}, {"text": "\u2022 Sufficiently powerful to support all computational requirements.", "labels": [], "entities": []}, {"text": "The IndoWordNet API provides a simple and easy way to access and manipulate the WordNet resource independent of the underlying storage technology.", "labels": [], "entities": [{"text": "WordNet resource", "start_pos": 80, "end_pos": 96, "type": "DATASET", "confidence": 0.9288645684719086}]}, {"text": "The functionality is exposed through a set of well defined objects that developer can create and manipulate as per his/her processing requirement.", "labels": [], "entities": []}, {"text": "Although the current implementation expects the data to be available in a relational database, a two layered architecture separates functionality offered to the user from the data access functionality.", "labels": [], "entities": []}, {"text": "This allows for future enhancements to support any data storage technology and design without changing the API provided to the developer.", "labels": [], "entities": []}, {"text": "The IndoWordNet API allows parallel access and updates to single or multiple language WordNets.", "labels": [], "entities": []}, {"text": "A new design using relational database has been implemented for this purpose.", "labels": [], "entities": []}, {"text": "This database design (IndoWordNet database) supports storage of multiple language WordNets.", "labels": [], "entities": []}, {"text": "An effort has been made to optimize the design to reduce redundancy.", "labels": [], "entities": []}, {"text": "Certain data common across all languages i.e. ontology information, semantic relationships, etc are stored in a separate master database and data specific to a language i.e. synsets, lexical relationships, etc are stored separately for each language in the database of respective language.", "labels": [], "entities": []}, {"text": "The rest of the paper is organised as follows -section 2 discusses functional requirements of IWAPI, section 3 presents the architecture and design of IWAPI.", "labels": [], "entities": [{"text": "IWAPI", "start_pos": 94, "end_pos": 99, "type": "DATASET", "confidence": 0.9100190997123718}, {"text": "IWAPI", "start_pos": 151, "end_pos": 156, "type": "DATASET", "confidence": 0.9297602772712708}]}, {"text": "The implementation details of IWAPI are presented in section 4.", "labels": [], "entities": [{"text": "IWAPI", "start_pos": 30, "end_pos": 35, "type": "DATASET", "confidence": 0.6553806066513062}]}, {"text": "Section 5 presents the conclusion.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}