{"title": [{"text": "Building Multilingual Search Index using open source framework", "labels": [], "entities": []}], "abstractContent": [{"text": "This paper presents a comparison of open source search engine development frameworks in the context of their malleability for constructing multilingual search index.", "labels": [], "entities": []}, {"text": "The comparison study reveals that none of these frameworks are designed for this task.", "labels": [], "entities": []}, {"text": "This paper elicits the challenges involved in building a multilingual index.", "labels": [], "entities": []}, {"text": "We also discuss policy decisions and the implementation changes made to an open source framework for building such an index.", "labels": [], "entities": []}, {"text": "As a main contribution of this work, we propose an architecture that can be used for building multilingual index.", "labels": [], "entities": []}, {"text": "It also lists some of the open research challenges involved.", "labels": [], "entities": []}], "introductionContent": [{"text": "There are lots of open source frameworks available to build a search engine.", "labels": [], "entities": []}, {"text": "These open source frameworks provide multiple features to build an inverted index of web documents used for information retrieval.", "labels": [], "entities": [{"text": "information retrieval", "start_pos": 108, "end_pos": 129, "type": "TASK", "confidence": 0.7964549660682678}]}, {"text": "Some features like Scalability, term storage, document posting list storage etc, are common across these frameworks.", "labels": [], "entities": [{"text": "term storage", "start_pos": 32, "end_pos": 44, "type": "TASK", "confidence": 0.7464852929115295}, {"text": "document posting list storage", "start_pos": 46, "end_pos": 75, "type": "TASK", "confidence": 0.7796550691127777}]}, {"text": "These frameworks facilitate customization of building index to make it compatible for the desired application.", "labels": [], "entities": []}, {"text": "To retain the structure of a document in an inverted index, field based indexing is used.", "labels": [], "entities": []}, {"text": "Instead of viewing a document as a collection of terms, the document is viewed as a collection of fields and the field as a collection of terms.", "labels": [], "entities": []}, {"text": "Each document that needs to be indexed is parsed and terms in the document are grouped into fields prior to indexing.", "labels": [], "entities": []}, {"text": "The conceptual view of field based inverted index is shown in the figure 1.(a) shows two documents as is.(b) shows a view of inverted index built for these documents.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}