{"title": [{"text": "DAGGER: A Toolkit for Automata on Directed Acyclic Graphs", "labels": [], "entities": []}], "abstractContent": [{"text": "This paper presents DAGGER, a toolkit for finite-state automata that operate on directed acyclic graphs (dags).", "labels": [], "entities": [{"text": "DAGGER", "start_pos": 20, "end_pos": 26, "type": "METRIC", "confidence": 0.6711971163749695}]}, {"text": "The work is based on a model introduced by (Kamimura and Slutzki, 1981; Kamimura and Slutzki, 1982), with a few changes to make the automata more applicable to natural language processing.", "labels": [], "entities": []}, {"text": "Available algorithms include membership checking in bottom-up dag acceptors, transduction of dags to trees (bottom-up dag-to-tree transducers), k-best generation and basic operations such as union and intersection.", "labels": [], "entities": [{"text": "membership checking", "start_pos": 29, "end_pos": 48, "type": "TASK", "confidence": 0.8695501983165741}]}], "introductionContent": [{"text": "Finite string automata and finite tree automata have proved to be useful tools in various areas of natural language processing.", "labels": [], "entities": [{"text": "natural language processing", "start_pos": 99, "end_pos": 126, "type": "TASK", "confidence": 0.64170570174853}]}, {"text": "However, some applications, especially in semantics, require graph structures, in particular directed acyclic graphs (dags), to model reentrancies.", "labels": [], "entities": []}, {"text": "For instance, the dags in represents the semantics of the sentences \"The boy wants to believe the girl\" and \"The boy wants the girl to believe him.\"", "labels": [], "entities": []}, {"text": "The double role of \"the boy\" is made clear by the two parent edges of the BOY node, making this structure non-tree-like.", "labels": [], "entities": [{"text": "BOY", "start_pos": 74, "end_pos": 77, "type": "METRIC", "confidence": 0.8789448142051697}]}, {"text": "Powerful graph rewriting systems have been used for NLP), yet we consider a rather simple model: finite dag automata that have been introduced by as a straightforward extension of tree automata.", "labels": [], "entities": []}, {"text": "We present the toolkit DAGGER (written in PYTHON) that can be used to visualize dags and to build dag acceptors and dag-to-tree transducers similar to their model.", "labels": [], "entities": [{"text": "DAGGER", "start_pos": 23, "end_pos": 29, "type": "METRIC", "confidence": 0.9778067469596863}]}, {"text": "Compared to those devices, in order to use them for actual NLP tasks, our machines differ in certain aspects: \u2022 We do not require our dags to be planar, and we do not only consider derivation dags.", "labels": [], "entities": []}, {"text": "\u2022 We add weights from any commutative semiring, e.g. real numbers.", "labels": [], "entities": []}, {"text": "The toolkit is available under an open source licence.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}