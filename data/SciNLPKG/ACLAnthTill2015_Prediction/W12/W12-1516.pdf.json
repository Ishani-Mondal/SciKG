{"title": [{"text": "Working with Clinicians to Improve a Patient-Information NLG System", "labels": [], "entities": []}], "abstractContent": [{"text": "NLG developers must work closely with domain experts in order to build good NLG systems , but relatively little has been published about this process.", "labels": [], "entities": []}, {"text": "In this paper, we describe how NLG developers worked with clinicians (nurses) to improve an NLG system which generates information for parents of babies in a neonatal intensive care unit, using a struc-tured revision process.", "labels": [], "entities": []}, {"text": "We believe that such a process can significantly enhance the quality of many NLG systems, in medicine and elsewhere .", "labels": [], "entities": []}], "introductionContent": [{"text": "Like other artificial intelligence (AI) systems, most Natural Language Generation (NLG) systems incorporate domain knowledge (and domain communication knowledge), either implicitly or explicitly.", "labels": [], "entities": [{"text": "Natural Language Generation (NLG)", "start_pos": 54, "end_pos": 87, "type": "TASK", "confidence": 0.817997028430303}]}, {"text": "Developers must work with domain experts to acquire such knowledge.", "labels": [], "entities": []}, {"text": "Also like software systems in general, applied NLG systems must meet domain and application specific requirements in order to be useful; these again must come from domain experts.", "labels": [], "entities": []}, {"text": "Since very few domain experts are familiar with NLG, it is usually extremely difficult to acquire a complete set of requirements, domain knowledge, and domain communication knowledge at the beginning of an NLG project.", "labels": [], "entities": []}, {"text": "Especially, if no preexisting \"golden standard\" corpus of domain texts exists.", "labels": [], "entities": []}, {"text": "Indeed, in many cases domain experts may find it difficult to give detailed requirements and knowledge until they can see aversion of the NLG system working on concrete examples.", "labels": [], "entities": []}, {"text": "This suggests that an iterative software development methodology should be used, where domain experts repeatedly tryout an NLG system, revise underlying domain (communication) knowledge and request changes to the system's functionality, and wait for developers to implement these changes before repeating the process.", "labels": [], "entities": []}, {"text": "We describe how we carried out this process on BabyTalk-Family (), an NLG system which generates summaries of clinical data about a baby in a neonatal intensive care unit (NICU), for the babys parents.", "labels": [], "entities": []}, {"text": "Over a 6 month period, this process enabled us to improve an initial version of the system (essentially the result of a PhD) to the point where the system was good enough to be deployable live in a hospital context.", "labels": [], "entities": []}, {"text": "We also describe how the feedback from the clinicians changed over the course of this period.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: List of annotation categories and the labels within each category that was used. The frequency for each label  in it's category is given in brackets.", "labels": [], "entities": []}, {"text": " Table 2: Summary table showing the average number of content errors, language errors, and comments per scenario.", "labels": [], "entities": []}]}