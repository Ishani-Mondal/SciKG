{"title": [{"text": "Kleene, a Free and Open-Source Language for Finite-State Programming", "labels": [], "entities": [{"text": "Kleene", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.9166169762611389}]}], "abstractContent": [{"text": "Kleene is a high-level programming language, based on the OpenFst library, for constructing and manipulating finite-state acceptors and transducers.", "labels": [], "entities": [{"text": "Kleene", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.8625465035438538}]}, {"text": "Users can program using regular expressions, alternation-rule syntax and right-linear phrase-structure grammars; and Kleene provides variables, lists, functions and familiar program-control syntax.", "labels": [], "entities": []}, {"text": "Kleene has been approved by SAP AG for release as free, open-source code under the Apache License, Version 2.0, and will be available by August 2012 for downloading from http:// www.kleene-lang.org.", "labels": [], "entities": [{"text": "Kleene", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.9023707509040833}]}, {"text": "The design, implementation , development status and future plans for the language are discussed.", "labels": [], "entities": []}], "introductionContent": [{"text": "Kleene 1 is a finite-state programming language in the tradition of the AT&T, 2 the SFST-PL language (, the Xerox/PARC finite-state toolkit and FOMA, all of which provide higher-level programming formalisms built on top of low-level finite-state libraries.", "labels": [], "entities": [{"text": "AT&T", "start_pos": 72, "end_pos": 76, "type": "DATASET", "confidence": 0.8846936821937561}, {"text": "FOMA", "start_pos": 144, "end_pos": 148, "type": "DATASET", "confidence": 0.7528031468391418}]}, {"text": "Kleene itself is built on the OpenFst library, developed by Google Labs and NYU's Courant Institute.", "labels": [], "entities": [{"text": "Kleene", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.8670912384986877}, {"text": "OpenFst library", "start_pos": 30, "end_pos": 45, "type": "DATASET", "confidence": 0.8938151895999908}, {"text": "NYU's Courant Institute", "start_pos": 76, "end_pos": 99, "type": "DATASET", "confidence": 0.767765536904335}]}, {"text": "The design and implementation of the language were motivated by three main principles, summarized as Syntax Matters, Licensing Matters and Open Source Matters.", "labels": [], "entities": []}, {"text": "As for the syntax, Kleene allows programmers to specify weighted or unweighted finite-state machines (FSMs)-including acceptors that encode regular languages and two-projection transducers that encode regular relations-using regular expressions, alternationrule syntax and right-linear phrase-structure grammars.", "labels": [], "entities": []}, {"text": "The regular-expression operators are borrowed, as far as possible, from familiar Perl-like and academic regular expressions, and the alternation rules are based on the \"rewrite rules\" made popular by.", "labels": [], "entities": []}, {"text": "Borrowing from general-purpose programming languages, Kleene also provides variables, lists and functions, plus nested code blocks and familiar control structures such as if-else statements and while loops.", "labels": [], "entities": []}, {"text": "As for the licensing, Kleene, like the OpenFst library, is released under the Apache License, Version 2.0, and its other dependencies are also released under this and similar permissive licenses that allow commercial usage.", "labels": [], "entities": []}, {"text": "In contrast, many notable finitestate implementations, released under the GPL and similar licenses, are restricted to academic and other non-commercial use.", "labels": [], "entities": []}, {"text": "The Kleene code is also opensource, allowing users to examine, correct, augment and even adopt the code if the project should ever be abandoned by its original maintainer(s).", "labels": [], "entities": [{"text": "Kleene code", "start_pos": 4, "end_pos": 15, "type": "DATASET", "confidence": 0.9282892644405365}]}, {"text": "It is hoped that Kleene will provide an attractive development environment for experts and students.", "labels": [], "entities": [{"text": "Kleene", "start_pos": 17, "end_pos": 23, "type": "DATASET", "confidence": 0.8099339008331299}]}, {"text": "Pre-edited Kleene scripts can be run from the command line, but a graphical user interface is also provided for interactive learning, programming, testing and drawing of Like comparable implementations of finite-state machines, Kleene can be used to implement a variety of useful applications, including spell-checking and -correction, phonetic modeling, morphological analysis and generation, and various kinds of pattern matching.", "labels": [], "entities": [{"text": "spell-checking and -correction", "start_pos": 304, "end_pos": 334, "type": "TASK", "confidence": 0.6377554312348366}, {"text": "phonetic modeling", "start_pos": 336, "end_pos": 353, "type": "TASK", "confidence": 0.8579371273517609}, {"text": "morphological analysis and generation", "start_pos": 355, "end_pos": 392, "type": "TASK", "confidence": 0.8327140808105469}, {"text": "pattern matching", "start_pos": 415, "end_pos": 431, "type": "TASK", "confidence": 0.7907246351242065}]}, {"text": "The paper continues with a brief description the Kleene language, the current state of development, and plans for the future.", "labels": [], "entities": [{"text": "Kleene language", "start_pos": 49, "end_pos": 64, "type": "DATASET", "confidence": 0.8590778708457947}]}], "datasetContent": [], "tableCaptions": []}