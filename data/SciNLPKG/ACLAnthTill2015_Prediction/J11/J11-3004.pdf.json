{"title": [{"text": "Dependency Parsing Schemata and Mildly Non-Projective Dependency Parsing", "labels": [], "entities": []}], "abstractContent": [{"text": "We introduce dependency parsing schemata, a formal framework based on Sikkel's parsing schemata for constituency parsers, which can be used to describe, analyze, and compare dependency parsing algorithms.", "labels": [], "entities": [{"text": "dependency parsing schemata", "start_pos": 13, "end_pos": 40, "type": "TASK", "confidence": 0.8621613581975301}, {"text": "dependency parsing", "start_pos": 174, "end_pos": 192, "type": "TASK", "confidence": 0.6811348497867584}]}, {"text": "We use this framework to describe several well-known projective and non-projective dependency parsers, build correctness proofs, and establish formal relationships between them.", "labels": [], "entities": []}, {"text": "We then use the framework to define new polynomial-time parsing algorithms for various mildly non-projective dependency formalisms, including well-nested structures with their gap degree bounded by a constant kin time O(n 5+2k), and anew class that includes all gap degree k structures present in several natural language treebanks (which we call mildly ill-nested structures for gap degree k) in time O(n 4+3k).", "labels": [], "entities": []}, {"text": "Finally, we illustrate how the parsing schema framework can be applied to Link Grammar, a dependency-related formalism.", "labels": [], "entities": []}], "introductionContent": [{"text": "Dependency parsing involves finding the structure of a sentence as expressed by a set of directed links (called dependencies) between individual words.", "labels": [], "entities": [{"text": "Dependency parsing", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.8866413831710815}]}, {"text": "Dependency formalisms have attracted considerable interest in recent years, having been successfully applied to tasks such as machine translation, textual entailment recognition, relation extraction (), and question answering (.", "labels": [], "entities": [{"text": "Dependency formalisms", "start_pos": 0, "end_pos": 21, "type": "TASK", "confidence": 0.831739991903305}, {"text": "machine translation", "start_pos": 126, "end_pos": 145, "type": "TASK", "confidence": 0.8148112595081329}, {"text": "textual entailment recognition", "start_pos": 147, "end_pos": 177, "type": "TASK", "confidence": 0.7877045174439748}, {"text": "relation extraction", "start_pos": 179, "end_pos": 198, "type": "TASK", "confidence": 0.8543981313705444}, {"text": "question answering", "start_pos": 207, "end_pos": 225, "type": "TASK", "confidence": 0.9068064093589783}]}, {"text": "Key characteristics of the dependency parsing approach are that dependency structures specify head-modifier and head-complement relationships, which form the basis of predicate-argument structure, but are not represented explicitly in constituency trees; there is no need for dependency parsers to postulate the existence of non-lexical nodes; and some variants of dependency parsers r We introduce dependency parsing schemata, a novel adaptation of the original parsing schemata framework (see Section 2).", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 27, "end_pos": 45, "type": "TASK", "confidence": 0.7607473134994507}]}, {"text": "r We use the dependency parsing schemata to define and compare a number of existing dependency parsers (projective parsers are presented in Section 3, and their formal properties discussed in Sections 4 and 5; a number of non-projective parsers are presented in Section 6).", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 13, "end_pos": 31, "type": "TASK", "confidence": 0.7843259572982788}]}, {"text": "r We present parsing algorithms for several sets of mildly non-projective dependency structures, including a parser fora new class of structures we call mildly ill-nested, which encompasses all the structures in a number of existing dependency treebanks (see Section 7).", "labels": [], "entities": []}, {"text": "r We adapt the dependency parsing schema framework to the formalism of Link Grammar) (see Section 8).", "labels": [], "entities": [{"text": "dependency parsing schema", "start_pos": 15, "end_pos": 40, "type": "TASK", "confidence": 0.8546608885129293}]}, {"text": "Although some of these contributions have been published previously, this article presents them in a thorough and consistent way.", "labels": [], "entities": []}, {"text": "The definition of dependency parsing schemata was first published by G \u00b4 omez-, along with some of the projective schemata presented here and their associated proofs.", "labels": [], "entities": [{"text": "dependency parsing schemata", "start_pos": 18, "end_pos": 45, "type": "TASK", "confidence": 0.7694511512915293}]}, {"text": "The results concerning mildly non-projective parsing in Section 7 were first published by G \u00b4 omez-.", "labels": [], "entities": []}, {"text": "On the other hand, the material on Nivre and Covington's projective parsers, as well as all the non-projective parsers and the application of the formalism to Link Grammar, are entirely new contributions of this article.", "labels": [], "entities": [{"text": "Link Grammar", "start_pos": 159, "end_pos": 171, "type": "TASK", "confidence": 0.8452061116695404}]}, {"text": "The notion of a parsing schema comes from considering parsing as a deduction process which generates intermediate results called items.", "labels": [], "entities": []}, {"text": "In particular, items in parsing schemata are sets of partial constituency trees taken from the set of all partial parse trees that do not violate the constraints imposed by a grammar.", "labels": [], "entities": []}, {"text": "A parsing schema can be used to obtain a working implementation of a parser by using deductive engines such as the ones described by and G \u00b4 omez-Rodr\u00edguez, Vilares, and, or the Dyna language (Eisner, Goldlust, and Smith 2005).", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1  Counts of dependency structures in treebanks for several languages, classified by projectivity,  gap degree, and mild and strong ill-nestedness (for their gap degree).", "labels": [], "entities": [{"text": "gap degree", "start_pos": 107, "end_pos": 117, "type": "METRIC", "confidence": 0.9169279932975769}]}]}