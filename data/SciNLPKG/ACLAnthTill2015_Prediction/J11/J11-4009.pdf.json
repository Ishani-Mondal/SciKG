{"title": [{"text": "Splittability of Bilexical Context-Free Grammars is Undecidable", "labels": [], "entities": [{"text": "Splittability of Bilexical Context-Free Grammars", "start_pos": 0, "end_pos": 48, "type": "TASK", "confidence": 0.7613346576690674}]}], "abstractContent": [{"text": "Bilexical context-free grammars (2-LCFGs) have proved to be accurate models for statistical natural language parsing.", "labels": [], "entities": [{"text": "statistical natural language parsing", "start_pos": 80, "end_pos": 116, "type": "TASK", "confidence": 0.7391194701194763}]}, {"text": "Existing dynamic programming algorithms used to parse sentences under these models have running time of O(|w| 4), where w is the input string.", "labels": [], "entities": [{"text": "O", "start_pos": 104, "end_pos": 105, "type": "METRIC", "confidence": 0.9934267997741699}]}, {"text": "A 2-LCFG is splittable if the left arguments of a lexical head are always independent of the right arguments, and vice versa.", "labels": [], "entities": []}, {"text": "When a 2-LCFGs is splittable, parsing time can be asymptotically improved to O(|w| 3).", "labels": [], "entities": [{"text": "parsing", "start_pos": 30, "end_pos": 37, "type": "TASK", "confidence": 0.9663242697715759}, {"text": "O", "start_pos": 77, "end_pos": 78, "type": "METRIC", "confidence": 0.9651837348937988}]}, {"text": "Testing this property is therefore of central interest to parsing efficiency.", "labels": [], "entities": [{"text": "parsing", "start_pos": 58, "end_pos": 65, "type": "TASK", "confidence": 0.9886596202850342}]}, {"text": "In this article, however, we show the negative result that splittability of 2-LCFGs is undecidable.", "labels": [], "entities": [{"text": "splittability", "start_pos": 59, "end_pos": 72, "type": "TASK", "confidence": 0.9845359921455383}]}], "introductionContent": [{"text": "Bilexical context-free grammars, or 2-LCFGs for short, are specialized context-free grammars where each nonterminal is associated with a terminal symbol representing a lexical element of the language of interest.", "labels": [], "entities": []}, {"text": "Furthermore, no more than two symbols can be used in the right-hand side of a rule, and the terminal symbol associated with the lefthand side of a rule must also occur on the right-hand side.", "labels": [], "entities": []}, {"text": "In this way, 2-LCFGs are able to specify syntactic constraints as well as lexically specific preferences that influence the combination of predicates with their arguments or modifiers.", "labels": [], "entities": []}, {"text": "Models based on 2-LCFGs have therefore been of central interest in statistical natural language parsing, as they allow selection of high-quality parse trees.", "labels": [], "entities": [{"text": "statistical natural language parsing", "start_pos": 67, "end_pos": 103, "type": "TASK", "confidence": 0.6793204247951508}]}, {"text": "One can in fact see 2-LCFGs as abstract models of the head automata of, the probabilistic projective dependency grammars of, and the head-driven statistical models of and.", "labels": [], "entities": []}, {"text": "Parsing algorithms based on 2-LCFGs can be very efficient.", "labels": [], "entities": [{"text": "Parsing", "start_pos": 0, "end_pos": 7, "type": "TASK", "confidence": 0.9502409100532532}]}, {"text": "In the general case, existing dynamic programming algorithms have running time of O(|w| 4 ), where w is the input string.", "labels": [], "entities": [{"text": "O", "start_pos": 82, "end_pos": 83, "type": "METRIC", "confidence": 0.9927378296852112}]}, {"text": "(In this article we disregard complexity factors that depend on the input grammar, which we will consider to be constants.)", "labels": [], "entities": []}, {"text": "In cases in which, for each (lexical) head, the two processes of generating its left and right arguments are, to some extent, independent one of the other, parsing based on 2-LCFGs can be asymptotically improved to O(|w| 3 ).", "labels": [], "entities": [{"text": "O", "start_pos": 215, "end_pos": 216, "type": "METRIC", "confidence": 0.9656203985214233}]}, {"text": "The reader is referred to fora detailed presentation of these computational results.", "labels": [], "entities": []}, {"text": "In the literature, this condition on independence between left and right arguments of each head has been called splittability.", "labels": [], "entities": [{"text": "splittability", "start_pos": 112, "end_pos": 125, "type": "TASK", "confidence": 0.9730927348136902}]}, {"text": "Testing for splittability on an input 2-LCFG is therefore of central interest to parsing efficiency.", "labels": [], "entities": [{"text": "splittability", "start_pos": 12, "end_pos": 25, "type": "TASK", "confidence": 0.9850795269012451}, {"text": "parsing", "start_pos": 81, "end_pos": 88, "type": "TASK", "confidence": 0.9892443418502808}]}, {"text": "The computability of this test has never been investigated, however.", "labels": [], "entities": []}, {"text": "In this article splittability is defined for 2-LCFGs in terms of equivalence to another grammar in which independence between left and right arguments of each head is ensured by a simple syntactic restriction.", "labels": [], "entities": [{"text": "splittability", "start_pos": 16, "end_pos": 29, "type": "TASK", "confidence": 0.9850136637687683}]}, {"text": "This restriction is called split form.", "labels": [], "entities": []}, {"text": "Informally, a 2-LCFG is in split form if it can be factorized into individual subgrammars, one for each head, and each subgrammar produces the left and the right arguments of its head through two derivation processes, one happening strictly after the other.", "labels": [], "entities": []}, {"text": "One may believe that a necessary and sufficient condition for splittability is that a 2-LCFG does not allow recursive structures that alternately generate left (L) and right (R) arguments of some head a.", "labels": [], "entities": [{"text": "splittability", "start_pos": 62, "end_pos": 75, "type": "TASK", "confidence": 0.9918689727783203}]}, {"text": "These structures could well result in subderivations producing sequences of the form Ln aR n , for any n \u2265 0, which would appear to preclude the application of the O(|w| 3 ) algorithm.", "labels": [], "entities": []}, {"text": "This situation, however, does not mean in general that the grammar is not splittable.", "labels": [], "entities": []}, {"text": "Although a subset of the rules in a grammar may generate structures such as those just discussed, there maybe additional rules that make the observed dependencies between left and right arguments irrelevant.", "labels": [], "entities": []}, {"text": "In fact, splittability of a 2-LCFG is undecidable, as will be shown in this article.", "labels": [], "entities": [{"text": "splittability", "start_pos": 9, "end_pos": 22, "type": "TASK", "confidence": 0.9846071600914001}]}, {"text": "Our result is based on the fact that it is undecidable whether a linear context-free grammar with a center marker (to be defined later) generates a regular language.", "labels": [], "entities": []}, {"text": "This fact is originally proved in this article, and does not follow from the weaker result stating the undecidability of regularity of (general) linear context-free languages, which is well known in the formal language literature and which is originally due to.", "labels": [], "entities": []}, {"text": "The remaining part of this article is organized as follows.", "labels": [], "entities": []}, {"text": "In Section 2 we present some preliminary background, and in Section 3 we define 2-LCFGs and the notion of splittability.", "labels": [], "entities": [{"text": "splittability", "start_pos": 106, "end_pos": 119, "type": "TASK", "confidence": 0.9634057283401489}]}, {"text": "In Section 4 we prove the main result of this article, and draw some conclusions in Section 5.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}