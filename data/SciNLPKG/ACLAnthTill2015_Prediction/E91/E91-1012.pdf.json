{"title": [], "abstractContent": [{"text": "A purely functional implementation of LR-parsers is given, together with a simple correctness proof.", "labels": [], "entities": []}, {"text": "It is presented as a generalization of the recursive descent parser.", "labels": [], "entities": []}, {"text": "For non-LR grammars the time-complexity of our parser is cubic if the functions that constitute the parser are implemented as memo-functions, i.e. functions that memorize the results of previous invocations.", "labels": [], "entities": []}, {"text": "Memo-functions also facilitate a simple way to construct a very compact representation of the parse forest.", "labels": [], "entities": []}, {"text": "For LR(0) grammars, our algorithm is closely related to the recursive ascent parsers recently discovered by Kruse-man Aretz [1] and Roberts [2].", "labels": [], "entities": []}, {"text": "Extended CF grammars (grammars with regular expressions at the right hand side) can be parsed with a simple modification of the LR-parser for normal CF grammars.", "labels": [], "entities": []}], "introductionContent": [{"text": "In this paper we give a purely functional implementation of LR-parsers, applicable to general CF grammars.", "labels": [], "entities": []}, {"text": "It will be obtained as a generalization of the well-known recursive descent parsing technique.", "labels": [], "entities": [{"text": "recursive descent parsing", "start_pos": 58, "end_pos": 83, "type": "TASK", "confidence": 0.6150692105293274}]}, {"text": "For LR(0) grammars, our result implies a deterministic parser that is closely related to the recursive ascent parsers discovered by Kruseman Aretz and Roberts.", "labels": [], "entities": []}, {"text": "In the general non-deterministic case, the parser has cubic time complexity if the parse functions are implemented as memo-functions, which are functions that memorize and re-use the results of previous invocations.", "labels": [], "entities": []}, {"text": "Memofunctions are easily implemented inmost programming languages.", "labels": [], "entities": []}, {"text": "The notion of memo-functions is also used to define an algorithm that constructs a cubic representation for the parse forest, i.e. the collection of parse trees.", "labels": [], "entities": []}, {"text": "It has been claimed by Tomita that non-deterministic LR-parsers are useful for natural language processing.", "labels": [], "entities": [{"text": "natural language processing", "start_pos": 79, "end_pos": 106, "type": "TASK", "confidence": 0.6425576110680898}]}, {"text": "In he presented a discussion about how to do nondeterministic LR-parsing, with a device called a graphstructured stack.", "labels": [], "entities": []}, {"text": "With our parser we show that no explicit stack manipulations are needed; they can be expressed implicitly with the use of appropriate programming language concepts.", "labels": [], "entities": []}, {"text": "Most textbooks on parsing do not include proper correctness proofs for LR-parsers, mainly because such proofs tend to be rather involved.", "labels": [], "entities": []}, {"text": "The theory of LRparsing should still be considered underdeveloped, for this reason.", "labels": [], "entities": []}, {"text": "Our presentation, however, contains a surprisingly simple correctness proof.", "labels": [], "entities": []}, {"text": "In fact, this proof is this paper's major contribution to parsing theory.", "labels": [], "entities": [{"text": "parsing theory", "start_pos": 58, "end_pos": 72, "type": "TASK", "confidence": 0.9887725710868835}]}, {"text": "One of its lessons is that the CF grammar class is often the natural one to proof parsers for, even if these parsers are devoted to some special class of grammars.", "labels": [], "entities": []}, {"text": "If the grammarlis restricted in someway, a parser for general CF grammars may have properties that enable smart implementation tricks to enhance efficiency.", "labels": [], "entities": []}, {"text": "As we show below, the relation between LR-parsers and LR-grammars is of this kind.", "labels": [], "entities": []}, {"text": "Especially in natural language processing, standard CF grammars are often too limited in their strong generative power.", "labels": [], "entities": []}, {"text": "The extended CF grammar formalism, allowing rules to have regular expressions at the right hand side, is a useful extension, for that reason.", "labels": [], "entities": []}, {"text": "It is not difficult to generalize our parser to cope with extended grammars, although the application of LR-parsing to extended CF grammars is well-known to be problematic", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}