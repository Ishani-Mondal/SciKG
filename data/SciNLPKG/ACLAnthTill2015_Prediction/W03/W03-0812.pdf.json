{"title": [{"text": "SDL-A Description Language for Building NLP Systems", "labels": [], "entities": []}], "abstractContent": [{"text": "We present the system description language SDL that offers a declarative way of specifying new complex NLP systems from already existing modules with the help of three operators: sequence, parallelism, and unrestricted iteration.", "labels": [], "entities": [{"text": "system description language SDL", "start_pos": 15, "end_pos": 46, "type": "TASK", "confidence": 0.6499136760830879}]}, {"text": "Given a system description and modules that implement a minimal interface, the SDL compiler returns a running Java program which realizes exactly the desired behavior of the original speci\u00a3cation.", "labels": [], "entities": []}, {"text": "The execution semantics of SDL is complemented by a precise formal semantics, de\u00a3ned in terms of concepts of function theory.", "labels": [], "entities": []}, {"text": "The SDL compiler is part of the SProUT shallow language platform, a system for the development and processing of multilingual resources.", "labels": [], "entities": []}], "introductionContent": [{"text": "In this paper, we focus on a general system description language, called SDL, which allows the declarative speci\u00a3cation of NLP systems from a set of already existing base modules.", "labels": [], "entities": []}, {"text": "Assuming that each initial module implements a minimal interface of methods, anew complex system is composed with the help of three operators, realizing a sequence of two modules, a (quasi-)parallel execution of several modules, and a potentially unrestricted self-application of a single module.", "labels": [], "entities": []}, {"text": "Communication between independent modules is decoupled by a mediator which is sensitive to the operators connecting the modules and to the modules themselves.", "labels": [], "entities": []}, {"text": "To put it in another way: new systems can be de\u00a3ned by simply putting together existing independent modules, sharing a common interface.", "labels": [], "entities": []}, {"text": "The interface assumes functionality which modules usually already provide, such asset input, clear internal state, start computation, etc.", "labels": [], "entities": []}, {"text": "It is clear that such an approach permits \u00a4exible experimentation with different software architectures during the setup of anew (NLP) system.", "labels": [], "entities": []}, {"text": "The use of mediators furthermore guarantees that an independently developed module will stay independent when integrated into anew system.", "labels": [], "entities": []}, {"text": "In the worst case, only the mediator needs to be modi\u00a3ed or upgraded, resp.", "labels": [], "entities": []}, {"text": "In many cases, not even a modi\u00a3cation of the mediator is necessary.", "labels": [], "entities": []}, {"text": "The execution semantics of SDL is complemented by an abstract semantics, de\u00a3ned in terms of concepts of function theory, such as Cartesian product, functional composition & application, Lambda abstraction, and unbounded minimization.", "labels": [], "entities": []}, {"text": "Contrary to an interpreted approach to system speci\u00a3cation, our approach compiles a syntactically well-formed SDL expression into a Java program.", "labels": [], "entities": []}, {"text": "This code might then be incorporated into a larger system or might be directly compiled by the Java compiler, resulting in an executable \u00a3le.", "labels": [], "entities": []}, {"text": "This strategy has two advantages: \u00a3rstly, the compiled Java code is faster than an interpretation of the corresponding SDL expression, and secondly, the generated Java code can be modi\u00a3ed or even extended by additional software.", "labels": [], "entities": []}, {"text": "The structure of this paper is as follows.", "labels": [], "entities": []}, {"text": "In the next section, we motivate the development of SDL and give a \u00a4avor of how base expressions can be compiled.", "labels": [], "entities": []}, {"text": "We then come up with an EBNF speci\u00a3cation of the concrete syntax for SDL in section 3 and explain SDL with the help of an example.", "labels": [], "entities": []}, {"text": "Since modules can be seen as functions in the mathematical sense, we argue in section 4 that a system speci\u00a3cation can be given a precise formal semantics.", "labels": [], "entities": []}, {"text": "We also clarify the formal status of the mediators and show how they are incorporated in the de\u00a3-nition of the abstract semantics.", "labels": [], "entities": []}, {"text": "Section 5 then de\u00a3nes the programming interfaces and their default implementation, both for modules and for mediators.", "labels": [], "entities": []}, {"text": "In the \u00a3nal section, we present some details of the compilation process.", "labels": [], "entities": [{"text": "compilation", "start_pos": 52, "end_pos": 63, "type": "TASK", "confidence": 0.95626300573349}]}], "datasetContent": [], "tableCaptions": []}