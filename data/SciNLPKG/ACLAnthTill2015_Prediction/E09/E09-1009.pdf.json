{"title": [{"text": "Incremental Parsing with Parallel Multiple Context-Free Grammars", "labels": [], "entities": [{"text": "Incremental Parsing", "start_pos": 0, "end_pos": 19, "type": "TASK", "confidence": 0.8680431246757507}]}], "abstractContent": [{"text": "Parallel Multiple Context-Free Grammar (PMCFG) is an extension of context-free grammar for which the recognition problem is still solvable in polynomial time.", "labels": [], "entities": [{"text": "Parallel Multiple Context-Free Grammar (PMCFG)", "start_pos": 0, "end_pos": 46, "type": "TASK", "confidence": 0.6585558354854584}]}, {"text": "We describe anew parsing algorithm that has the advantage to be incremental and to support PMCFG directly rather than the weaker MCFG formalism.", "labels": [], "entities": []}, {"text": "The algorithm is also top-down which allows it to be used for grammar based word prediction.", "labels": [], "entities": [{"text": "word prediction", "start_pos": 76, "end_pos": 91, "type": "TASK", "confidence": 0.7065896093845367}]}], "introductionContent": [{"text": "Parallel Multiple Context-Free Grammar (PMCFG) () is one of the grammar formalisms that have been proposed for the syntax of natural languages.", "labels": [], "entities": [{"text": "Parallel Multiple Context-Free Grammar (PMCFG)", "start_pos": 0, "end_pos": 46, "type": "TASK", "confidence": 0.6725395321846008}]}, {"text": "It is an extension of context-free grammar (CFG) where the right hand side of the production rule is a tuple of strings instead of only one string.", "labels": [], "entities": [{"text": "context-free grammar (CFG)", "start_pos": 22, "end_pos": 48, "type": "TASK", "confidence": 0.7383844256401062}]}, {"text": "Using tuples the grammar can model discontinuous constituents which makes it more powerful than context-free grammar.", "labels": [], "entities": []}, {"text": "In the same time PMCFG has the advantage to be parseable in polynomial time which makes it attractive from computational point of view.", "labels": [], "entities": [{"text": "PMCFG", "start_pos": 17, "end_pos": 22, "type": "DATASET", "confidence": 0.609963595867157}]}, {"text": "A parsing algorithm is incremental if it reads the input one token at the time and calculates all possible consequences of the token, before the next token is read.", "labels": [], "entities": [{"text": "parsing", "start_pos": 2, "end_pos": 9, "type": "TASK", "confidence": 0.9701905250549316}]}, {"text": "There is substantial evidence showing that humans process language in an incremental fashion which makes the incremental algorithms attractive from cognitive point of view.", "labels": [], "entities": []}, {"text": "If the algorithm is also top-down then it is possible to predict the next word from the sequence of preceding words using the grammar.", "labels": [], "entities": []}, {"text": "This can be used for example in text based dialog systems or text editors for controlled language where the user might not be aware of the grammar coverage.", "labels": [], "entities": []}, {"text": "In this case the system can suggest the possible continuations.", "labels": [], "entities": []}, {"text": "A restricted form of PMCFG that is still stronger than CFG is Multiple Context-Free Grammar (MCFG).", "labels": [], "entities": []}, {"text": "In it has been shown that MCFG is equivalent to string-based Linear ContextFree Rewriting Systems and Finite-Copying Tree Transducers and it is stronger than Tree Adjoining Grammars.", "labels": [], "entities": []}, {"text": "Efficient recognition and parsing algorithms for MCFG have been described in, and.", "labels": [], "entities": []}, {"text": "They can be used with PMCFG also but it has to be approximated with overgenerating MCFG and post processing is needed to filter out the spurious parsing trees.", "labels": [], "entities": [{"text": "PMCFG", "start_pos": 22, "end_pos": 27, "type": "DATASET", "confidence": 0.7332968711853027}]}, {"text": "We present a parsing algorithm that is incremental, top-down and supports PMCFG directly.", "labels": [], "entities": [{"text": "parsing", "start_pos": 13, "end_pos": 20, "type": "TASK", "confidence": 0.9700798392295837}, {"text": "PMCFG", "start_pos": 74, "end_pos": 79, "type": "DATASET", "confidence": 0.6749719977378845}]}, {"text": "The algorithm exploits a view of PMCFG as an infinite contextfree grammar where new context-free categories and productions are generated during parsing.", "labels": [], "entities": []}, {"text": "It is trivial to turn the algorithm into statistical by attaching probabilities to each rule.", "labels": [], "entities": []}, {"text": "In it has been shown that the Grammatical Framework (GF) formalism) is equivalent to PMCFG.", "labels": [], "entities": []}, {"text": "The algorithm was implemented as part of the GF interpreter and was evaluated with the resource grammar library which is the largest collection of grammars written in this formalism.", "labels": [], "entities": []}, {"text": "The incrementality was used to build a help system which suggests the next possible words to the user.", "labels": [], "entities": []}, {"text": "Section 2 gives a formal definition of PMCFG.", "labels": [], "entities": [{"text": "PMCFG", "start_pos": 39, "end_pos": 44, "type": "DATASET", "confidence": 0.6754618883132935}]}, {"text": "In section 3 the procedure for \"linearization\" i.e. the derivation of string from syntax tree is defined.", "labels": [], "entities": []}, {"text": "The definition is needed for better understanding of the formal proofs in the paper.", "labels": [], "entities": []}, {"text": "The algorithm introduction starts with informal description of the idea in section 4 and after that the formal rules are given in section 5.", "labels": [], "entities": []}, {"text": "The implementation details are outlined in section 6 and after that there are some comments on the evaluation in section 7.", "labels": [], "entities": []}, {"text": "Section 8 gives a conclusion.", "labels": [], "entities": []}], "datasetContent": [{"text": "The algorithm was evaluated with four languages from the GF resource grammar library: Bulgarian, English, German and Swedish.", "labels": [], "entities": [{"text": "GF resource grammar library", "start_pos": 57, "end_pos": 84, "type": "DATASET", "confidence": 0.952532097697258}]}, {"text": "These grammars are not primarily intended for parsing but as a resource from which smaller domain dependent grammars are derived for every application.", "labels": [], "entities": [{"text": "parsing", "start_pos": 46, "end_pos": 53, "type": "TASK", "confidence": 0.96317458152771}]}, {"text": "Despite this, the resource grammar library is a good benchmark for the parser because these are the biggest GF grammars.", "labels": [], "entities": []}, {"text": "The compiler converts a grammar written in the high-level GF language to a low-level PMCFG grammar which the parser can use directly.", "labels": [], "entities": []}, {"text": "The sizes of the grammars in terms of number of productions and number of unique discontinuous constituents are given on table 1.", "labels": [], "entities": []}, {"text": "The number of constituents roughly corresponds to the number of productions in the contextfree approximation of the grammar.", "labels": [], "entities": []}, {"text": "The parser performance in terms of miliseconds per token is shown in.", "labels": [], "entities": []}, {"text": "In the evaluation 34272 sentences were parsed and the average time for parsing a given number of tokens is drawn in the chart.", "labels": [], "entities": []}, {"text": "As it can be seen, although the theoretical complexity is polynomial, the real-time performance for practically interesting grammars tends to be linear.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: GF Resource Grammar Library size in number  of PMCFG productions and discontinuous constituents", "labels": [], "entities": [{"text": "GF Resource Grammar Library", "start_pos": 10, "end_pos": 37, "type": "DATASET", "confidence": 0.752701997756958}]}]}