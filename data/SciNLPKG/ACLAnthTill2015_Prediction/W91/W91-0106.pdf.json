{"title": [{"text": "REVERSIBLE NLP BY DERIVING THE GRAMMARS FROM THE KNOWLEDGE BASE", "labels": [], "entities": [{"text": "REVERSIBLE NLP BY DERIVING THE GRAMMARS FROM THE KNOWLEDGE BASE", "start_pos": 0, "end_pos": 63, "type": "METRIC", "confidence": 0.67648264169693}]}], "abstractContent": [{"text": "We present anew architecture for reversible NLP.", "labels": [], "entities": []}, {"text": "Separate parsing and generation grammars are constructed from the underlying application's semantic model and knowledge base.", "labels": [], "entities": [{"text": "Separate parsing and generation grammars", "start_pos": 0, "end_pos": 40, "type": "TASK", "confidence": 0.6697759628295898}]}, {"text": "By having two grammars we are free to use process-specific representations and control techniques, thereby permitting highly efficient processing.", "labels": [], "entities": []}, {"text": "The single semantic source ensures the parsimony of development and matched competence that make reversible NLP attractive.", "labels": [], "entities": []}], "introductionContent": [{"text": "Most natural language processing systems are initially builtin a single direction only; most are parsers (understanding systems), a few are generators.", "labels": [], "entities": []}, {"text": "These systems are often then embedded in full, bidirectional interfaces, whereupon anew, almost nontechnical kind of problem arises if differences in the two uni-directional subsystems are not controlled.", "labels": [], "entities": []}, {"text": "The full system may not understand the same wording or syntactic constructions that it can generate; or generation and parsing development teams may both have to work on extensions and modifications to their grammars, with the likely result that still further differences will be introduced.", "labels": [], "entities": []}, {"text": "These practical problems bolster an intuition that many have that knowledge of parsing and generation is the same knowledge in a person's mind, or at least that the two faculties draw on a single representation of their language even if it is engaged in different ways.", "labels": [], "entities": [{"text": "parsing and generation", "start_pos": 79, "end_pos": 101, "type": "TASK", "confidence": 0.8558475375175476}]}, {"text": "This has led to the goal of reversible NLP systems.", "labels": [], "entities": []}, {"text": "The common approach has been to take the computational artifact constructed by one of the single-direction projects, typically its grammar, and to aSapt it for use in the other direction.", "labels": [], "entities": []}, {"text": "At ISI, for example, their massive systemic grammar for generation, NIGEL, has since been adapted for use as a parser.", "labels": [], "entities": []}, {"text": "With the conceptual basis of the transformation in place, the development of further extensions and modifications is done on the generation grammar, and then that grammar is retransformed to yield the new parsing grammar.", "labels": [], "entities": []}, {"text": "The other well-known approach to reversible NLP is of course to use the very same computational artifact in both processing dkections.", "labels": [], "entities": [{"text": "reversible NLP", "start_pos": 33, "end_pos": 47, "type": "TASK", "confidence": 0.7378862798213959}]}, {"text": "Thus far this artifact has invariably been a grammar, typically some kind of specification of the text-stream --logical form relation that can be used as a transducer or can supply the data for it.", "labels": [], "entities": []}, {"text": "Parsers and generators draw on their grammars as their predominant knowledge source.", "labels": [], "entities": []}, {"text": "The grammar thus becomes a bottleneck for the processing if it is not designed with efficiency of processing in mind.", "labels": [], "entities": []}, {"text": "When virtually the same computational representation of the grammar is used in both processes and it is given an active role, e.g. when the grammar is couched in a unification formalism, this bottleneck can be substantial since the \"common denominator\" processing architecture that must be employed in order for the grammar to be literally usable by both processes will be markedly less efficient than architectures that work from single-direction representations of the grammar.", "labels": [], "entities": []}, {"text": "By their nature as information processing systems, language understanding and generation are quite different kinds of processes.", "labels": [], "entities": [{"text": "language understanding and generation", "start_pos": 51, "end_pos": 88, "type": "TASK", "confidence": 0.7678451985120773}]}, {"text": "Understanding proceeds from texts to intentions.", "labels": [], "entities": []}, {"text": "The \"known\" is the wording of the text and its intonation.", "labels": [], "entities": []}, {"text": "From these, the understanding process constructs and deduces the propositional content conveyed by the text and the probable intentions of the speaker in producing it.", "labels": [], "entities": []}, {"text": "Its primary effort is to scan the words of the text in sequence, during which the form of the text gradually unfolds.", "labels": [], "entities": []}, {"text": "This requirement to scan forces the adoption of algorithms based on the management of multiple hypotheses and predictions that feed a representation that must be expanded dynamically.", "labels": [], "entities": []}, {"text": "Major problems are caused by ambiguity and under-specification (i.e. the audience typically receives more information from situationally motivated inferences than is conveyed by the actual text).", "labels": [], "entities": []}, {"text": "In generation, information flows in the opposite direction from understanding.", "labels": [], "entities": []}, {"text": "Generation proceeds from content to iform, from intentions and perspectives to linearly arrayed words and syntactic markers.", "labels": [], "entities": []}, {"text": "A generator's \"known\" is its awareness of its intentions, its plgns, and the text it has already produced.", "labels": [], "entities": []}, {"text": "Coupled with a model of the audience, the situation, and the discourse, this provides the basis for making choices among the alternative wordings and constructions that the language provides---the principal activity iff generation.", "labels": [], "entities": []}, {"text": "Most generation systems do produce ;texts sequentially from left to right---just like an understanding system would scan it; but they do this only after having made decisions about the content and form of the text as a whole.", "labels": [], "entities": []}, {"text": "Ambiguity in a generator's knowledge is not possible (indeed one of its problems is to notice that it has inadvertently introduced an ambiguity into the text).", "labels": [], "entities": [{"text": "Ambiguity", "start_pos": 0, "end_pos": 9, "type": "METRIC", "confidence": 0.8875259757041931}]}, {"text": "And rather than under-specification, a generator's problem is to choose from its over-supply of information what to include and what to omit so as to adequately signal its intended inferences to the audience.", "labels": [], "entities": []}, {"text": "Our concern with efficiency---optimizing the two processes to fit their differing information processing characteristics---has led us to approach reversible NLP by al compilation-style route where the grammar that the processes use is not one artifact but two, each with its own representation that is deliberately tailored to the process that uses it.", "labels": [], "entities": []}, {"text": "Like the system at ISI, our reversible knowledge source is grounded in the generation process and then projected, via a compiler, to create the representation used by the parser.", "labels": [], "entities": []}, {"text": "The difference is that while ISI projected the grammar that the generator used, i.e. the set of system networks that is the model of the linguistic resources provided by the language and their dependencies, our system is a projection from the underlying application's conceptual model.", "labels": [], "entities": []}, {"text": "In generation \u00b0he starts with a set of objects representing individuals, relations, propositions, etc. that have been selected from the application program as its representation of the information it wants to communicate.", "labels": [], "entities": []}, {"text": "Accordingly, the kind of knowledge that a generator must draw on most frequently is what are the options for realizing those objects linguistically.", "labels": [], "entities": []}, {"text": "In Order to make this look-up efficient, one is naturally led to an architecture where Is stored directly with the definmons this knowledge \" ~ .... of the objects or their classes, in effect distributing a highly lexicalized grammar over the knowledge base.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}