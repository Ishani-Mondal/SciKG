{"title": [{"text": "Reversibility in a Constraint and Type based Logic Grammar: Application to Secondary Predication", "labels": [], "entities": []}], "abstractContent": [{"text": "In this document, we present a formalism for natural language processing which associates type construction principles to constraint logic programming.", "labels": [], "entities": [{"text": "natural language processing", "start_pos": 45, "end_pos": 72, "type": "TASK", "confidence": 0.6781440377235413}]}, {"text": "We show that it provides more uniform, expressive and efficient tools for parsing and generating language.", "labels": [], "entities": []}, {"text": "Next, we present two abstract machines which enable us to design, in asymmetric way, a parser and a generator from that formalism.", "labels": [], "entities": []}, {"text": "This abstract machinery is then exemplified by a detailed study of secondary predication within the framework of a principled-based description of language: Government and Binding theory.", "labels": [], "entities": []}], "introductionContent": [{"text": "Lexical as well as grammatical and discursive knowledge required to understand or to produce natural language utterances is usually a description which is independent of the sentence production or comprehension 'algorithms'.", "labels": [], "entities": []}, {"text": "It comes naturally into mind to have a common, shared knowledge base of what language is, independently of its potential uses.", "labels": [], "entities": []}, {"text": "Besides well-known advantages of uniformity and transparency, this point of view is very convenient for the computer scientist who does not have to integrate into his parsers or generators the unavoidable updafings required by grammar development.", "labels": [], "entities": []}, {"text": "The linguistic knowledge is thus specified in a declarative way in different modules (lexical, grammatical, discursive ....", "labels": [], "entities": []}, {"text": ") and different strategies are applied which refer to these data (directly for interpreters or via the production of a compiled code for compilers).", "labels": [], "entities": []}, {"text": "This approach can however be realiTed more or less easily depending on the formalisms used to describe language phenomena.", "labels": [], "entities": []}, {"text": "In this document we introduce new advanced tools of the Logic Programming framework and show that they contribute to meeting the requirements imposed by the manipulation and the control of large amounts of data required by both the parsing and the generation procedure.", "labels": [], "entities": []}, {"text": "We first consider logical types which area declarative and easy-to-use tool and formalism which permit a grammar writer to encode knowledge in a very flexible and principled-based way.", "labels": [], "entities": []}, {"text": "In addition to types, we introduce new active constraints of the Constraint Logic Programming (CLP) framework which allow us to treat and to check for consistency of constraints throughout the whole generation procedure and not to only evaluate them when they are given in the programme or grammar.", "labels": [], "entities": []}, {"text": "These active constraints are fully declarative and can be used by any type of parsing/generation process.", "labels": [], "entities": [{"text": "parsing/generation", "start_pos": 78, "end_pos": 96, "type": "TASK", "confidence": 0.8865348299344381}]}, {"text": "CLP introduces a greater expressive power together with a higher efficiency since the resolution of constraints is postponed till they can be properly evaluated and since constraints have to be always true and consistent with each other.", "labels": [], "entities": [{"text": "CLP", "start_pos": 0, "end_pos": 3, "type": "DATASET", "confidence": 0.8009027242660522}]}, {"text": "Finally, a feature of active constraints is that they are usually independent of the way they are processed, they are thus strategy independent and can equivalently be used for parsing and for generation.", "labels": [], "entities": []}, {"text": "To make reversibility concrete in our system, we develop in this document two different abstract machines based on type construction and constraint satisfaction which give the foundations of a parser and a generator using the same source of declarative linguistic knowledge.", "labels": [], "entities": [{"text": "type construction", "start_pos": 115, "end_pos": 132, "type": "TASK", "confidence": 0.7717948257923126}]}, {"text": "The differences between these machines exemplifies the 'technical' differences one may have between parsing and generation processes.", "labels": [], "entities": [{"text": "parsing", "start_pos": 100, "end_pos": 107, "type": "TASK", "confidence": 0.9625203013420105}]}], "datasetContent": [], "tableCaptions": []}