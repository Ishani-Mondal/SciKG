{"title": [{"text": "A :SEMANTIC INTERPRETER FOR SYSTEMIC GRAMMARS", "labels": [], "entities": [{"text": "SEMANTIC", "start_pos": 3, "end_pos": 11, "type": "TASK", "confidence": 0.7572910189628601}, {"text": "INTERPRETER FOR SYSTEMIC GRAMMARS", "start_pos": 12, "end_pos": 45, "type": "METRIC", "confidence": 0.6851210594177246}]}], "abstractContent": [{"text": "This paper describes a method for obtaining the semantic representation fora syntax tree in Sys-temic Grammar (SG).", "labels": [], "entities": [{"text": "Sys-temic Grammar (SG)", "start_pos": 92, "end_pos": 114, "type": "TASK", "confidence": 0.8276317954063416}]}, {"text": "A prototype implementation of this method-the REVELATION1 semantic interpreter has been ldeveloped.", "labels": [], "entities": [{"text": "REVELATION1", "start_pos": 46, "end_pos": 57, "type": "METRIC", "confidence": 0.8813396692276001}]}, {"text": "It is derived from a SG generator foe a large subset of English-GENESYS-and is !thus, in contrast with most reversible grammars, fan interpreter based on a generator.", "labels": [], "entities": []}, {"text": "A task decomposition approach is adopted for this reversal process which operates within the framework of SG, thus demonstrating that Systemic Grammars can be reversed and hence that a SG is a truly bi-directional formalism, p", "labels": [], "entities": [{"text": "task decomposition", "start_pos": 2, "end_pos": 20, "type": "TASK", "confidence": 0.7130628675222397}]}], "introductionContent": [{"text": "SG (see Butler fora good introduction) is a useful model of lan~guage, having found many applications in the areas of stylistics, text analysis, educational linggistics and artificial intelligence.", "labels": [], "entities": [{"text": "text analysis", "start_pos": 130, "end_pos": 143, "type": "TASK", "confidence": 0.8126989006996155}]}, {"text": "Some of these applications have been colnputational, the best known probably being Winograd's SHRDLU.", "labels": [], "entities": []}, {"text": "Howdver, most computational applications have been designed from a text-generation viewpoint (such as Davey's PROTEUS, Manta and Matthiessen's NmEL and Fawcett and rlhtcker's \u00a2ENESYS).", "labels": [], "entities": []}, {"text": "Because of this text-generation viewpoint of systen tic grammarians, the mechanism for sentence analysis within SG (the reverse of the sentence generation process) h~ received much less attention.", "labels": [], "entities": [{"text": "sentence analysis", "start_pos": 87, "end_pos": 104, "type": "TASK", "confidence": 0.7392351627349854}, {"text": "sentence generation", "start_pos": 135, "end_pos": 154, "type": "TASK", "confidence": 0.7110372185707092}]}, {"text": "This paper describes one stage of the sentence analysis process: semantic interpretation.l 1 This assumes that Isentence analysis can be decomposed into two processes: syntactic analysis (parsing) plus semantic In Fawcett's SG, 2 a syntax tree (whose leaves define a sentence) is generated from a set of semantic choices.", "labels": [], "entities": [{"text": "sentence analysis", "start_pos": 38, "end_pos": 55, "type": "TASK", "confidence": 0.7263947129249573}, {"text": "semantic interpretation.l", "start_pos": 65, "end_pos": 90, "type": "TASK", "confidence": 0.7220390439033508}, {"text": "Isentence analysis", "start_pos": 111, "end_pos": 129, "type": "TASK", "confidence": 0.9361741840839386}]}, {"text": "R.EVELATION1 reverses this process: it attempts to find the set of semantic choices needed to generate a given syntax tree.", "labels": [], "entities": []}, {"text": "In sentence generation, a tree is generated, but only the leaves (the words) are 'output', the rest of the tree is simply deleted.", "labels": [], "entities": [{"text": "sentence generation", "start_pos": 3, "end_pos": 22, "type": "TASK", "confidence": 0.7209200412034988}]}, {"text": "In tile reverse process, when a sentence is input, a syntax tree must first be found before it can be interpreted.", "labels": [], "entities": [{"text": "tile reverse process", "start_pos": 3, "end_pos": 23, "type": "TASK", "confidence": 0.7976914842923483}]}, {"text": "REVELATION1 assumes that a separate SG parser (not discussed here) is available; for an example of such a parser see O'Donoghue.", "labels": [], "entities": [{"text": "REVELATION1", "start_pos": 0, "end_pos": 11, "type": "METRIC", "confidence": 0.8537668585777283}, {"text": "O'Donoghue", "start_pos": 117, "end_pos": 127, "type": "DATASET", "confidence": 0.9771459102630615}]}, {"text": "Thus REVELATION1 directly mirrors the generator, while the parser mirrors tlle tree deletion process.", "labels": [], "entities": [{"text": "REVELATION1", "start_pos": 5, "end_pos": 16, "type": "METRIC", "confidence": 0.9907510876655579}]}, {"text": "REVELATION1 has been developed within the PoPI.OG environment, a It is coded in a combination of PoPll and Prolog and utilizes GENESYS.", "labels": [], "entities": [{"text": "REVELATION1", "start_pos": 0, "end_pos": 11, "type": "METRIC", "confidence": 0.9619749188423157}, {"text": "PoPI.OG environment", "start_pos": 42, "end_pos": 61, "type": "DATASET", "confidence": 0.8721106946468353}, {"text": "PoPll", "start_pos": 97, "end_pos": 102, "type": "DATASET", "confidence": 0.9196648597717285}, {"text": "Prolog", "start_pos": 107, "end_pos": 113, "type": "DATASET", "confidence": 0.8212482929229736}, {"text": "GENESYS", "start_pos": 127, "end_pos": 134, "type": "DATASET", "confidence": 0.8342728018760681}]}, {"text": "GENESYS is a very large SG generator for English, written in Prolog (Fawcett and Tucker) and it is version PG1.5 that has been used for the development and testing of REVELATIONI.", "labels": [], "entities": [{"text": "GENESYS", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.8847056031227112}, {"text": "REVELATIONI", "start_pos": 167, "end_pos": 178, "type": "METRIC", "confidence": 0.5770851373672485}]}, {"text": "GENESYS and REVELATION are part of a much larger project, the COMMUNAL 4 Project, the aim of which is to build a natural language interface to a rich SG oriented IKBS in tim domain of personnel manageinterp|~etation.", "labels": [], "entities": [{"text": "GENESYS", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.8307412266731262}, {"text": "REVELATION", "start_pos": 12, "end_pos": 22, "type": "METRIC", "confidence": 0.9842875003814697}]}, {"text": "These processes are not necessarily sequential, although it greatly simplifies things if they are treated as such.", "labels": [], "entities": []}, {"text": "tlere I assume a sequential scheme in which the parsing process passes a syntax tree to the interpreter.", "labels": [], "entities": []}, {"text": "2Fawcett's Systemic Functional Grammar, his development of a HMlidayan SG.", "labels": [], "entities": []}, {"text": "3POPLOG is a multi-language development environment contaiifing incremental compilers for POPII (the base language), Prolog, Comnmn Lisp and Standard ML, an integrated editor and numerous support tools.", "labels": [], "entities": [{"text": "3POPLOG", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.8164799213409424}, {"text": "Prolog", "start_pos": 117, "end_pos": 123, "type": "DATASET", "confidence": 0.9301344156265259}]}, {"text": "4The COMMUNAL Project at University of ~Vales College of Cardiff (UWCC) Computational Linguistics Unit and Leeds University School of Computer Studies was sponsored by RSRE Malvern, ICL and Longman.", "labels": [], "entities": [{"text": "University of ~Vales College of Cardiff (UWCC) Computational Linguistics Unit", "start_pos": 25, "end_pos": 102, "type": "DATASET", "confidence": 0.7897830192859356}, {"text": "RSRE Malvern", "start_pos": 168, "end_pos": 180, "type": "DATASET", "confidence": 0.7814265191555023}, {"text": "ICL", "start_pos": 182, "end_pos": 185, "type": "DATASET", "confidence": 0.8118219971656799}, {"text": "Longman", "start_pos": 190, "end_pos": 197, "type": "DATASET", "confidence": 0.9268379211425781}]}, {"text": "This is not the first time a semantic interpreter has been attempted fora large SG: has developed a sentence analysis method (both parsing and interpretation together in my terminology) based on the NIGEL grammar.", "labels": [], "entities": [{"text": "sentence analysis", "start_pos": 100, "end_pos": 117, "type": "TASK", "confidence": 0.7403424978256226}]}, {"text": "In his approach the SG is compiled into a Functional Unification Grammar (FUG) (see Kay, a representation language with some systemic links) and then existing (but extended) FUG parsing techniques are used to find a syntax tree plus an interpretation fora sentence.", "labels": [], "entities": []}, {"text": "The REVELATION1 approach differs from this compilation method since the interpretation is achieved within a systemic framework.", "labels": [], "entities": [{"text": "REVELATION1", "start_pos": 4, "end_pos": 15, "type": "METRIC", "confidence": 0.8447393178939819}]}, {"text": "No other SG-based model (to my knowledge) has been used for both generation and interpretation in this way.", "labels": [], "entities": [{"text": "generation and interpretation", "start_pos": 65, "end_pos": 94, "type": "TASK", "confidence": 0.6344062685966492}]}], "datasetContent": [], "tableCaptions": []}