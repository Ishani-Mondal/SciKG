{"title": [{"text": "Dependency Parsing with an Extended Finite State Approach", "labels": [], "entities": [{"text": "Dependency Parsing", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.8200415074825287}, {"text": "Extended Finite State Approach", "start_pos": 27, "end_pos": 57, "type": "METRIC", "confidence": 0.517179325222969}]}], "abstractContent": [{"text": "This paper presents a dependency parsing scheme using an extended finite state approach.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 22, "end_pos": 40, "type": "TASK", "confidence": 0.8207748532295227}]}, {"text": "The parser augments input representation with \"channels\" so that links representing syntactic dependency relations among words can be accommodated, and iterates on the input a number of times to arrive at a fixed point.", "labels": [], "entities": []}, {"text": "Intermediate configurations violating various constraints of projective dependency representations such as no crossing links, no independent items except sentential head, etc, are filtered via finite state filters.", "labels": [], "entities": []}, {"text": "We have applied the parser to dependency parsing of Turkish.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 30, "end_pos": 48, "type": "TASK", "confidence": 0.8562521934509277}]}], "introductionContent": [{"text": "Recent advances in the development of sophisticated tools for building finite state systems (e.g., XRCE Finite State Tools (), ATgzT Tools () have fostered the development of quite complex finite state systems for natural language processing.", "labels": [], "entities": []}, {"text": "In the last several years, there have been a number of studies on developing finite state parsing systems,).", "labels": [], "entities": [{"text": "finite state parsing", "start_pos": 77, "end_pos": 97, "type": "TASK", "confidence": 0.6501807073752085}]}, {"text": "There have also been a number of approaches to natural language parsing using extended finite state approaches in which a finite state engine is applied multiple times to the input, or various derivatives thereof, until some stopping condition is reached.", "labels": [], "entities": [{"text": "natural language parsing", "start_pos": 47, "end_pos": 71, "type": "TASK", "confidence": 0.6419323881467184}]}, {"text": "presents an approach for parsing in which the input is iteratively bracketed using a finite state transducer.", "labels": [], "entities": [{"text": "parsing", "start_pos": 25, "end_pos": 32, "type": "TASK", "confidence": 0.9726062417030334}]}, {"text": "Abney(1996) presents a finite state parsing approach in which a tagged sentence is parsed by transducers which progressively transform the input to sequences of symbols representing phrasal constituents.", "labels": [], "entities": [{"text": "finite state parsing", "start_pos": 23, "end_pos": 43, "type": "TASK", "confidence": 0.6475733518600464}]}, {"text": "This paper presents an approach to dependency parsing using an extended finite state model resembling the approaches of Roche and Abney.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 35, "end_pos": 53, "type": "TASK", "confidence": 0.8527766466140747}]}, {"text": "The parser produces outputs that encode a labeled dependency tree representation of the syntactic relations between the words in the sentence.", "labels": [], "entities": []}, {"text": "We assume that the reader is familiar with the basic concepts of finite state transducers (FST hereafter), finite state devices that map between two regular languages U and L (.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}