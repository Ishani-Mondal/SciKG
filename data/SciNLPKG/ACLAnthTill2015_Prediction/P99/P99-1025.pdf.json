{"title": [{"text": "Construct Algebra: Analytical Dialog Management", "labels": [], "entities": [{"text": "Construct Algebra: Analytical Dialog Management", "start_pos": 0, "end_pos": 47, "type": "TASK", "confidence": 0.7499555100997289}]}], "abstractContent": [{"text": "In this paper we describe a systematic approach for creating a dialog management system based on a Construct Algebra, a collection of relations and operations on a task representation.", "labels": [], "entities": []}, {"text": "These relations and operations are analytical components for building higher level abstractions called dialog motivators.", "labels": [], "entities": []}, {"text": "The dialog manager, consisting of a collection of dialog motivators, is entirely built using the Construct Algebra.", "labels": [], "entities": []}], "introductionContent": [{"text": "The dialog manager described in this paper implements a novel approach to the problem of dialog management.", "labels": [], "entities": [{"text": "dialog management", "start_pos": 89, "end_pos": 106, "type": "TASK", "confidence": 0.8884491324424744}]}, {"text": "There are three major contributions: the task knowledge representation, a Construct Algebra and a collection of dialog motivators.", "labels": [], "entities": [{"text": "task knowledge representation", "start_pos": 41, "end_pos": 70, "type": "TASK", "confidence": 0.6477822065353394}]}, {"text": "The task knowledge representation exploits object-oriented paradigms.", "labels": [], "entities": []}, {"text": "The dialog motivators provide the dialog manager with the dialog strategies that govern its behavior.", "labels": [], "entities": []}, {"text": "The Construct Algebra provides the building blocks needed to create new dialog motivators and analyze them.", "labels": [], "entities": []}, {"text": "The first main component of this dialog manager is the task knowledge representation.", "labels": [], "entities": []}, {"text": "The task knowledge is encoded in objects.", "labels": [], "entities": []}, {"text": "These objects form an inheritance hierarchy that defines the relationships that exists among these objects.", "labels": [], "entities": []}, {"text": "The dialog manager exploits this inheritance hierarchy in determining what queries to pose to the user.", "labels": [], "entities": []}, {"text": "No explicit states and transitions need to be defined using this framework (.", "labels": [], "entities": []}, {"text": "A change to the dialog does not require a change to the dialog manager, but more simply, a change to the inheritance hierarchy.", "labels": [], "entities": []}, {"text": "The second main component of this dialog manager is the collection of dialog motivators.", "labels": [], "entities": []}, {"text": "The dialog motivators determine what actions need to betaken (e.g. ask a confirmation question).", "labels": [], "entities": []}, {"text": "The dialog motivators are founded on a theoretical framework called a Construct Algebra.", "labels": [], "entities": []}, {"text": "The Construct Algebra allows a designer to add new motivators in a principled way.", "labels": [], "entities": []}, {"text": "Creating anew application requires defining the inheritance hierarchy and perhaps additional dialog motivators not encompassed in the existing collection.", "labels": [], "entities": []}, {"text": "This dialog manager has been used for two applications.", "labels": [], "entities": []}, {"text": "The first is a spoken dialog system that enables a user to respond to the open-ended prompt How may I help you?", "labels": [], "entities": []}, {"text": "(HMIHY) ( ).", "labels": [], "entities": [{"text": "HMIHY)", "start_pos": 1, "end_pos": 7, "type": "DATASET", "confidence": 0.9639349281787872}]}, {"text": "The system recognizes the words the customer has said () and extracts the meaning of these words ) to determine what service they want, conducting a dialog) to effectively engage the customer in a conversation that will result in providing the service they requested.", "labels": [], "entities": []}, {"text": "The second application is to Voice Post Query (VPQ)) which provides spoken access to the information in large personnel database (> 120,000 entries).", "labels": [], "entities": []}, {"text": "A user can ask for employee information such as phone number, fax number, work location, or ask to call an employee.", "labels": [], "entities": []}, {"text": "These applications are signifi-cantly different but they both use the same dialog manager.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}