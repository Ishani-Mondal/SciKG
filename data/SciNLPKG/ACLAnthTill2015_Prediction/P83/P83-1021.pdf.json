{"title": [], "abstractContent": [{"text": "By exploring the relationship between parsing and deduction, anew and more general view of chart parsing is obtained, which encompasses parsing for grammar formalisms based on unification, and is the basis of the Earley Deduction proof procedure for definite clauses.", "labels": [], "entities": [{"text": "parsing", "start_pos": 38, "end_pos": 45, "type": "TASK", "confidence": 0.9643277525901794}, {"text": "chart parsing", "start_pos": 91, "end_pos": 104, "type": "TASK", "confidence": 0.7972192466259003}]}, {"text": "The efficiency of this approach for an interesting class of grammars is discussed.", "labels": [], "entities": []}], "introductionContent": [{"text": "The aim of this paper is to explore the relationship between parsing and deduction.", "labels": [], "entities": []}, {"text": "The basic notion, which goes back to, h'zs seen a very efficient, if limited, realization in tile use of the logic programming language Prolog for parsing.", "labels": [], "entities": []}, {"text": "The connection between parsing and deduction was developed further in the design of the Eariey Deduction proof procedure, which will also be discussed at length here.", "labels": [], "entities": [{"text": "parsing", "start_pos": 23, "end_pos": 30, "type": "TASK", "confidence": 0.9766421318054199}, {"text": "Eariey Deduction proof", "start_pos": 88, "end_pos": 110, "type": "TASK", "confidence": 0.5155122975508372}]}, {"text": "Investigation of the connection between parsing and deduction yields several important benefits: \u2022 A theoretically clean mechanism to connect parsing with the inference needed for semantic interpretation.", "labels": [], "entities": [{"text": "parsing", "start_pos": 40, "end_pos": 47, "type": "TASK", "confidence": 0.9625245928764343}, {"text": "semantic interpretation", "start_pos": 180, "end_pos": 203, "type": "TASK", "confidence": 0.710502564907074}]}, {"text": "llandling of gaps and unbounded dependencies \"on the fly\" without adding special mechanisms to the parser.", "labels": [], "entities": []}, {"text": ":\\ reinterprecation and generalization of chart parsing that abstracts from unessential datastructure details.", "labels": [], "entities": [{"text": "chart parsing", "start_pos": 42, "end_pos": 55, "type": "TASK", "confidence": 0.751982569694519}]}, {"text": "* Techniques that are applicable to parsing in related formalisms not directly based on logic.", "labels": [], "entities": [{"text": "parsing", "start_pos": 36, "end_pos": 43, "type": "TASK", "confidence": 0.9640406966209412}]}, {"text": "IThis work wa~ partially supported by the Defense Advanced Research Projects Agency under Contract N00039-80-C-0575 with the Naval Electronic Systems Command.", "labels": [], "entities": []}, {"text": "The views and conclusions contained in this article are those of the authors and should not be interpreted as representative of the official policies, either expressed or imp{led, of the Defense Advanced Research Projects Agency or the United Slates Government.", "labels": [], "entities": [{"text": "United Slates Government", "start_pos": 236, "end_pos": 260, "type": "DATASET", "confidence": 0.8693297704060873}]}, {"text": "\u2022 Elucidation of parsing complexity issues for related formalisms, in particular lexieal-functional grammar (LFG).", "labels": [], "entities": []}, {"text": "Our study of these topics is still far from complete; therefore, besides offering some initial results, we shall discuss various outstanding questions.", "labels": [], "entities": []}, {"text": "The connection between parsing and deduction is based on the axiomatization of context-free grammars in definite clauses, a particularly simple subset of firstorder logic.", "labels": [], "entities": []}, {"text": "This axiomatization allows us to identify contextfree parsing algorithms with proof procedures fora restricted class of definite clauses, those derived from context-free rules.", "labels": [], "entities": []}, {"text": "This identification can then be generalized to inc{ude larger classes of definite clauses to which the same algorithms can be applied, with simple modifications.", "labels": [], "entities": []}, {"text": "Those larger classes of definite clauses can be seen as grammar formalisms in which the atomic grammar symbols of context-free grammars have been replaced by complex symbols that are matched by unification.", "labels": [], "entities": []}, {"text": "The simplest of these formalisms is definite-clause grammars (DCG).", "labels": [], "entities": [{"text": "definite-clause grammars (DCG)", "start_pos": 36, "end_pos": 66, "type": "TASK", "confidence": 0.7920765519142151}]}, {"text": "There is a close relationship between DCGs ~nd other ~,rammar formalisms based on unification, such as Unification Grammar {UG), LFG, PATR-2 {Shieber.", "labels": [], "entities": []}, {"text": "1083) and the more recent versions of GPSG ().", "labels": [], "entities": [{"text": "GPSG", "start_pos": 38, "end_pos": 42, "type": "DATASET", "confidence": 0.943250834941864}]}, {"text": "The parsing a{gorithms we are concerned with are online algorithms, in the sense that they apply the constraints specified by the augmentation of a rule a~ soon as the rule is applied.", "labels": [], "entities": []}, {"text": "In contrast, an olTline parsing algorithm will consist of two phases: a context-free parsing algorithm followed by application of the constraints to all the resulting analyses.", "labels": [], "entities": [{"text": "olTline parsing", "start_pos": 16, "end_pos": 31, "type": "TASK", "confidence": 0.6294161379337311}]}, {"text": "The pap('r is organized as follows.", "labels": [], "entities": []}, {"text": "Section 2 gives an overview of the concepts of definite clause logic, definite clause grammars, definite clause proof procedures, and chart parsing, Section 3 discusses the connection betwee DCGs and LFG.", "labels": [], "entities": [{"text": "definite clause logic", "start_pos": 47, "end_pos": 68, "type": "TASK", "confidence": 0.6332052747408549}, {"text": "chart parsing", "start_pos": 134, "end_pos": 147, "type": "TASK", "confidence": 0.7593034207820892}]}, {"text": "Section 4 describes the Earley Deduction definite-clause proof procedure.", "labels": [], "entities": [{"text": "Earley Deduction definite-clause proof", "start_pos": 24, "end_pos": 62, "type": "TASK", "confidence": 0.6601164117455482}]}, {"text": "Section 5 then brings out the connection between Earley Deduction and chart parsing, and shows the added generality brought in by the proof procedure approach.", "labels": [], "entities": [{"text": "chart parsing", "start_pos": 70, "end_pos": 83, "type": "TASK", "confidence": 0.7101285010576248}]}, {"text": "Section 6 outlines some oi the problems of implementing Earley Deduction and similar parsing procedure~.", "labels": [], "entities": []}, {"text": "Finally, Section 7 discusses questions of computational complexity and decidability.", "labels": [], "entities": []}, {"text": "A set of definite clauses forms a program, and the clauses in a program are called input clauses.", "labels": [], "entities": []}, {"text": "A program defines the relations denoted by the predicates appearing in the heads of clauses.", "labels": [], "entities": []}, {"text": "When using a definiteclause proof procedure, such as Prolog (, a goal statement requests the proof procedure to find provable instances of P.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 53, "end_pos": 59, "type": "DATASET", "confidence": 0.9269776344299316}]}, {"text": "The variables Si are the string arguments, representing positions m the input string.", "labels": [], "entities": []}, {"text": "For example, the context-free rule \"S ~ NP VP\" is translated into \"s(S0,S2) np{,qO.Sl} k\" vp(S1,S2),\" which can be paraphrased as \"'there is an S from SO to $2 in the input string if there is an NP from SO to S1 and a V'P from S1 to 82.\"", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}