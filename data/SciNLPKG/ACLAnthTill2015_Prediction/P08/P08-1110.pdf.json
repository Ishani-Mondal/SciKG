{"title": [{"text": "A Deductive Approach to Dependency Parsing *", "labels": [], "entities": [{"text": "Dependency Parsing", "start_pos": 24, "end_pos": 42, "type": "TASK", "confidence": 0.7673037350177765}]}], "abstractContent": [{"text": "We define anew formalism, based on Sikkel's parsing schemata for constituency parsers, that can be used to describe, analyze and compare dependency parsing algorithms.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 137, "end_pos": 155, "type": "TASK", "confidence": 0.7336370646953583}]}, {"text": "This abstraction allows us to establish clear relations between several existing projective dependency parsers and prove their correctness.", "labels": [], "entities": []}], "introductionContent": [{"text": "Dependency parsing consists of finding the structure of a sentence as expressed by a set of directed links (dependencies) between words.", "labels": [], "entities": [{"text": "Dependency parsing", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.8769991099834442}]}, {"text": "This is an alternative to constituency parsing, which tries to find a division of the sentence into segments (constituents) which are then broken up into smaller constituents.", "labels": [], "entities": [{"text": "constituency parsing", "start_pos": 26, "end_pos": 46, "type": "TASK", "confidence": 0.8464667499065399}]}, {"text": "Dependency structures directly show head-modifier and head-complement relationships which form the basis of predicate argument structure, but are not represented explicitly in constituency trees, while providing a representation in which no non-lexical nodes have to be postulated by the parser.", "labels": [], "entities": [{"text": "predicate argument structure", "start_pos": 108, "end_pos": 136, "type": "TASK", "confidence": 0.6555166145165762}]}, {"text": "In addition to this, some dependency parsers are able to represent non-projective structures, which is an important feature when parsing free word order languages in which discontinuous constituents are common.", "labels": [], "entities": [{"text": "parsing free word order languages", "start_pos": 129, "end_pos": 162, "type": "TASK", "confidence": 0.8659608125686645}]}, {"text": "The formalism of parsing schemata) is a useful tool for the study of constituency parsers since it provides formal, high-level descriptions of parsing algorithms that can be used to prove their formal properties (such as correctness), establish relations between them, derive new parsers from existing ones and obtain efficient implementations automatically ().", "labels": [], "entities": []}, {"text": "The formalism was initially defined for context-free grammars and later applied to other constituencybased formalisms, such as tree-adjoining grammars * Partially supported by Ministerio de Educaci\u00f3n y Ciencia and FEDER (TIN2004-07246-C03, HUM2007-66607-C04), Xunta de Galicia (PGIDIT07SIN005206PR, PGIDIT05PXIC-10501PN, PGIDIT05PXIC30501PN, Rede Galega de Proc. da Linguaxe e RI) and Programa de Becas FPU.", "labels": [], "entities": [{"text": "FEDER", "start_pos": 214, "end_pos": 219, "type": "METRIC", "confidence": 0.833136260509491}, {"text": "FPU", "start_pos": 403, "end_pos": 406, "type": "DATASET", "confidence": 0.5599125623703003}]}, {"text": "However, since parsing schemata are defined as deduction systems over sets of constituency trees, they cannot be used to describe dependency parsers.", "labels": [], "entities": [{"text": "parsing schemata", "start_pos": 15, "end_pos": 31, "type": "TASK", "confidence": 0.9014817476272583}]}, {"text": "In this paper, we define an analogous formalism that can be used to define, analyze and compare dependency parsers.", "labels": [], "entities": []}, {"text": "We use this framework to provide uniform, high-level descriptions fora wide range of well-known algorithms described in the literature, and we show how they formally relate to each other and how we can use these relations and the formalism itself to prove their correctness.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}