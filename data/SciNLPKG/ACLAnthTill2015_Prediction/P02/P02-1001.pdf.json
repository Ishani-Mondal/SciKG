{"title": [{"text": "Parameter Estimation for Probabilistic Finite-State Transducers *", "labels": [], "entities": [{"text": "Parameter Estimation", "start_pos": 0, "end_pos": 20, "type": "TASK", "confidence": 0.7009962797164917}]}], "abstractContent": [{"text": "Weighted finite-state transducers suffer from the lack of a training algorithm.", "labels": [], "entities": []}, {"text": "Training is even harder for transducers that have been assembled via finite-state operations such as composition, minimization, union, concatenation, and closure, as this yields tricky parameter tying.", "labels": [], "entities": []}, {"text": "We formulate a \"parameterized FST\" paradigm and give training algorithms for it, including a general bookkeeping trick (\"expectation semirings\") that cleanly and efficiently computes expectations and gradients.", "labels": [], "entities": [{"text": "FST\" paradigm", "start_pos": 30, "end_pos": 43, "type": "TASK", "confidence": 0.8528762658437093}]}, {"text": "1 Background and Motivation Rational relations on strings have become widespread in language and speech engineering (Roche and Schabes, 1997).", "labels": [], "entities": []}, {"text": "Despite bounded memory they are well-suited to describe many linguistic and tex-tual processes, either exactly or approximately.", "labels": [], "entities": []}, {"text": "A relation is a set of (input, output) pairs.", "labels": [], "entities": []}, {"text": "Relations are more general than functions because they may pair a given input string with more or fewer than one output string.", "labels": [], "entities": []}, {"text": "The class of so-called rational relations admits a nice declarative programming paradigm.", "labels": [], "entities": []}, {"text": "Source code describing the relation (a regular expression) is compiled into efficient object code (in the form of a 2-tape automaton called a finite-state transducer).", "labels": [], "entities": []}, {"text": "The object code can even be optimized for runtime and code size (via algorithms such as deter-minization and minimization of transducers).", "labels": [], "entities": []}, {"text": "This programming paradigm supports efficient nondeterminism, including parallel processing over infinite sets of input strings, and even allows \"re-verse\" computation from output to input.", "labels": [], "entities": []}, {"text": "Its unusual flexibility for the practiced programmer stems from the many operations under which rational relations are closed.", "labels": [], "entities": []}, {"text": "It is common to define further useful operations (as macros), which modify existing relations not by editing their source code but simply by operating on them \"from outside.\"", "labels": [], "entities": []}, {"text": "* A brief version of this work, with some additional material , first appeared as (Eisner, 2001a).", "labels": [], "entities": []}, {"text": "A leisurely journal-length version with more details has been prepared and is available.", "labels": [], "entities": []}, {"text": "The entire paradigm has been generalized to weighted relations, which assign a weight to each (input, output) pair rather than simply including or excluding it.", "labels": [], "entities": []}, {"text": "If these weights represent probabilities P (input, output) or P (output | input), the weighted relation is called a joint or conditional (probabilistic) relation and constitutes a statistical model.", "labels": [], "entities": []}, {"text": "Such models can be efficiently restricted, manipulated or combined using rational operations as before.", "labels": [], "entities": []}, {"text": "An artificial example will appear in \u00a72.", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}