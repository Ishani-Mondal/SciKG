{"title": [{"text": "SYSTEM DEMONSTRATION NATURAL LANGUAGE GENERATION WITH ABSTRACT MACHINE", "labels": [], "entities": [{"text": "SYSTEM DEMONSTRATION NATURAL LANGUAGE GENERATION WITH ABSTRACT MACHINE", "start_pos": 0, "end_pos": 70, "type": "TASK", "confidence": 0.5331020131707191}]}], "abstractContent": [{"text": "\" We present a system for Natural Language Generation based on an Abstract Machine approach.", "labels": [], "entities": [{"text": "Natural Language Generation", "start_pos": 26, "end_pos": 53, "type": "TASK", "confidence": 0.6666677892208099}]}, {"text": "Our abstract machine operates on grammar s encoded in a unification-based Typed Feature Structure formalism, and is capable of both generation and parsing.", "labels": [], "entities": []}, {"text": "For efficient generation , grammars are first inverted to a suitable form, and then compiled into abstract machine instructions.", "labels": [], "entities": []}, {"text": "A dual compiler translates the same input grammar into an abstract machine program for parsing.", "labels": [], "entities": []}, {"text": "Both generation and parsing programs are executed under the same (chart-based) evaluation strategy: This results in an efficient, bidirectional (parsing/generation) System for Natural Language Processing.", "labels": [], "entities": [{"text": "parsing", "start_pos": 20, "end_pos": 27, "type": "TASK", "confidence": 0.9529694318771362}]}, {"text": "Moreover, the system possesses ample debugging features , and thus can serve as a user-friendly environment for bidirectional grammar design and development.", "labels": [], "entities": []}, {"text": "1 Overview An input for the generation 1 task is a logical form which represents a meaning, and a grammar to govern the generation process.", "labels": [], "entities": []}, {"text": "The output consists of one or more phrases in the language of the grammar whose meaning is (up to logical equivalence) the given logical form.", "labels": [], "entities": []}, {"text": "The system robe demonstrated applies an Abstract.Machine (AM) approach for Natural Language Generation, within the framework of Typed Feature Structures (Carpenter, 1992b).", "labels": [], "entities": [{"text": "Natural Language Generation", "start_pos": 75, "end_pos": 102, "type": "TASK", "confidence": 0.6578381260236105}]}, {"text": "Such a machine is an abstraction over an ordinary computer, lying somewhere between regular high-level languages and common hardware architectures.", "labels": [], "entities": []}, {"text": "Programming an Abstract Machine has proved-fruitful in previous research, reaching a peak as a highly efficient technique to build Prolog compilers (Ait-Kaci, 199!).", "labels": [], "entities": []}, {"text": "AMALIA 2 has two compilers of grammars into Abstract Machine instructions; the outputs of compilation are AM programs which perform either chart generation or chart parsing, both according to the given grammar.", "labels": [], "entities": [{"text": "AMALIA", "start_pos": 0, "end_pos": 6, "type": "DATASET", "confidence": 0.7638804316520691}, {"text": "chart generation", "start_pos": 139, "end_pos": 155, "type": "TASK", "confidence": 0.7439031898975372}, {"text": "chart parsing", "start_pos": 159, "end_pos": 172, "type": "TASK", "confidence": 0.6775832027196884}]}, {"text": "Both tasks use an auxiliary table (chart) to store intermediate processing results..AMALIA has a uniform core engine for bottom-up chart processing, which interprets the given (abstract machine) program, and realizes the generation or parsing task.", "labels": [], "entities": [{"text": "AMALIA", "start_pos": 84, "end_pos": 90, "type": "DATASET", "confidence": 0.5722984671592712}]}, {"text": "In the case of generation it is the given semantic meaning whose components are consumed in the process.", "labels": [], "entities": []}, {"text": "The only differences between the two processing directions are in the nature of chart items and interpretation of the final results.", "labels": [], "entities": []}, {"text": "Thereby, AMALIA makes dual use of its chart and forms a complete bidirectional natural language system, which is considered an advantage in the literature (Strzalk0wski, 1994).", "labels": [], "entities": [{"text": "AMALIA", "start_pos": 9, "end_pos": 15, "type": "DATASET", "confidence": 0.4815691411495209}]}, {"text": "The system is capable of very efficient processing, since grammars are precompiled directly into abstract machine instructions, which are subsequently executed over and over.", "labels": [], "entities": []}, {"text": "lln this work we mean by \"generation\" what is sometimes known also as \"syntactic generation\".", "labels": [], "entities": []}, {"text": "plannin$, speaker intentions and the like are considered here.", "labels": [], "entities": []}, {"text": "/ 2The acronym stands for \"Abstract MAchine for Llnguistic Applications\".", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}