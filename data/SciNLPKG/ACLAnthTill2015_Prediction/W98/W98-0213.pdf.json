{"title": [], "abstractContent": [{"text": "2 CabriII We present an environment for multimodal vi-sualization of geometrical constructions, including both graphical and textual realizations.", "labels": [], "entities": []}, {"text": "The graphic interface is programmed by direct manipulation , and this process is mirrored in the text.", "labels": [], "entities": []}, {"text": "The text resembles a program written in a classical programming language, but no computer science knowledge is required.", "labels": [], "entities": []}, {"text": "The guiding principle is that of textual and graph-ical equivalence: the same linguistic resources are used for graphical construction and for text generation.", "labels": [], "entities": [{"text": "graphical construction", "start_pos": 112, "end_pos": 134, "type": "TASK", "confidence": 0.7157876044511795}, {"text": "text generation", "start_pos": 143, "end_pos": 158, "type": "TASK", "confidence": 0.7434916794300079}]}, {"text": "During construction, the names of several tools appear in pop-up menus.", "labels": [], "entities": []}, {"text": "As the tools are used, their names are written in the text, and geometrical objects are simultaneously drawn in the figure and written in the text.", "labels": [], "entities": []}, {"text": "Text can be produced in a variety of \" di-alects\" according to the user's mother tongue.", "labels": [], "entities": []}, {"text": "Moreover, the visualization system can be used for interfaces which include a facility for programming by demonstration (with macro definitions) and can offer textual support for interaction through other media.", "labels": [], "entities": []}], "introductionContent": [{"text": "In this paper, we present an environment for multimodal (graphical and textual) visualization of geometrical constructions.", "labels": [], "entities": []}, {"text": "We first present CabriII, the program on which this work is based.", "labels": [], "entities": []}, {"text": "In the second section, we elaborate on the definition of macro-constructions using this software.", "labels": [], "entities": []}, {"text": "Some of the reasons for introducing such a textual view in a geometry program are explained in section three.", "labels": [], "entities": []}, {"text": "The next section focuses on the choices that have guided de:velopment.", "labels": [], "entities": []}, {"text": "The last section discusses results and perspectives.", "labels": [], "entities": []}, {"text": "CabriII (or Cabri-g~om~tre II) is a direct manipulation program for interactive \"exploration\" of geometrical diagrams.", "labels": [], "entities": []}, {"text": "Many mathematics teachers and mathematicians use it for teaching or for their own work.", "labels": [], "entities": []}, {"text": "It is the result of a tight collaboration between mathematicians, software researchers, educators, and teachers in everyday contact with pupils.", "labels": [], "entities": []}, {"text": "Using this software, the user is immersed in an intelligent microworld.", "labels": [], "entities": []}, {"text": "CabriII is an excellent learning environment for geometry,.", "labels": [], "entities": [{"text": "CabriII", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.9558117389678955}]}, {"text": "Users construct geometrical diagrams and create new tools with macro-constructions.", "labels": [], "entities": []}, {"text": "A teacher can profile the environment for specific learning tasks by embedding macro-constructions in his or her own tools.", "labels": [], "entities": []}, {"text": "Through interactive manipulation of geometrical constructions, a pupil may for instance observe invariant properties and recognize them as constraints.", "labels": [], "entities": []}, {"text": "All objects (for example, geometric objects and interface elements) are manipulated directly.", "labels": [], "entities": []}, {"text": "r ;:i :,fii:~iiii~7,, ::i~il, i-iiii:ii:-:~: 6~i~ili,,ri;i ::-~iii~: i: , ::7:-,'::i::!", "labels": [], "entities": []}, {"text": "3 What is a macro?", "labels": [], "entities": []}, {"text": "CabriII can store as \"macros\" construction methods which users tryout.", "labels": [], "entities": [{"text": "CabriII", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.8697816133499146}]}, {"text": "This term is commonly used in the domain of programming by demonstration.", "labels": [], "entities": []}, {"text": "The aim of writing a macro is to define anew tool by using a list of repeatedly invoked constructions (Sugiura, 96).", "labels": [], "entities": []}, {"text": "For instance, it is possible to define a macro to construct the symmetric point of a given point with respect to a line.", "labels": [], "entities": []}, {"text": "As a matter of fact, CabriII does not store the whole construction, but only its \"useful\" part, determined automatically when the user indicates the \"initial\" and \"final\" objects of the construction.", "labels": [], "entities": []}, {"text": "This method lets the user decide to construct a macro after embarking on a complex construction, rather than before.", "labels": [], "entities": []}, {"text": "It also minimizes the length of the macro (which is strongly related to the number of objects retained).", "labels": [], "entities": []}, {"text": "A consequence of this freedom is that a macro definition has to pass a validation test which can fail for various reasons, such as omission of necessary initial objects, dependency loops (in which an initial object depends on a final object), etc.", "labels": [], "entities": []}, {"text": "shows the dependencies between geometrical objects in the definition of a construction method for drawing the symmetric point of a given point.", "labels": [], "entities": []}, {"text": "The method chosen is the same as in.", "labels": [], "entities": []}, {"text": "The object names are written in order of their creation, from left to right.", "labels": [], "entities": []}, {"text": "The names written in single quotes are the names displayed in the diagram, and arrows are used to represent object dependencies.", "labels": [], "entities": []}, {"text": "The selected initial object names are surrounded by thin rectangles, and the selected final objects by thicker ones.", "labels": [], "entities": []}, {"text": "The macro creation process extracts the smallest graph that connects the final objects to the initial ones.", "labels": [], "entities": [{"text": "macro creation", "start_pos": 4, "end_pos": 18, "type": "TASK", "confidence": 0.7376956045627594}]}, {"text": "Notice that the macro obtained may not correspond exactly to the user's expectations if s/he has made mistakes in certain construction choices.", "labels": [], "entities": []}, {"text": "In that case, the user must debug the macro.", "labels": [], "entities": []}, {"text": "Using the text form is far better for that purpose than redoing the whole construction.", "labels": [], "entities": []}, {"text": "4 Why is a textual view used in geometry?", "labels": [], "entities": []}, {"text": "In mathematics, graphical visualization is a fundamental support for reasoning.", "labels": [], "entities": []}, {"text": "The appearance of dynamic geometry opens new doors by making the concept of diagraming more accessible: simply drawing, by contrast, is more static and discrete.", "labels": [], "entities": []}, {"text": "However, in purely graphical interfaces, the choices which guide the construction of various diagram objects can only be tracked down by observing their effect, i.e. by observing the relative behavior of the objects throughout diagram deformations.", "labels": [], "entities": []}, {"text": "There is no longer direct access to the causes, only to the consequences.", "labels": [], "entities": []}, {"text": "The information displayed is not a complete history including the creation, deformations and deletion of all objects, but rather only a record of the construction steps (dependencies) of the stored objects.", "labels": [], "entities": []}, {"text": "One way to display all of the constraints for the whole diagram would be to display the program which drew the diagram.", "labels": [], "entities": []}, {"text": "Similarly, we can observe that macro definition is closely related to classical programming, so that a textual medium becomes an absolute must.", "labels": [], "entities": [{"text": "macro definition", "start_pos": 31, "end_pos": 47, "type": "TASK", "confidence": 0.7046334147453308}]}, {"text": "We can also add to the software the full range of classical programming environment tools, such as a step-by-step replay tool associated with cursor progression, or a tool aiding visualization of the correspondence between object value and graphic rendering.", "labels": [], "entities": []}, {"text": "Specific tools associated with the relevant domain (dynamic geometry) are also useful.", "labels": [], "entities": []}, {"text": "For instance, the use of color allows visualization of dependencies between objects, and aids debugging if the macro validation fails.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}