{"title": [], "abstractContent": [{"text": "This paper introduces to the finite-state calculus a family of directed replace operators .", "labels": [], "entities": []}], "introductionContent": [{"text": "Transducers compiled from simple replace expressions UPPER -> LOWER ( are generally nondeterministic in the sense that they may yield multiple results even if the lower language consists of a single string.", "labels": [], "entities": [{"text": "UPPER -> LOWER", "start_pos": 53, "end_pos": 67, "type": "METRIC", "confidence": 0.8147964278856913}]}, {"text": "For example, let us consider the transducer in The application of this transducer to the input \"aba\" produces four alternate results, \"axa\", \"ax\", \"xa\", and \"x\", as shown in, since there are four paths in the network that contain \"aba\" on the upper side with different strings on the lower side.", "labels": [], "entities": []}, {"text": "This nondeterminism arises in two ways.", "labels": [], "entities": []}, {"text": "First of all, a replacement can start at any point.", "labels": [], "entities": []}, {"text": "Thus we get different results for the \"aba\" depending on whether we start at the beginning of the string or in the middle at the \"b\".", "labels": [], "entities": []}, {"text": "Secondly, there maybe alternative replacements with the same starting point.", "labels": [], "entities": []}, {"text": "In the beginning of \"aba\", we can replace either \"ab\" or \"aba\".", "labels": [], "entities": []}, {"text": "Starting in the middle, we can replace either \"b\" or \"ba\".", "labels": [], "entities": []}, {"text": "The underlining in the four alternate factorizations of the input string, that is, the four alternate ways to partition the string \"aba\" with respect to the upper language of the replacement expression.", "labels": [], "entities": []}, {"text": "The corresponding paths in the transducer are listed in.", "labels": [], "entities": []}, {"text": "For many applications, it is useful to define an-108 other version of replacement that produces a unique outcome whenever the lower language of the relation consists of a single string.", "labels": [], "entities": []}, {"text": "To limit the number of alternative results to one in such cases, we must impose a unique factorization on every input.", "labels": [], "entities": []}, {"text": "The desired effect can be obtained by constraining the directionality and the length of the replacement.", "labels": [], "entities": [{"text": "length", "start_pos": 78, "end_pos": 84, "type": "METRIC", "confidence": 0.980670690536499}]}, {"text": "Directionality means that the replacement sites in the input string are selected starting from the left or from the right, not allowing any overlaps.", "labels": [], "entities": []}, {"text": "The length constraint forces us always to choose the longest or the shortest replacement whenever there are multiple candidate strings starting at a given location.", "labels": [], "entities": []}, {"text": "We use the term directed replacement to describe a replacement relation that is constrained by directionality and length of match.", "labels": [], "entities": [{"text": "length", "start_pos": 114, "end_pos": 120, "type": "METRIC", "confidence": 0.9867782592773438}]}, {"text": "(See the end of Section 2 fora discussion about the choice of the term.)", "labels": [], "entities": []}, {"text": "With these two kinds of constraints we can define four types of directed replacement, listed in.", "labels": [], "entities": []}, {"text": "For reasons of space, we discuss here only the leftto-right, longest-match version.", "labels": [], "entities": []}, {"text": "The other cases are similar.", "labels": [], "entities": []}, {"text": "The effect of the directionality and length constraints is that some possible replacements are ignored.", "labels": [], "entities": []}, {"text": "For example, ab I b I b a [ ab a @-> x maps \"aba\" uniquely into \"x\",.", "labels": [], "entities": []}, {"text": "Because we must start from the left and have to choose the longest match, \"aba\" must be replaced, ignoring the possible replacements for \"b\", \"ba\", and \"ab\".", "labels": [], "entities": []}, {"text": "The \u00a9-> operator allows only the last factorization of \"aba\" in.", "labels": [], "entities": []}, {"text": "Left-to-right, longest-match replacement can bethought of as a pr.ocedure that rewrites an input string sequentially from left to right.", "labels": [], "entities": []}, {"text": "It copies the input until it finds an instance of UPPER.", "labels": [], "entities": [{"text": "UPPER", "start_pos": 50, "end_pos": 55, "type": "DATASET", "confidence": 0.6595191955566406}]}, {"text": "At that point it selects the longest matching substring, which is rewritten as LOWER, and proceeds from the end of that substring without considering any other alternatives.", "labels": [], "entities": [{"text": "LOWER", "start_pos": 79, "end_pos": 84, "type": "METRIC", "confidence": 0.9910241365432739}]}], "datasetContent": [], "tableCaptions": []}