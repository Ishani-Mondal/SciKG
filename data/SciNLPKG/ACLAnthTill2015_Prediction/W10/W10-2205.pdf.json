{"title": [{"text": "A Method for Compiling Two-level Rules with Multiple Contexts", "labels": [], "entities": []}], "abstractContent": [{"text": "A novel method is presented for compiling two-level rules which have multiple context parts.", "labels": [], "entities": []}, {"text": "The same method can also be applied to the resolution of so-called right-arrow rule conflicts.", "labels": [], "entities": []}, {"text": "The method makes use of the fact that one can efficiently compose sets of two-level rules with a lexicon transducer.", "labels": [], "entities": []}, {"text": "By introducing variant characters and using simple pre-processing of multi-context rules, all rules can be reduced into single-context rules.", "labels": [], "entities": []}, {"text": "After the modified rules have been combined with the lexicon transducer, the variant characters maybe reverted back to the original surface characters.", "labels": [], "entities": []}, {"text": "The proposed method appears to be efficient but only partial evidence is presented yet.", "labels": [], "entities": []}], "introductionContent": [{"text": "Two-level rules can be compiled into lengthpreserving transducers whose intersection effectively reflects the constraints and the correspondences imposed by the two-level grammar.", "labels": [], "entities": []}, {"text": "Twolevel rules relate input strings (lexical representations) with output strings (surface representations).", "labels": [], "entities": []}, {"text": "The pairs of strings are treated as character pairs x:z consisting of lexical (input) characters x and surface (output) characters z, and regular expressions based on such pairs.", "labels": [], "entities": []}, {"text": "Twolevel rule transducers are made length-preserving (epsilon-free) by using a placeholder zero (0) within the rules and in the representations.", "labels": [], "entities": []}, {"text": "The zero is then removed after the rules have been combined by (virtual) intersection, before the result is composed with the lexicon.", "labels": [], "entities": []}, {"text": "There are four kinds of two-level rules: 1.", "labels": [], "entities": []}, {"text": "right-arrow rules or restriction rules, (x:z => LC _ RC) saying that the correspondence pair is allowed only if immediately preceded by left context LC and followed by right context RC, 2.", "labels": [], "entities": []}, {"text": "left-arrow rules or surface coercion rules, (x:z <= LC _ RC) which say that in this context, the lexical character x may only correspond to the surface character z, 3.", "labels": [], "entities": [{"text": "LC _ RC", "start_pos": 52, "end_pos": 59, "type": "METRIC", "confidence": 0.7921832998593649}]}, {"text": "double-arrow rules (<=>), a shorthand combining these two requirements, and 4.", "labels": [], "entities": []}, {"text": "exclusion rules (x:z /<= LC _ RC) which forbid the pair x:z to occur in this context.", "labels": [], "entities": [{"text": "LC _ RC", "start_pos": 25, "end_pos": 32, "type": "METRIC", "confidence": 0.7936250964800516}]}, {"text": "All types of rules may have more than one context part.", "labels": [], "entities": []}, {"text": "In particular, the right-arrow rule x:z => LC1 _ RC1; LC2 _ RC2 would say that the pair x:z (which we call the centre of the rule) may occur in either one of these two contexts.", "labels": [], "entities": []}, {"text": "For various formulations of two-level rules, see e.g.,,,,,) and a comprehensive survey on their formal interpretations, see.", "labels": [], "entities": []}, {"text": "Compiling two-level rules into transducers is easy in all other cases except for right-arrow rules with multiple context-parts; see e.g..", "labels": [], "entities": []}, {"text": "Compiling right-arrow rules with multiple context parts is more difficult because the compilation of the whole rule is not in a simple relation to the component expressions in the rule; see e.g..", "labels": [], "entities": []}, {"text": "The method proposed here reduces multicontext rules into a set of separate simple rules, one for each context, by introducing some auxiliary variant characters.", "labels": [], "entities": []}, {"text": "These auxiliary characters are then normalized back into the original surface characters after the intersecting composition of the lexicon and the modified rules.", "labels": [], "entities": []}, {"text": "The method is presented in section 3.", "labels": [], "entities": []}, {"text": "The compilation of multiple contexts using the proposed scheme appears to be very simple and fast.", "labels": [], "entities": []}, {"text": "Preliminary results and discussion about the computational complexity are presented in section 4.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}