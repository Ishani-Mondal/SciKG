{"title": [{"text": "Generating Natural Language Descriptions of Z Test Cases", "labels": [], "entities": [{"text": "Generating Natural Language Descriptions of Z Test Cases", "start_pos": 0, "end_pos": 56, "type": "TASK", "confidence": 0.6750543005764484}]}], "abstractContent": [{"text": "Critical software most often requires an independent validation and verification (IVV).", "labels": [], "entities": [{"text": "independent validation and verification (IVV)", "start_pos": 41, "end_pos": 86, "type": "METRIC", "confidence": 0.5913750742162976}]}, {"text": "IVV is usually performed by domain experts, who are not familiar with specific, many times formal, development technologies.", "labels": [], "entities": [{"text": "IVV", "start_pos": 0, "end_pos": 3, "type": "TASK", "confidence": 0.9176651835441589}]}, {"text": "In addition, model-based testing (MBT) is a promising testing technique for the verification of critical software.", "labels": [], "entities": [{"text": "model-based testing (MBT)", "start_pos": 13, "end_pos": 38, "type": "TASK", "confidence": 0.6622580289840698}]}, {"text": "Test cases generated by MBT tools are logical descriptions.", "labels": [], "entities": []}, {"text": "The problem is, then, to provide natural language (NL) descriptions of these test cases, making them accessible to domain experts.", "labels": [], "entities": []}, {"text": "In this paper , we present ongoing research aimed at finding a suitable method for generating NL descriptions from test cases in a formal specification language.", "labels": [], "entities": []}, {"text": "A first prototype has been developed and applied to a real-world project in the aerospace sector.", "labels": [], "entities": []}], "introductionContent": [{"text": "Model-based testing (MBT) is an active research area and a promising theory of software and hardware testing.", "labels": [], "entities": [{"text": "Model-based testing (MBT)", "start_pos": 0, "end_pos": 25, "type": "TASK", "confidence": 0.7149032235145569}]}, {"text": "MBT approaches start with a formal model or specification of the software, from which test cases are generated.", "labels": [], "entities": [{"text": "MBT", "start_pos": 0, "end_pos": 3, "type": "TASK", "confidence": 0.9730710387229919}]}, {"text": "These techniques have been developed and applied to models written in different formal notations, such as Z (, finite state machines and their extensions (), B (), algebraic specifications (, and soon.", "labels": [], "entities": [{"text": "B", "start_pos": 158, "end_pos": 159, "type": "METRIC", "confidence": 0.9451180696487427}]}, {"text": "The fundamental hypothesis behind MBT is that, as a program is correct if it verifies its specification, then the specification is an excellent source of test cases.", "labels": [], "entities": [{"text": "MBT", "start_pos": 34, "end_pos": 37, "type": "TASK", "confidence": 0.9571283459663391}]}, {"text": "Once test cases are derived from the model, they are refined to the level of the implementation language and executed.", "labels": [], "entities": []}, {"text": "The resulting output is then abstracted to the level of the specification language, and the model is used again to verify if the test case has detected an error.", "labels": [], "entities": []}, {"text": "The Test Template Framework (TTF) described by is a particular MBT theory specially well suited for unit testing.", "labels": [], "entities": []}, {"text": "The TTF uses Z specifications as the entry models and prescribes how to generate test cases for each operation included in the model.) implements the TTF allowing users to automatically produce test cases fora given Z specification.", "labels": [], "entities": [{"text": "TTF", "start_pos": 4, "end_pos": 7, "type": "DATASET", "confidence": 0.9111376404762268}]}, {"text": "Recently, we used Fastest to test an on-board satellite software fora major aerospace company in South America.", "labels": [], "entities": [{"text": "Fastest", "start_pos": 18, "end_pos": 25, "type": "DATASET", "confidence": 0.8000687956809998}]}, {"text": "Since Fastest uses models written in the Z specification language, test cases generated by this tool are paragraphs of formal text (see Section 2).", "labels": [], "entities": []}, {"text": "This description is suitable for the automatic tasks involved in testing (e.g., automatic execution, hyperlinking, traceability), but humans need to be able to read Z specifications in order to understand what is being tested.", "labels": [], "entities": []}, {"text": "In projects where independent verification and validation (IVV) is required this might be a problem, as most stakeholders will not necessarily be fluent in Z.", "labels": [], "entities": [{"text": "validation (IVV)", "start_pos": 47, "end_pos": 63, "type": "TASK", "confidence": 0.6144352331757545}]}, {"text": "This is precisely the casein the project mentioned above, where the aerospace company requested not only the test cases in Z, but also in English.", "labels": [], "entities": []}, {"text": "As it can be expected, in a project with hundreds of test cases, manual translation would increase the overall cost of testing and, most critically, reduce its quality due to the introduction of human errors.", "labels": [], "entities": [{"text": "manual translation", "start_pos": 65, "end_pos": 83, "type": "TASK", "confidence": 0.6768803149461746}]}, {"text": "Interestingly, this problem is opposite to those in mainstream industrial practice, where test cases are described in natural language and must be formalised, in order to augment the quality and, hopefully, reduce the costs of testing.", "labels": [], "entities": []}, {"text": "Given the formal, structured nature of the source text, natural language generation (NLG) techniques seem to bean appropriate approach to solving this problem.", "labels": [], "entities": [{"text": "natural language generation (NLG)", "start_pos": 56, "end_pos": 89, "type": "TASK", "confidence": 0.8216402530670166}]}, {"text": "In the rest of the paper, we give an example of a test case from the project mentioned above (Section 2), describe a template-based method for generating NL descriptions (Section 3), and propose further work towards a more general NLG solution (Section 4).", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}