{"title": [{"text": "Millstream Systems -a Formal Model for Linking Language Modules by Interfaces", "labels": [], "entities": [{"text": "Millstream Systems", "start_pos": 0, "end_pos": 18, "type": "DATASET", "confidence": 0.9423872530460358}, {"text": "Linking Language Modules by Interfaces", "start_pos": 39, "end_pos": 77, "type": "TASK", "confidence": 0.8206436038017273}]}], "abstractContent": [{"text": "We introduce Millstream systems, a formal model consisting of modules and an interface, where the modules formalise different aspects of language, and the interface links these aspects with each other.", "labels": [], "entities": []}], "introductionContent": [{"text": "Modern linguistic theories) promote the view that different aspects of language, such as phonology, morphology, syntax, and semantics should be viewed as autonomous modules that work simultaneously and are linked with each other by interfaces that describe their interaction and interdependency.", "labels": [], "entities": []}, {"text": "Formalisms in modern computational linguistics which establish interfaces between different aspects of language are the Combinatory Categorical Grammar (CCG), the Functional Generative Description (FGD), the Head-Driven Phrase Structure Grammar (HPSG), the Lexical Functional Grammar (LFG), and the Extensible Dependency Grammar (XDG).", "labels": [], "entities": []}, {"text": "Here, we propose Millstream systems, an approach from a formal language theoretic point of view which is based on the same ideas as XDG, but uses tree-generating modules of arbitrary kinds.", "labels": [], "entities": []}, {"text": "Let us explain in slightly more detail what a Millstream system looks like.", "labels": [], "entities": [{"text": "Millstream system", "start_pos": 46, "end_pos": 63, "type": "DATASET", "confidence": 0.973268985748291}]}, {"text": "A Millstream system contains any number of tree generators, called its modules.", "labels": [], "entities": []}, {"text": "Such a tree generator is any device that specifies a tree language.", "labels": [], "entities": []}, {"text": "For example, a tree generator maybe a context-free grammar, tree adjoining grammar, a finite-state tree automaton, a dependency grammar, a corpus, human input, etc.", "labels": [], "entities": []}, {"text": "Even within a single Millstream system, the modules need not be of the same kind, since they are treated as \"black boxes\".", "labels": [], "entities": [{"text": "Millstream", "start_pos": 21, "end_pos": 31, "type": "DATASET", "confidence": 0.962550699710846}]}, {"text": "The Millstream system links the trees generated by the modules by an interface consisting of logical formulas.", "labels": [], "entities": [{"text": "Millstream", "start_pos": 4, "end_pos": 14, "type": "DATASET", "confidence": 0.9582622051239014}]}, {"text": "Suppose that a Millstream system has k modules.", "labels": [], "entities": []}, {"text": "Then the interface consists of interface rules in the form of logical expressions that establish links between the (nodes of the) trees t 1 , . .", "labels": [], "entities": []}, {"text": ", t k that are generated by the individual modules.", "labels": [], "entities": []}, {"text": "Thus, a valid combination of trees is not just any collection of trees t 1 , . .", "labels": [], "entities": []}, {"text": ", t k generated by the k modules.", "labels": [], "entities": []}, {"text": "It also includes, between these structures, interconnecting links that represent their relationships and that must follow the rules expressed by the interface.", "labels": [], "entities": []}, {"text": "Grammaticality, in terms of a Millstream system, means that the individual structures must be valid (i.e., generated by the modules) and are linked in such away that all interface rules are logically satisfied.", "labels": [], "entities": []}, {"text": "A Millstream system can thus be considered to perform independent concurrent derivations of autonomous modules, enriched by an interface that establishes links between the outputs of the modules, thus constraining the acceptable configurations.", "labels": [], "entities": []}, {"text": "Millstream systems may, for example, be of interest for natural language understanding and natural language generation.", "labels": [], "entities": [{"text": "natural language understanding", "start_pos": 56, "end_pos": 86, "type": "TASK", "confidence": 0.6360152959823608}, {"text": "natural language generation", "start_pos": 91, "end_pos": 118, "type": "TASK", "confidence": 0.6811308662096659}]}, {"text": "Simply put, the task of natural language understanding is to construct a suitable semantic representation of a sentence that has been heard (phonology) and parsed (syntax).", "labels": [], "entities": [{"text": "natural language understanding", "start_pos": 24, "end_pos": 54, "type": "TASK", "confidence": 0.6721071799596151}]}, {"text": "Within the framework of Millstream systems this corresponds to the problem where we are given a syntactic tree (and possibly a phonological tree if such a module is involved) and the goal is to construct an appropriate semantic tree.", "labels": [], "entities": []}, {"text": "Con-versely, natural language generation can be seen as the problem to construct an appropriate syntactic (and/or phonological) tree from a given semantic tree.", "labels": [], "entities": [{"text": "natural language generation", "start_pos": 13, "end_pos": 40, "type": "TASK", "confidence": 0.7268306215604147}]}, {"text": "In abstract terms, the situations just described are identical.", "labels": [], "entities": []}, {"text": "We refer to the problem as the completion problem.", "labels": [], "entities": []}, {"text": "While the current paper is mainly devoted to the introduction and motivation of) the completion problem is investigated for so-called regular MSO Millstream systems, i.e. systems in which the modules are regular tree grammars (or, equivalently, finite tree automata) and the interface conditions are expressed in monadic second-order (MSO) logic.", "labels": [], "entities": []}, {"text": "In Section 7, the results obtained so far are briefly summarised.", "labels": [], "entities": []}, {"text": "Now, let us roughly compare Millstream systems with XDG.", "labels": [], "entities": [{"text": "Millstream", "start_pos": 28, "end_pos": 38, "type": "DATASET", "confidence": 0.9656186103820801}, {"text": "XDG", "start_pos": 52, "end_pos": 55, "type": "DATASET", "confidence": 0.9131848216056824}]}, {"text": "Conceptually, the k modules of a Millstream system correspond to the k dimensions of an XDG.", "labels": [], "entities": []}, {"text": "In an XDG, a configuration consists of dependency structures t 1 , . .", "labels": [], "entities": []}, {"text": ", t k . The interface of a Millstream system corresponds to the principles of the XDG.", "labels": [], "entities": [{"text": "XDG", "start_pos": 82, "end_pos": 85, "type": "DATASET", "confidence": 0.8863322138786316}]}, {"text": "The latter are logical formulas that express conditions that the collection of dependency structures must fulfill.", "labels": [], "entities": []}, {"text": "The major difference between the two formalisms lies in the fact that XDG inherently builds upon dependency structures, whereas the modules of a Millstream system are arbitrary tree generators.", "labels": [], "entities": []}, {"text": "In XDG, each oft 1 , . .", "labels": [], "entities": []}, {"text": ", t k is a dependency analysis of the sentence considered.", "labels": [], "entities": []}, {"text": "In particular, they share the yield and the set of nodes (as the nodes of a dependency tree correspond to the words in the sentence analysed, and its yield is that sentence).", "labels": [], "entities": []}, {"text": "Millstream systems do not make similar assumptions, which means that they may give rise to new questions and possibilities: \u2022 The purpose of a Millstream system is not necessarily the analysis of sentences.", "labels": [], "entities": []}, {"text": "For example, a Millstream system with two modules could translate one language into another.", "labels": [], "entities": []}, {"text": "For this, tree grammars representing the source and target languages could be used as modules, with an interface expressing that t 2 is a correct translation oft 1 . This scenario makes no sense in the context of XDG, because the sentences represented by t 1 and t 2 differ.", "labels": [], "entities": []}, {"text": "Many similar applications of Millstream system may the thought of, for example correction or simplification of sentences.", "labels": [], "entities": [{"text": "Millstream", "start_pos": 29, "end_pos": 39, "type": "DATASET", "confidence": 0.9195953011512756}]}, {"text": "\u2022 As the modules maybe arbitrary devices specifying tree languages, they contribute their own generative power and theoretical properties to the whole (in contrast to XDG, which does not have such a separation).", "labels": [], "entities": []}, {"text": "This makes it possible to apply known results from tree language theory, and to study the interplay between different kinds of modules and interface logics.", "labels": [], "entities": []}, {"text": "\u2022 The fact that the individual modules of a Millstream system may belong to different classes of tree generators could be linguistically valuable.", "labels": [], "entities": []}, {"text": "For example, a Millstream system combining a dependency grammar module with a regular tree grammar module, could be able to formalise aspects of a given natural language that cannot be formalised by using only one of these formalisms.", "labels": [], "entities": []}, {"text": "\u2022 For Millstream systems whose modules are generative grammar formalisms (such as regular tree grammars, tree-adjoining grammars and context-free tree grammars), it will be interesting to study conditions under which the Millstream system as a whole becomes generative, in the sense that well-formed configurations can be constructed in a step-by-step manner based on the derivation relations of the individual modules.", "labels": [], "entities": []}, {"text": "Let us finally mention another, somewhat subtle difference between XDG and Millstream systems.", "labels": [], "entities": [{"text": "Millstream", "start_pos": 75, "end_pos": 85, "type": "DATASET", "confidence": 0.9242782592773438}]}, {"text": "In XDG, the interfaces are dimensions on their own.", "labels": [], "entities": []}, {"text": "For example, an XDG capturing the English syntax and semantics would have three dimensions, namely syntax, semantics, and the syntax-semantics interface.", "labels": [], "entities": []}, {"text": "An analysis of a sentence would thus consist of three dependency trees, where the third one represents the relation between the other two.", "labels": [], "entities": []}, {"text": "In contrast, a corresponding Millstream system would only have two modules.", "labels": [], "entities": [{"text": "Millstream", "start_pos": 29, "end_pos": 39, "type": "DATASET", "confidence": 0.9660788774490356}]}, {"text": "The interface between them is considered to be conceptually different and establishes direct links between the trees that are generated by the two modules.", "labels": [], "entities": []}, {"text": "One of our tasks (which is, however, outside the scope of this contribution) is a study of the formal relation between XDG and Millstream systems, to achieve a proper understanding of their similarities and differences.", "labels": [], "entities": [{"text": "Millstream", "start_pos": 127, "end_pos": 137, "type": "DATASET", "confidence": 0.7650245428085327}]}, {"text": "The rest of the paper is organised as follows.", "labels": [], "entities": []}, {"text": "In the next section, we discuss an example illustrating the linguistic notions and ideas that Millstream systems attempt to provide a formal basis for.", "labels": [], "entities": []}, {"text": "After some mathematical preliminaries, which are collected in Section 4, the formal definition of Millstream systems is presented in Section 5.", "labels": [], "entities": []}, {"text": "Section 6 contains examples and remarks related to Formal Language Theory.", "labels": [], "entities": [{"text": "Formal Language Theory", "start_pos": 51, "end_pos": 73, "type": "TASK", "confidence": 0.8528892397880554}]}, {"text": "Finally, Section 7 discusses preliminary results and future work.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}