{"title": [{"text": "Dependency Parser for Chinese Constituent Parsing *", "labels": [], "entities": [{"text": "Dependency Parser", "start_pos": 0, "end_pos": 17, "type": "TASK", "confidence": 0.6660979390144348}, {"text": "Chinese Constituent Parsing", "start_pos": 22, "end_pos": 49, "type": "TASK", "confidence": 0.5437904298305511}]}], "abstractContent": [{"text": "This paper presents our work for participation in the 2010 CIPS-ParsEval shared task on Chi-nese syntactic constituent tree parsing.", "labels": [], "entities": [{"text": "Chi-nese syntactic constituent tree parsing", "start_pos": 88, "end_pos": 131, "type": "TASK", "confidence": 0.47795955538749696}]}, {"text": "We use dependency parsers for this constituent parsing task based on a formal dependency-constituent transformation method which converts dependency to constituent structures using a machine learning approach.", "labels": [], "entities": [{"text": "constituent parsing task", "start_pos": 35, "end_pos": 59, "type": "TASK", "confidence": 0.7951968510945638}]}, {"text": "A conditional random fields (CRF) tagger is adopted for head information recognition.", "labels": [], "entities": [{"text": "conditional random fields (CRF) tagger", "start_pos": 2, "end_pos": 40, "type": "TASK", "confidence": 0.6709280822958265}, {"text": "head information recognition", "start_pos": 56, "end_pos": 84, "type": "TASK", "confidence": 0.8656924168268839}]}, {"text": "Our experiments shows that acceptable parsing and head tagging results are obtained on our approaches .", "labels": [], "entities": [{"text": "parsing", "start_pos": 38, "end_pos": 45, "type": "TASK", "confidence": 0.9660136103630066}, {"text": "head tagging", "start_pos": 50, "end_pos": 62, "type": "TASK", "confidence": 0.8105998337268829}]}], "introductionContent": [{"text": "Constituent parsing is a challenging but useful task aiming at analyzing the constituent structure of a sentence.", "labels": [], "entities": [{"text": "Constituent parsing", "start_pos": 0, "end_pos": 19, "type": "TASK", "confidence": 0.9221244156360626}]}, {"text": "Recently, it is widely adopted by the popular applications of natural language processing techniques, such as machine translation), synonym generation (), relation extraction () and lexical resource augmentation (.", "labels": [], "entities": [{"text": "machine translation", "start_pos": 110, "end_pos": 129, "type": "TASK", "confidence": 0.7442779690027237}, {"text": "synonym generation", "start_pos": 132, "end_pos": 150, "type": "TASK", "confidence": 0.9184486269950867}, {"text": "relation extraction", "start_pos": 155, "end_pos": 174, "type": "TASK", "confidence": 0.8772484064102173}]}, {"text": "A great deal of researches have been conducted on this topic with promising progress.", "labels": [], "entities": []}, {"text": "Recently, several effective dependency parsing algorithms has been developed and shows excellent performance in the responding parsing tasks).", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 28, "end_pos": 46, "type": "TASK", "confidence": 0.7620303630828857}, {"text": "responding parsing tasks", "start_pos": 116, "end_pos": 140, "type": "TASK", "confidence": 0.7830589016278585}]}, {"text": "Since graph structures of dependency and constituent parsing over a sentence are strongly related, they should be benefited from each other.", "labels": [], "entities": [{"text": "constituent parsing over a sentence", "start_pos": 41, "end_pos": 76, "type": "TASK", "confidence": 0.8190427660942078}]}, {"text": "It is true that constituent parsing maybe smoothly altered to fit dependency parsing.", "labels": [], "entities": [{"text": "constituent parsing", "start_pos": 16, "end_pos": 35, "type": "TASK", "confidence": 0.7383950054645538}, {"text": "dependency parsing", "start_pos": 66, "end_pos": 84, "type": "TASK", "confidence": 0.7539154589176178}]}, {"text": "However, due to the inconvenience from dependency to constituent structure, it is not so easy to adopt the latter * This work is partially supported by the National Natural Science Foundation of China  for the former.", "labels": [], "entities": []}, {"text": "This means that most of these popular and effective dependency parsing models cannot be directly extended to constituents parsing.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 52, "end_pos": 70, "type": "TASK", "confidence": 0.7139537632465363}, {"text": "constituents parsing", "start_pos": 109, "end_pos": 129, "type": "TASK", "confidence": 0.7002446055412292}]}, {"text": "This paper proposes an formal method for such a conversion which adoptively solves the problem of ambiguity.", "labels": [], "entities": []}, {"text": "Based on the proposed method, a dependency parsing algorithm can be used to solve tasks of constituent parsing.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 32, "end_pos": 50, "type": "TASK", "confidence": 0.7617836594581604}, {"text": "constituent parsing", "start_pos": 91, "end_pos": 110, "type": "TASK", "confidence": 0.7286900281906128}]}, {"text": "A part of Tsinghua Chinese Treebank (TCT)) is used as the training and test data for the 2010 CIPS-ParsEval shared task.", "labels": [], "entities": [{"text": "Tsinghua Chinese Treebank (TCT))", "start_pos": 10, "end_pos": 42, "type": "DATASET", "confidence": 0.7681679824988047}, {"text": "2010 CIPS-ParsEval shared task", "start_pos": 89, "end_pos": 119, "type": "DATASET", "confidence": 0.6398255303502083}]}, {"text": "Being different from the annotation scheme of the Penn Chinese Treebank (CTB), the TCT has another annotation scheme, which combines both the constituent tree structure and the head information of each constituent.", "labels": [], "entities": [{"text": "Penn Chinese Treebank (CTB)", "start_pos": 50, "end_pos": 77, "type": "DATASET", "confidence": 0.9782820244630178}]}, {"text": "Specifically, there can be always multiple heads in a constituent.", "labels": [], "entities": []}, {"text": "For the 2010 CIPS-ParsEval shared task, only segmented sentences are given in test data without part-of-speech (POS) tags, a POS tagger is required for this task.", "labels": [], "entities": []}, {"text": "Therefore, we divide our system into three major cascade stages, namely POS tagging, constituent parsing and head information recognition, which are connected as a pipeline of processing.", "labels": [], "entities": [{"text": "POS tagging", "start_pos": 72, "end_pos": 83, "type": "TASK", "confidence": 0.8352393805980682}, {"text": "constituent parsing", "start_pos": 85, "end_pos": 104, "type": "TASK", "confidence": 0.7701883316040039}, {"text": "head information recognition", "start_pos": 109, "end_pos": 137, "type": "TASK", "confidence": 0.7731433908144633}]}, {"text": "For the POS tagging, we adopt the SVMTool tagger (; for the constituent parsing, we use the Maximum Spanning Tree (MST)) parser combined with a dependencies-to-constituents conversion; and for the head information recognition, we apply a sequence labeling method to label head information.", "labels": [], "entities": [{"text": "POS tagging", "start_pos": 8, "end_pos": 19, "type": "TASK", "confidence": 0.7101433277130127}, {"text": "SVMTool tagger", "start_pos": 34, "end_pos": 48, "type": "TASK", "confidence": 0.6594893932342529}, {"text": "constituent parsing", "start_pos": 60, "end_pos": 79, "type": "TASK", "confidence": 0.708860456943512}, {"text": "head information recognition", "start_pos": 197, "end_pos": 225, "type": "TASK", "confidence": 0.7873382568359375}]}, {"text": "Section 2 presents the POS tagger in our approach.", "labels": [], "entities": [{"text": "POS tagger", "start_pos": 23, "end_pos": 33, "type": "TASK", "confidence": 0.6135499030351639}]}, {"text": "The details of our parsing method is presented in section 3.", "labels": [], "entities": [{"text": "parsing", "start_pos": 19, "end_pos": 26, "type": "TASK", "confidence": 0.979528546333313}]}, {"text": "The head information recognition is described in section 4.", "labels": [], "entities": [{"text": "head information recognition", "start_pos": 4, "end_pos": 32, "type": "TASK", "confidence": 0.8664872447649637}]}, {"text": "The data and experimental results are shown in section 5.", "labels": [], "entities": []}, {"text": "The last section is the conclusion and future work.", "labels": [], "entities": []}], "datasetContent": [{"text": "All experiments reported here were performed on a Core 2 Quad 2.83Ghz CPU with 8GB of RAM.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 4: Official scores of syntactic parsing. single-stage and two-stage are for single-stage and two-stage depen- dency type labeling approached, respectively.", "labels": [], "entities": [{"text": "syntactic parsing", "start_pos": 29, "end_pos": 46, "type": "TASK", "confidence": 0.7754583060741425}]}, {"text": " Table 5: Official scores of event recognition", "labels": [], "entities": [{"text": "event recognition", "start_pos": 29, "end_pos": 46, "type": "TASK", "confidence": 0.6375879645347595}]}, {"text": " Table 6: Comparison with previous works", "labels": [], "entities": []}]}