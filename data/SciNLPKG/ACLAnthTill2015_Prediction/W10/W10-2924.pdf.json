{"title": [{"text": "Joint Entity and Relation Extraction using Card-Pyramid Parsing", "labels": [], "entities": [{"text": "Joint Entity and Relation Extraction", "start_pos": 0, "end_pos": 36, "type": "TASK", "confidence": 0.7525277256965637}]}], "abstractContent": [{"text": "Both entity and relation extraction can benefit from being performed jointly, allowing each task to correct the errors of the other.", "labels": [], "entities": [{"text": "relation extraction", "start_pos": 16, "end_pos": 35, "type": "TASK", "confidence": 0.7207107245922089}]}, {"text": "We present anew method for joint entity and relation extraction using a graph we calla \"card-pyramid.\"", "labels": [], "entities": [{"text": "joint entity and relation extraction", "start_pos": 27, "end_pos": 63, "type": "TASK", "confidence": 0.5586363434791565}]}, {"text": "This graph compactly encodes all possible entities and relations in a sentence, reducing the task of their joint extraction to jointly labeling its nodes.", "labels": [], "entities": []}, {"text": "We give an efficient labeling algorithm that is analogous to parsing using dynamic programming.", "labels": [], "entities": []}, {"text": "Experimental results show improved results for our joint extraction method compared to a pipelined approach.", "labels": [], "entities": [{"text": "joint extraction", "start_pos": 51, "end_pos": 67, "type": "TASK", "confidence": 0.7236471921205521}]}], "introductionContent": [{"text": "Information extraction (IE) is the task of extracting structured information from text.", "labels": [], "entities": [{"text": "Information extraction (IE)", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.8749887406826019}]}, {"text": "The two most common sub-tasks of IE are extracting entities (like Person, and extracting relations between them (like Work For which relates a Person and an Organization, OrgBased In which relates an Organization and a Location etc.).", "labels": [], "entities": [{"text": "IE", "start_pos": 33, "end_pos": 35, "type": "TASK", "confidence": 0.9911162853240967}]}, {"text": "shows a sample sentence annotated with entities and relations.", "labels": [], "entities": []}, {"text": "The application domain and requirements of the downstream tasks usually dictate the type of entities and relations that an IE system needs to extract.", "labels": [], "entities": []}, {"text": "Most work in IE has concentrated on entity extraction alone) or on relation extraction assuming entities are either given or previously extracted).", "labels": [], "entities": [{"text": "IE", "start_pos": 13, "end_pos": 15, "type": "TASK", "confidence": 0.9908550977706909}, {"text": "entity extraction", "start_pos": 36, "end_pos": 53, "type": "TASK", "confidence": 0.757768303155899}, {"text": "relation extraction", "start_pos": 67, "end_pos": 86, "type": "TASK", "confidence": 0.810518890619278}]}, {"text": "However, these tasks are very closely inter-related.", "labels": [], "entities": []}, {"text": "While identifying correct entities is essential for identifying relations between them, identifying correct relations can in turn improve identification of entities.", "labels": [], "entities": []}, {"text": "For example, if the relation Work For is identified with high confidence by a relation extractor, then it can enforce identifying its arguments as Person and Organization, about which the entity extractor might not have been confident.", "labels": [], "entities": []}, {"text": "A brute force algorithm for finding the most probable joint extraction will soon become intractable as the number of entities in a sentence grows.", "labels": [], "entities": [{"text": "finding the most probable joint extraction", "start_pos": 28, "end_pos": 70, "type": "TASK", "confidence": 0.7231068313121796}]}, {"text": "If there are n entities in a sentence, then there are O(n 2 ) possible relations between them and if each relation can take l labels then there are O(l n 2 ) total possibilities, which is intractable even for small land n.", "labels": [], "entities": []}, {"text": "Hence, an efficient inference mechanism is needed for joint entity and relation extraction.", "labels": [], "entities": [{"text": "relation extraction", "start_pos": 71, "end_pos": 90, "type": "TASK", "confidence": 0.6996636688709259}]}, {"text": "The only work we are aware of for jointly extracting entities and relations is by.", "labels": [], "entities": []}, {"text": "Their method first identifies the possible entities and relations in a sentence using separate classifiers which are applied independently and then computes a most probable consistent global set of entities and relations using linear programming.", "labels": [], "entities": []}, {"text": "In this paper, we present a different approach to joint extraction using a \"card-pyramid\" graph.", "labels": [], "entities": [{"text": "joint extraction", "start_pos": 50, "end_pos": 66, "type": "TASK", "confidence": 0.8088406324386597}]}, {"text": "The labeled nodes in this graph compactly encode the possible entities and relations in a sentence.", "labels": [], "entities": []}, {"text": "The task of joint extraction then reduces to finding the most probable joint assignment to the nodes in the card-pyramid.", "labels": [], "entities": [{"text": "joint extraction", "start_pos": 12, "end_pos": 28, "type": "TASK", "confidence": 0.7322986274957657}]}, {"text": "We give an efficient dynamic-programming algorithm for this task which resembles CYK parsing for contextfree grammars.", "labels": [], "entities": [{"text": "CYK parsing", "start_pos": 81, "end_pos": 92, "type": "TASK", "confidence": 0.731225460767746}]}, {"text": "The algorithm does abeam search and gives an approximate solution fora finite beam size.", "labels": [], "entities": []}, {"text": "A natural advantage of this approach is that extraction from apart of the sentence is influenced by extraction from its subparts and vice-versa, thus leading to a joint extraction.", "labels": [], "entities": []}, {"text": "During extraction from apart of the sentence it also allows use of features based on the extraction from its sub-parts, thus leading to a more integrated extraction.", "labels": [], "entities": []}, {"text": "We use Roth & Yih's John lives in Los Angeles , California and works therefor an American company called ABC Inc . dataset in our experiments and show that card-pyramid parsing improves accuracy over both their approach and a pipelined extractor.", "labels": [], "entities": [{"text": "ABC Inc . dataset", "start_pos": 105, "end_pos": 122, "type": "DATASET", "confidence": 0.7432245165109634}, {"text": "card-pyramid parsing", "start_pos": 156, "end_pos": 176, "type": "TASK", "confidence": 0.5706145167350769}, {"text": "accuracy", "start_pos": 186, "end_pos": 194, "type": "METRIC", "confidence": 0.9982331991195679}]}], "datasetContent": [{"text": "We conducted experiments to compare our cardpyramid parsing approach for joint entity and relation extraction to a pipelined approach.", "labels": [], "entities": [{"text": "joint entity and relation extraction", "start_pos": 73, "end_pos": 109, "type": "TASK", "confidence": 0.5823063492774964}]}], "tableCaptions": [{"text": " Table 1: Results of five-fold cross-validation for entity and relation extraction using pipelined and joint extraction. Boldface", "labels": [], "entities": [{"text": "entity and relation extraction", "start_pos": 52, "end_pos": 82, "type": "TASK", "confidence": 0.6178210079669952}]}]}