{"title": [{"text": "A CYK+ Variant for SCFG Decoding Without a Dot Chart", "labels": [], "entities": [{"text": "SCFG Decoding Without a Dot", "start_pos": 19, "end_pos": 46, "type": "TASK", "confidence": 0.8172906756401062}]}], "abstractContent": [{"text": "While CYK+ and Earley-style variants are popular algorithms for decoding unbina-rized SCFGs, in particular for syntax-based Statistical Machine Translation, the algorithms rely on a so-called dot chart which suffers from a high memory consumption.", "labels": [], "entities": [{"text": "Statistical Machine Translation", "start_pos": 124, "end_pos": 155, "type": "TASK", "confidence": 0.7617979049682617}]}, {"text": "We propose a recursive variant of the CYK+ algorithm that eliminates the dot chart, without incurring an increase in time complexity for SCFG decoding.", "labels": [], "entities": []}, {"text": "In an evaluation on a string-to-tree SMT scenario, we empirically demonstrate substantial improvements in memory consumption and translation speed.", "labels": [], "entities": [{"text": "SMT", "start_pos": 37, "end_pos": 40, "type": "TASK", "confidence": 0.8904452919960022}]}], "introductionContent": [{"text": "SCFG decoding can be performed with monolingual parsing algorithms, and various SMT systems implement the CYK+ algorithm or a close Earley-style variant ().", "labels": [], "entities": [{"text": "SMT", "start_pos": 80, "end_pos": 83, "type": "TASK", "confidence": 0.9769995212554932}]}, {"text": "The CYK+ algorithm) generalizes the CYK algorithm to n-ary rules by performing a dynamic binarization of the grammar during parsing through a so-called dot chart.", "labels": [], "entities": []}, {"text": "The construction of the dot chart is a major cause of space inefficiency in SCFG decoding with CYK+, and memory consumption makes the algorithm impractical for long sentences without artificial limits on the span of chart cells.", "labels": [], "entities": []}, {"text": "We demonstrate that, by changing the traversal through the main parse chart, we can eliminate the dot chart from the CYK+ algorithm at no computational cost for SCFG decoding.", "labels": [], "entities": []}, {"text": "Our algorithm improves space complexity, and an empirical evaluation confirms substantial improvements in memory consumption over the standard CYK+ algorithm, along with remarkable gains in speed.", "labels": [], "entities": []}, {"text": "This paper is structured as follows.", "labels": [], "entities": []}, {"text": "As motivation, we discuss some implementation needs and complexity characteristics of SCFG decoding We then describe our algorithm as a variant of CYK+, and finally perform an empirical evaluation of memory consumption and translation speed of several parsing algorithms.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 2: Peak memory consumption (in GB) of  string-to-tree SMT decoder for sentences of dif- ferent length n with different parsing algorithms.", "labels": [], "entities": [{"text": "SMT decoder", "start_pos": 61, "end_pos": 72, "type": "TASK", "confidence": 0.9169185161590576}]}, {"text": " Table 3: Parse time and total decoding time per  sentence (in seconds) of string-to-tree SMT de- coder with different parsing algorithms.", "labels": [], "entities": [{"text": "Parse time", "start_pos": 10, "end_pos": 20, "type": "METRIC", "confidence": 0.9263319671154022}, {"text": "SMT de- coder", "start_pos": 90, "end_pos": 103, "type": "TASK", "confidence": 0.9066696614027023}]}, {"text": " Table 4: Average parse time (in seconds) of string- to-tree SMT decoder with different parsing algo- rithms, before and after scope-3 rules with scope-4  prefix have been pruned from grammar.", "labels": [], "entities": [{"text": "SMT decoder", "start_pos": 61, "end_pos": 72, "type": "TASK", "confidence": 0.9062837958335876}]}]}