{"title": [], "abstractContent": [{"text": "Th i s pa p er d e s c r i be s a parsing/generation system for finite verbal forms in Akkadian, with the possible addition of suffixes, implemented in Prolog.", "labels": [], "entities": [{"text": "parsing/generation", "start_pos": 34, "end_pos": 52, "type": "TASK", "confidence": 0.7750840783119202}, {"text": "Prolog", "start_pos": 152, "end_pos": 158, "type": "DATASET", "confidence": 0.924984872341156}]}, {"text": "The work described provides the framework and engine to interpret the D, N, and G stems along with accusative, dative and ventive endings.", "labels": [], "entities": []}], "introductionContent": [{"text": "The goal of this research is to create a parser capable of taking a finite Akkadian verb, with some subset of direct-object, indirect-object, and ventive suffixes and returning the verb form, suffix form if applicable, and the radical stem.", "labels": [], "entities": []}, {"text": "With the exception of the GUI, a Java wrapper running through a web-server, the program is written entirely in Prolog.", "labels": [], "entities": [{"text": "GUI", "start_pos": 26, "end_pos": 29, "type": "DATASET", "confidence": 0.8997556567192078}]}, {"text": "The Definite Clause Grammar (DCG) rules that are used are an expansion of regular context-free grammars; they define a set of one or more expansions from a set of variables to a complete form.", "labels": [], "entities": []}, {"text": "The program also functions as a generator of finite verbal forms, as the rules can both generate and recognize forms.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}