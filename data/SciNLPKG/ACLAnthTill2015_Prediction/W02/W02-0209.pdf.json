{"title": [{"text": "A Flexible Framework for Developing Mixed-Initiative Dialog Systems", "labels": [], "entities": []}], "abstractContent": [{"text": "We present anew framework for rapid development of mixed-initiative dialog systems.", "labels": [], "entities": []}, {"text": "Using this framework, a developer can author sophisticated dialog systems for multiple channels of interaction by specifying an interaction modality, a rich task hierarchy and task parameters, and domain-specific modules.", "labels": [], "entities": []}, {"text": "The framework includes a dialog history that tracks input, output, and results.", "labels": [], "entities": []}, {"text": "We present the framework and preliminary results in two application domains.", "labels": [], "entities": []}], "introductionContent": [{"text": "Developing a mixed-initiative dialog system is a complex task.", "labels": [], "entities": []}, {"text": "The developer must model the user's goals, the \"results\" (domain objects) retrieved, and the state of the dialog, and generate the system response at each turn of the dialog.", "labels": [], "entities": []}, {"text": "In mixed-initiative systems, as opposed to directed dialog systems, users can influence the dialog flow, and are not restricted to answering system questions in a prescribed format (e.g..", "labels": [], "entities": []}, {"text": "Compounding these challenges, dialog applications have evolved from simple look-up tasks to complex transactional systems like telephony banking and stock trading (), and air travel information systems.", "labels": [], "entities": []}, {"text": "These systems increasingly cater to multiple channels of user interaction (telephone, PDA, web, etc.), each with its own set of modalities.", "labels": [], "entities": []}, {"text": "To simplify the development of such systems, researchers have created frameworks that embody core dialog functionalities.", "labels": [], "entities": []}, {"text": "In MIT's framework, a developer creates a dialog system by specifying a dialog control table comprising actions and their triggering events.", "labels": [], "entities": []}, {"text": "The developer has great freedom in designing this table, but must specify basic actions such as prompting for missing information.", "labels": [], "entities": []}, {"text": "As a result, these tables can become quite complex -the travel system control table contains over 200 ordered rules.", "labels": [], "entities": []}, {"text": "MIT has applied this framework to both weather and travel.", "labels": [], "entities": []}, {"text": "In IBM's form-based dialog manager, or FDM (), a developer defines a set of forms that correspond to separate tasks in the application, such as finding a flight leg.", "labels": [], "entities": [{"text": "finding a flight leg", "start_pos": 144, "end_pos": 164, "type": "TASK", "confidence": 0.6921314746141434}]}, {"text": "The forms have powerful built-in capabilities, including mechanisms that trigger various types of prompts, and allow the user to specify inheritance and other relationships between tasks.", "labels": [], "entities": []}, {"text": "Just as in the MIT framework, domainspecific modules perform database queries and other backend processes; the forms call additional developer-defined modules that affect the dialog state and flow.", "labels": [], "entities": []}, {"text": "FDM has supported dialog systems for air travel ( and financial services.", "labels": [], "entities": [{"text": "FDM", "start_pos": 0, "end_pos": 3, "type": "DATASET", "confidence": 0.9154061675071716}]}, {"text": "The University of Colorado framework also has a form-based architecture, while CMU and Bell Labs' frameworks allow the specification of deep task hierarchies.", "labels": [], "entities": []}, {"text": "Our goal is to design a framework that is both powerful, embodying much dialog functionality, and flexible, accommodating a variety of dialog domains, modalities, and styles.", "labels": [], "entities": []}, {"text": "Our new framework goes beyond FDM in building more core functionality into its task model, yet provides a variety of software tools, such as API calls and overwritable functions, for customizing tasks.", "labels": [], "entities": []}, {"text": "The framework allows developers to specify a wide range of relationships among tasks, and provides a focus model that respects these relationships.", "labels": [], "entities": []}, {"text": "To support the task framework we introduce a dialog history component that remembers input, output, and cumulative task results.", "labels": [], "entities": []}, {"text": "Section 2 of this paper describes the framework, and section 3 some applications.", "labels": [], "entities": []}, {"text": "In section 4 we discuss future plans and implications.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}