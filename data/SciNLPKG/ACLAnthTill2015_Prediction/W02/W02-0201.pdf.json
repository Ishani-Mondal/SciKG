{"title": [{"text": "Synchronization in an Asynchronous Agent-based Architecture for Dialogue Systems", "labels": [], "entities": [{"text": "Synchronization", "start_pos": 0, "end_pos": 15, "type": "TASK", "confidence": 0.9521708488464355}]}], "abstractContent": [{"text": "Most dialogue architectures are either pipelined or, if agent-based, are restricted to a pipelined flow-of-information.", "labels": [], "entities": []}, {"text": "The TRIPS dialogue architecture is agent-based and asynchronous, with several layers of information flow.", "labels": [], "entities": [{"text": "TRIPS dialogue", "start_pos": 4, "end_pos": 18, "type": "TASK", "confidence": 0.8283605873584747}]}, {"text": "We present this architecture and the synchronization issues we encountered in building a truly distributed, agent-based dialogue architecture.", "labels": [], "entities": []}], "introductionContent": [{"text": "More and more people are building dialogue systems.", "labels": [], "entities": []}, {"text": "Architecturally, these systems tend to fall into two camps: those with pipelined architectures (e.g.,), and those with agent-based architectures (e.g.,).", "labels": [], "entities": []}, {"text": "Agent-based architectures are advantageous because they free up system components to potentially act in a more asynchronous manner.", "labels": [], "entities": []}, {"text": "However, in practice, most dialogue systems built on an agent-based architecture pass messages such that they are basically functioning in terms of a pipelined flow-of-information.", "labels": [], "entities": []}, {"text": "Our original implementation of the TRIPS spoken dialogue system) was such an agent-based, pipelined flow-of-information system.", "labels": [], "entities": [{"text": "TRIPS spoken dialogue", "start_pos": 35, "end_pos": 56, "type": "TASK", "confidence": 0.6544575889905294}]}, {"text": "Recently, however, we made changes to the system () which allow it to take advantage of the distributed nature of an agentbased system.", "labels": [], "entities": []}, {"text": "Instead of system components passing information in a pipelined manner (interpretation \u2192 discourse management \u2192 generation), we allow the subsystems of interpretation, behavior (reasoning and acting) and generation to work asynchronously.", "labels": [], "entities": []}, {"text": "This makes the TRIPS system truly distributed and agent-based.", "labels": [], "entities": []}, {"text": "The driving forces behind these changes are to provide a framework for incremental and asynchronous language processing, and to allow fora mixed-initiative system at the task level.", "labels": [], "entities": []}, {"text": "We describe these motivations briefly here.", "labels": [], "entities": []}, {"text": "Incremental Language Processing Ina pipelined (or pipelined flow-of-information) system, generation does not occur until after both the interpretation and reasoning processes have completed.", "labels": [], "entities": []}, {"text": "This constraint is not present in human-human dialogue as evidenced by the presence of grounding, utterance acknowledgment, and interruptions.", "labels": [], "entities": []}, {"text": "Making interpretation, behavior, and generation asynchronous allows, for example, the system to acknowledge a question while it is still working on finding the answer.", "labels": [], "entities": []}, {"text": "Mixed-initiative Interaction Although pipelined systems allow the system to take discourse-level initiative (cf. (), it is difficult to see how they could allow the system to take task-level initiative in a principled way.", "labels": [], "entities": []}, {"text": "In most systems, reasoning and action are driven mostly by interpreted input (i.e., they are reactive to the user's utterances).", "labels": [], "entities": []}, {"text": "Ina mixed-initiative system, the system's response should be determined not only by user input, but also system goals and obligations, as well as exogenous events.", "labels": [], "entities": []}, {"text": "For example, a system with an asynchronous behavior subsystem can inform the user of anew, important event, regardless of whether it is tied to the user's last utterance.", "labels": [], "entities": []}, {"text": "On the other hand, in the extreme version of pipelined flow-of-control, behavior cannot do anything until the user says something, which is the only way to get the pipeline flowing.", "labels": [], "entities": []}, {"text": "The reasons for our changes are described in further detail in.", "labels": [], "entities": []}, {"text": "In this paper, we focus on the issues we encountered in developing an asynchronous agentbased dialogue system and their respective solutions, which turnout to be highly related to the process of grounding.", "labels": [], "entities": []}, {"text": "We first describe the general TRIPS architecture and information flow and then discuss the various points of synchronization within the system.", "labels": [], "entities": []}, {"text": "We then discuss what these issues mean in general for the implementation of an asynchronous agent-based system.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}