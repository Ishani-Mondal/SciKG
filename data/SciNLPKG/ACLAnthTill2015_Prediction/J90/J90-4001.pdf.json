{"title": [], "abstractContent": [{"text": "We present three algorithms for resolving anaphora in Slot Grammar: (1) an algorithm for interpreting elliptical VPs in antecedent-contained deletion structures, subdeletion constructions, and intersentential cases; (2) a syntactic filter on pronominal coreference; and (3) an algorithm for identifying the binder of an anaphor (reflexive pronoun or the reciprocal phrase \"each other\").", "labels": [], "entities": [{"text": "Slot Grammar", "start_pos": 54, "end_pos": 66, "type": "TASK", "confidence": 0.827699214220047}]}, {"text": "These algorithms operate on the output of a Slot Grammar parser, and, like the parser, they run in Prolog.", "labels": [], "entities": [{"text": "Slot Grammar parser", "start_pos": 44, "end_pos": 63, "type": "TASK", "confidence": 0.6132497986157736}, {"text": "Prolog", "start_pos": 99, "end_pos": 105, "type": "DATASET", "confidence": 0.9636659622192383}]}, {"text": "The VP anaphora algorithm implements an S-structure analysis of VP ellipsis that we argue provides a more unified and empirically motivated treatment of VP anaphora resolution than analyses that attempt to interpret elliptical VPs at a level of logical form.", "labels": [], "entities": [{"text": "VP anaphora resolution", "start_pos": 153, "end_pos": 175, "type": "TASK", "confidence": 0.7107242743174235}]}, {"text": "Each algorithm can operate independently of the others, and we have incorporated each into an integrated anaphora resolution component.", "labels": [], "entities": []}, {"text": "The interpreted elliptical VP structures that the VP anaphora algorithm produces provide the input to the two NP anaphora resolution procedures.", "labels": [], "entities": [{"text": "NP anaphora resolution", "start_pos": 110, "end_pos": 132, "type": "TASK", "confidence": 0.7439494530359904}]}, {"text": "The integrated anaphora resolution component provides a powerful syntactically driven module for generating partially interpreted representations that can serve as input to semantic and discourse interpretation systems.", "labels": [], "entities": [{"text": "anaphora resolution", "start_pos": 15, "end_pos": 34, "type": "TASK", "confidence": 0.80357626080513}]}], "introductionContent": [{"text": "In this paper 1 we present algorithms for handling three different sorts of anaphora within Slot Grammar).", "labels": [], "entities": []}, {"text": "These algorithms are second-pass procedures that operate on the output of a Slot Grammar parser.", "labels": [], "entities": [{"text": "Slot Grammar parser", "start_pos": 76, "end_pos": 95, "type": "TASK", "confidence": 0.7352387110392252}]}, {"text": "The parser and the algorithms constituting the anaphora resolution component run in Prolog.", "labels": [], "entities": [{"text": "anaphora resolution", "start_pos": 47, "end_pos": 66, "type": "TASK", "confidence": 0.7319449484348297}, {"text": "Prolog", "start_pos": 84, "end_pos": 90, "type": "DATASET", "confidence": 0.9762741327285767}]}, {"text": "In Section 2 we present a brief overview of Slot Grammar and the parser that implements it.", "labels": [], "entities": [{"text": "Slot Grammar", "start_pos": 44, "end_pos": 56, "type": "TASK", "confidence": 0.8601024150848389}]}, {"text": "This section also includes a description of an alternative network representation of parser output on which the algorithms operate.", "labels": [], "entities": []}, {"text": "In Section 3 we propose an analysis of VP anaphora that involves applying rules of interpretation directly to S-structure (parsed surface structure) rather than to LF (logical form), as required by several recent accounts.", "labels": [], "entities": []}, {"text": "We provide in Section 3.1 theoretical motivation for preferring our analysis to an LF treatment.", "labels": [], "entities": []}, {"text": "In Section 3.2 we present a schematic statement of the algorithm that implements this analysis in Slot Grammar, and illustrate the algorithm with examples of its output.", "labels": [], "entities": [{"text": "Slot Grammar", "start_pos": 98, "end_pos": 110, "type": "TASK", "confidence": 0.6942368149757385}]}, {"text": "Section 4 is devoted to a syntactic filter on pronominal anaphora that identifies noncoreferential NP-pronoun pairs within a sentence.", "labels": [], "entities": []}, {"text": "A more detailed presentation of the filter algorithm is given in.", "labels": [], "entities": []}, {"text": "Section 5 contains a rule for locating possible NP antecedents for anaphors (reflexive pronouns and reciprocals).", "labels": [], "entities": []}, {"text": "The conjunction of the latter two algorithms has roughly the same extension as) binding theory.", "labels": [], "entities": []}, {"text": "However, while the conditions of the binding theory are stated in terms of the configurational relation of c-command, the coreference filter and anaphor binding algorithm employ the head-complement structures defined by Slot Grammar.", "labels": [], "entities": []}, {"text": "2 The three algorithms that makeup the anaphora resolution component of Slot Grammar are fully modular in that they apply independently of each other.", "labels": [], "entities": [{"text": "anaphora resolution", "start_pos": 39, "end_pos": 58, "type": "TASK", "confidence": 0.7322165966033936}, {"text": "Slot Grammar", "start_pos": 72, "end_pos": 84, "type": "TASK", "confidence": 0.8761413097381592}]}, {"text": "Any two algorithms in this set can be conjoined.", "labels": [], "entities": []}, {"text": "Moreover, both the pronominal noncoreference filter and anaphor binding algorithms have been combined with the VP anaphora algorithm to construct an integrated system of anaphora resolution in which the two NP anaphora rules apply to the results of VP anaphora interpretation) In Section 6 we illustrate the operation of the integrated system with examples of the representations it generates.", "labels": [], "entities": [{"text": "VP anaphora interpretation", "start_pos": 249, "end_pos": 275, "type": "TASK", "confidence": 0.6268649796644846}]}], "datasetContent": [], "tableCaptions": []}