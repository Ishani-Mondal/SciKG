{"title": [{"text": "The #-TBL System: Logic Programming Tools for Transformation-Based Learning", "labels": [], "entities": [{"text": "Transformation-Based Learning", "start_pos": 46, "end_pos": 75, "type": "TASK", "confidence": 0.8157325983047485}]}], "abstractContent": [{"text": "The #u-TBL system represents an attempt to use the search and database capabilities of the Prolog programming language to implement a generalized form of transformation-based learning.", "labels": [], "entities": []}, {"text": "In the true spirit of logic-programming, the implementation is 'derived' from a declarative, logical interpretation of transformation rules.", "labels": [], "entities": []}, {"text": "The #-TBL system recognizes four kinds of rules, that can be used to implement various kinds of disambiguators, including Constraint Grammar dis-ambiguators as well as more traditional 'Brill-taggers'.", "labels": [], "entities": []}, {"text": "Results from a number of experiments and benchmarks are presented which show that the system is both flex-\" ible and efficient.", "labels": [], "entities": []}], "introductionContent": [{"text": "Since Eric Brill first introduced the method of Transformation-Based Learning (TBL) it has been used to learn rules for many natural language processing tasks, such as part-of-speech tagging, PPattachment disambiguation, text chunking, spelling correction, dialogue act tagging] and ellipsis resolution].", "labels": [], "entities": [{"text": "part-of-speech tagging", "start_pos": 168, "end_pos": 190, "type": "TASK", "confidence": 0.717515766620636}, {"text": "PPattachment disambiguation", "start_pos": 192, "end_pos": 219, "type": "TASK", "confidence": 0.9064647257328033}, {"text": "text chunking", "start_pos": 221, "end_pos": 234, "type": "TASK", "confidence": 0.7575485408306122}, {"text": "spelling correction", "start_pos": 236, "end_pos": 255, "type": "TASK", "confidence": 0.8689526319503784}, {"text": "dialogue act tagging", "start_pos": 257, "end_pos": 277, "type": "TASK", "confidence": 0.6464134852091471}, {"text": "ellipsis resolution", "start_pos": 283, "end_pos": 302, "type": "TASK", "confidence": 0.7396997511386871}]}, {"text": "Thus, TBL has proved very useful, in many different ways, and is likely to continue to do so in the future.", "labels": [], "entities": [{"text": "TBL", "start_pos": 6, "end_pos": 9, "type": "DATASET", "confidence": 0.4525502920150757}]}, {"text": "Moreover, since Brill generously made his own TBL implementation publicly available, l many researchers in need of all off-the-shelf retrainable part-of-speech tagger have found what they were looking for.", "labels": [], "entities": []}, {"text": "However, although very useful, Brill's original implementation is somewhat opaque, templates are not compositional, IThroughout this paper, when referring to Brill's TBL implementation, it is always his contextual-rule-learnerimplemented in C -that I have in mind.", "labels": [], "entities": [{"text": "IThroughout", "start_pos": 116, "end_pos": 127, "type": "DATASET", "confidence": 0.5553489327430725}]}, {"text": "\"It is available from http://www, cs. jhu.", "labels": [], "entities": []}, {"text": "edu/~brill/, along with ~veral other learners and utility programs. and they are hard-wired into the program.", "labels": [], "entities": []}, {"text": "Therefore, the program is difficult to modify and extend.", "labels": [], "entities": []}, {"text": "What is more, it is fairly slow.", "labels": [], "entities": []}, {"text": "This paper is dedicated to the design and implementation of an alternative transformation-based learner system, called \"the #-TBL system\" (pronounced \"mutable\").", "labels": [], "entities": []}, {"text": "The p-TBL system is designed to be theoretically transparent, flexible and efficient.", "labels": [], "entities": []}, {"text": "Transparency is achieved by performing a 'logical reconstruction' of TBL, and by deriving the system from there.", "labels": [], "entities": []}, {"text": "Flexibility is achieved through the use of a compositional rule and template formalism, and 'pluggable' \"algorithms.", "labels": [], "entities": []}, {"text": "As for the implementation, it turns out that transformation-based learning can be implemented very straightforwardly in a logic programming language such as Prolog.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 157, "end_pos": 163, "type": "DATASET", "confidence": 0.9356991052627563}]}, {"text": "Efficient indexing of data, unification and backtracking search, as well as established Prolog programming techniques for building rule compilers and meta-interpreters, contribute to the making of a logically transparent, easily extendible, and fairly efficient system.", "labels": [], "entities": []}, {"text": "The content of the paper is presented in a bottom-up fashion, starting from the semantics of transformation rules.", "labels": [], "entities": []}, {"text": "show that, contrary to what is often assumed, transformation rules can be given a declarative, logical interpretation.", "labels": [], "entities": []}, {"text": "I then introduce the IL-TBL system, which in a manner of speaking is derived from this interpretation of rules.", "labels": [], "entities": []}, {"text": "The template compiler, apart of the system which translates templates into efficient Prolog programs, is described, and by w~\" of examples it is shown how a particular combination of training data and templates maybe 'queried' from the Prolog prompt.", "labels": [], "entities": [{"text": "Prolog prompt", "start_pos": 236, "end_pos": 249, "type": "DATASET", "confidence": 0.9331585764884949}]}, {"text": "Next, a number of variants of all-solutions predicates are specified, that deal with notions such as scores, rankings and thresholds.", "labels": [], "entities": []}, {"text": "Since they appear to be independently useful -even useful outside TBL -\"The ~-TBL system is available from http://~w, ling. gu. se/-~lager/mutbl, html.", "labels": [], "entities": []}, {"text": "they belong in a separate library.", "labels": [], "entities": []}, {"text": "By combining predicates from these code libraries, a number of TBL-like algorithms are assembled, and benchmarks are run that show the/~-TBL system to be quite efficient.", "labels": [], "entities": []}, {"text": "Finally, a small experiment using transformation-based learning to induce Constraint Grammars from corpora is performed.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1 summarizes the re- sults of the tests:", "labels": [], "entities": []}, {"text": " Table 2: Performance of Brill's learner", "labels": [], "entities": [{"text": "Brill's learner", "start_pos": 25, "end_pos": 40, "type": "DATASET", "confidence": 0.9202060699462891}]}, {"text": " Table 3: I~-TBL performance -the optimized algorithm", "labels": [], "entities": [{"text": "TBL", "start_pos": 13, "end_pos": 16, "type": "METRIC", "confidence": 0.9188735485076904}]}, {"text": " Table 4: #-TBL performance -the lazy algorithm vs.  the '~ la Brill algorithm.", "labels": [], "entities": [{"text": "TBL", "start_pos": 12, "end_pos": 15, "type": "METRIC", "confidence": 0.8799061179161072}]}, {"text": " Table 5: Result of Constraint Grammar induction", "labels": [], "entities": [{"text": "Result of Constraint Grammar", "start_pos": 10, "end_pos": 38, "type": "TASK", "confidence": 0.6873608306050301}]}]}