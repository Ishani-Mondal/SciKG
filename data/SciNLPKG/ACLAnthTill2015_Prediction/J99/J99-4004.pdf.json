{"title": [], "abstractContent": [{"text": "We synthesize work on parsing algorithms, deductive parsing, and the theory of algebra applied to formal languages into a general system for describing parsers.", "labels": [], "entities": [{"text": "parsing algorithms", "start_pos": 22, "end_pos": 40, "type": "TASK", "confidence": 0.9345293343067169}, {"text": "deductive parsing", "start_pos": 42, "end_pos": 59, "type": "TASK", "confidence": 0.6902698129415512}]}, {"text": "Each parser performs abstract computations using the operations of a semiring.", "labels": [], "entities": []}, {"text": "The system allows a single, simple representation to be used for describing parsers that compute recognition, derivation forests, Viterbi, n-best, inside values, and other values, simply by substituting the operations of different semirings.", "labels": [], "entities": []}, {"text": "We also show how to use the same representation, interpreted differently, to compute outside values.", "labels": [], "entities": []}, {"text": "The system can be used to describe a wide variety of parsers, including Earley's algorithm, tree adjoining grammar parsing, Graham Harrison Ruzzo parsing, and prefix value computation.", "labels": [], "entities": [{"text": "tree adjoining grammar parsing", "start_pos": 92, "end_pos": 122, "type": "TASK", "confidence": 0.6041511818766594}, {"text": "Graham Harrison Ruzzo parsing", "start_pos": 124, "end_pos": 153, "type": "TASK", "confidence": 0.5511079132556915}]}], "introductionContent": [{"text": "For a given grammar and string, there are many interesting quantities we can compute.", "labels": [], "entities": []}, {"text": "We can determine whether the string is generated by the grammar; we can enumerate all of the derivations of the string; if the grammar is probabilistic, we can compute the inside and outside probabilities of components of the string.", "labels": [], "entities": []}, {"text": "Traditionally, a different parser description has been needed to compute each of these values.", "labels": [], "entities": []}, {"text": "For some parsers, such as CKY parsers, all of these algorithms (except for the outside parser) strongly resemble each other.", "labels": [], "entities": []}, {"text": "For other parsers, such as Earley parsers, the algorithms for computing each value are somewhat different, and a fair amount of work can be required to construct each one.", "labels": [], "entities": []}, {"text": "We present a formalism for describing parsers such that a single simple description can be used to generate parsers that compute all of these quantities and others.", "labels": [], "entities": []}, {"text": "This will be especially useful for finding parsers for outside values, and for parsers that can handle general grammars, like Earley-style parsers.", "labels": [], "entities": []}, {"text": "Although our description format is not limited to context-free grammars (CFGs), we will begin by considering parsers for this common formalism.", "labels": [], "entities": []}, {"text": "The input string will be denoted wlw2...", "labels": [], "entities": []}, {"text": "We will refer to the complete string as the sentence.", "labels": [], "entities": []}, {"text": "A CFG G is a 4-tuple (N, ~, R, S) where N is the set of nonterminals including the start symbol S, ~ is the set of terminal symbols, and R is the set of rules, each of the form A --* a for Ac N and a E (N U ~)*.", "labels": [], "entities": []}, {"text": "We will use the symbol ~ for immediate derivation and for its reflexive, transitive closure.", "labels": [], "entities": []}, {"text": "We will illustrate the similarity of parsers for computing different values using the CKY algorithm as an example.", "labels": [], "entities": []}, {"text": "We can write this algorithm in its iterative form as shown in.", "labels": [], "entities": []}, {"text": "Here, we explicitly construct a Boolean chart, chart[1..n, rithm consists of a first set of loops to handle the singleton productions, a second set of loops to handle the binary productions, and a return of the start symbol's chart entry.", "labels": [], "entities": []}, {"text": "Next, we consider probabilistic grammars, in which we associate a probability with every rule, P(A --* a).", "labels": [], "entities": []}, {"text": "These probabilities can be used to associate a probability efficiently compute the set of legal derivations of the input string.", "labels": [], "entities": []}, {"text": "The derivation forest is typically found by modifying the recognition algorithm to keep track of \"back pointers\" for each cell of how it was produced.", "labels": [], "entities": []}, {"text": "The second quantity often computed is the Viterbi score, the probability of the most probable derivation of the sentence.", "labels": [], "entities": [{"text": "Viterbi score", "start_pos": 42, "end_pos": 55, "type": "METRIC", "confidence": 0.7866001129150391}]}, {"text": "This can typically be computed by substituting x for A and max for V.", "labels": [], "entities": []}, {"text": "Less commonly computed is the total number of parses of the sentence, which, like the inside values, can be computed using multiplication and addition; unlike for the inside values, the probabilities of the rules are not multiplied into the scores.", "labels": [], "entities": []}, {"text": "There is one last commonly computed quantity, the outside probabilities, which we will describe later, in Section 4.", "labels": [], "entities": []}, {"text": "One of the key points of this paper is that all five of these commonly computed quantities can be described as elements of complete semirings.", "labels": [], "entities": []}, {"text": "The relationship between grammars and semirings was discovered by, and for parsing with the CKY algorithm, dates back to.", "labels": [], "entities": []}, {"text": "A complete semiring is a set of values over which a multiplicative operator and a commutative additive operator have been defined, and for which infinite summations are defined.", "labels": [], "entities": []}, {"text": "For parsing algorithms satisfying certain conditions, the multiplicative and additive operations of any complete semiring can be used in place of A and V, and correct values will be returned.", "labels": [], "entities": [{"text": "parsing", "start_pos": 4, "end_pos": 11, "type": "TASK", "confidence": 0.9677515625953674}]}, {"text": "We will give a simple normal form for describing parsers, then precisely define complete semirings, and the conditions for correctness.", "labels": [], "entities": []}, {"text": "We now describe our normal form for parsers, which is very similar to that used by Shieber, and by.", "labels": [], "entities": []}, {"text": "This work can bethought of as a generalization from their work in the Boolean semiring to semirings in general.", "labels": [], "entities": []}, {"text": "In most parsers, there is at least one chart of some form.", "labels": [], "entities": []}, {"text": "In our normal form, we will use a corresponding, equivalent concept, items.", "labels": [], "entities": []}, {"text": "Rather than, for instance, a chart element chart[i,A,j], we will use an item.", "labels": [], "entities": []}, {"text": "Furthermore, rather than use explicit, procedural descriptions, such as", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}