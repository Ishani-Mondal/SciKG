{"title": [{"text": "A CONNECTIONIST PARSER FOR STRUCTURE UNIFICATION GRAMMAR", "labels": [], "entities": [{"text": "A CONNECTIONIST PARSER FOR STRUCTURE UNIFICATION GRAMMAR", "start_pos": 0, "end_pos": 56, "type": "METRIC", "confidence": 0.6393031988825116}]}], "abstractContent": [{"text": "This paper presents a connectionist syntactic parser which uses Structure Unification Grammar as its grammatical framework.", "labels": [], "entities": [{"text": "connectionist syntactic parser", "start_pos": 22, "end_pos": 52, "type": "TASK", "confidence": 0.8288282950719198}]}, {"text": "The parser is implemented in a connectionist architecture which stores and dynamically manipulates symbolic representations , but which can't represent arbitrary disjunction and has bounded memory.", "labels": [], "entities": []}, {"text": "These problems can be overcome with Structure Unification Grammar's extensive use of partial descriptions .", "labels": [], "entities": [{"text": "Structure Unification Grammar", "start_pos": 36, "end_pos": 65, "type": "TASK", "confidence": 0.7690700888633728}]}], "introductionContent": [{"text": "The similarity between connectionist models of computation and neuron computation suggests that a study of syntactic parsing in a connectionist computational architecture could lead to significant insights into ways natural language can be parsed efficiently.", "labels": [], "entities": [{"text": "syntactic parsing", "start_pos": 107, "end_pos": 124, "type": "TASK", "confidence": 0.7669277489185333}]}, {"text": "Unfortunately, previous investigations into connectionist parsing have not been very successful.", "labels": [], "entities": [{"text": "connectionist parsing", "start_pos": 44, "end_pos": 65, "type": "TASK", "confidence": 0.97356778383255}]}, {"text": "They cannot parse arbitrarily long sentences and have inadequate grammar representations.", "labels": [], "entities": []}, {"text": "However, the difficulties with connectionist parsing can be overcome by adopting a different connectionist model of computation, namely that proposed by.", "labels": [], "entities": [{"text": "connectionist parsing", "start_pos": 31, "end_pos": 52, "type": "TASK", "confidence": 0.8244216442108154}]}, {"text": "This connectionist computational architecture differs from others in that it directly manifests the symbolic interpretation of the information it stores and manipulates.", "labels": [], "entities": []}, {"text": "It also shares the massive parallelism, evidential reasoning ability, and neurological plausibility of other connectionist architectures.", "labels": [], "entities": []}, {"text": "Since virtually all characterizations of natural language syntax have relied heavily on symbolic representations, this architecture is ideally suited for the investigation of syntactic parsing.", "labels": [], "entities": [{"text": "syntactic parsing", "start_pos": 175, "end_pos": 192, "type": "TASK", "confidence": 0.7298501133918762}]}, {"text": "*This research was supported by ARO grant DAAL 03-89-C-0031, DARPA grant N00014-90-J-1863, NSF grant IRI 90-16592, and Ben Franklin grant 91S.3078C-1.", "labels": [], "entities": [{"text": "ARO grant DAAL 03-89-C-0031", "start_pos": 32, "end_pos": 59, "type": "DATASET", "confidence": 0.6762562319636345}, {"text": "DARPA grant N00014-90-J-1863", "start_pos": 61, "end_pos": 89, "type": "DATASET", "confidence": 0.6401835481325785}, {"text": "NSF grant IRI 90-16592", "start_pos": 91, "end_pos": 113, "type": "DATASET", "confidence": 0.6168261766433716}, {"text": "Ben Franklin grant 91S.3078C-1", "start_pos": 119, "end_pos": 149, "type": "DATASET", "confidence": 0.9059318453073502}]}, {"text": "The computational architecture proposed by provides a rather general purpose computing framework, but it does have significant limitations.", "labels": [], "entities": []}, {"text": "A computing module can represent entities, store predications over those entities, and use pattern-action rules to manipulate this stored information.", "labels": [], "entities": []}, {"text": "This form of representation is very expressive, and pattern-action rules area general purpose way to do computation.", "labels": [], "entities": []}, {"text": "However, this architecture has two limitations which pose difficult problems for parsing natural language.", "labels": [], "entities": [{"text": "parsing natural language", "start_pos": 81, "end_pos": 105, "type": "TASK", "confidence": 0.8912773927052816}]}, {"text": "First, only a conjunction of predications can be stored.", "labels": [], "entities": []}, {"text": "The architecture cannot represent arbitrary disjunction.", "labels": [], "entities": []}, {"text": "This limitation implies that the parser's representation of syntactic structure must be able to leave unspecified the information which the input has not yet determined, rather than having a disjunction of more completely specified possibilities for completing the sentence.", "labels": [], "entities": []}, {"text": "Second, the memory capacity of any module is bounded.", "labels": [], "entities": []}, {"text": "The number of entities which can be stored is bounded by a small constant, and the number of predications per predicate is also bounded.", "labels": [], "entities": []}, {"text": "These bounds pose problems for parsing because the syntactic structures which need to be recovered can be arbitrarily large.", "labels": [], "entities": [{"text": "parsing", "start_pos": 31, "end_pos": 38, "type": "TASK", "confidence": 0.9749964475631714}]}, {"text": "This problem can be solved by allowing the parser to output the syntactic structure incrementally, thus allowing the parser to forget the information which it has already output and which it no longer needs to complete the parse.", "labels": [], "entities": []}, {"text": "This technique requires that the representation of syntactic structure be able to leave unspecified the information which has already been determined but which is no longer needed for the completion of the parse.", "labels": [], "entities": []}, {"text": "Thus the limitations of the architecture mean that the parser's representation of syntactic structure must be able to leave unspecified both the information which the input has not yet determined and the information which is no longer needed.", "labels": [], "entities": []}, {"text": "In order to comply with these requirements, the parser uses Structure Unification Grammar as its grammatical framework.", "labels": [], "entities": []}, {"text": "SUG is a formalization of accumulating informa-tion about the phrase structure of a sentence until a complete description of the sentence's phrase structure tree is constructed.", "labels": [], "entities": []}, {"text": "Its extensive use of partial descriptions makes it ideally suited for dealing with the limitations of the architecture.", "labels": [], "entities": []}, {"text": "This paper focuses on the parser's representation of phrase structure information and on the way the parser accumulates this information during a parse.", "labels": [], "entities": []}, {"text": "Brief descriptions of the grammar formalism and the implementation in the connectionist architecture are also given.", "labels": [], "entities": []}, {"text": "Except where otherwise noted, a simulation of the implementation has been written, and its grammar supports a small set of examples.", "labels": [], "entities": []}, {"text": "A more extensive grammar is underdevelopment.", "labels": [], "entities": []}, {"text": "SUG is clearly an adequate grammatical framework, due to its ability to straightforwardly simulate Feature Structure Based Tree Adjoining Grammar, as well as other formalisms.", "labels": [], "entities": [{"text": "Feature Structure Based Tree Adjoining Grammar", "start_pos": 99, "end_pos": 145, "type": "TASK", "confidence": 0.6125284334023794}]}, {"text": "Initial investigations suggest that the constraints imposed by the parser do not interfere with this linguistic adequacy, and more extensive empirical verification of this claim is in progress.", "labels": [], "entities": []}, {"text": "The remainder of this paper will first give an overview of Structure Unification Grammar, then present the parser design, and finally a sketch of its implementation.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}