{"title": [{"text": "Parse Fitting and Prose Fixing: Getting a Hold on III-formedness 1", "labels": [], "entities": [{"text": "Parse Fitting", "start_pos": 0, "end_pos": 13, "type": "TASK", "confidence": 0.6996664106845856}, {"text": "Prose Fixing", "start_pos": 18, "end_pos": 30, "type": "TASK", "confidence": 0.7968403398990631}]}], "abstractContent": [{"text": "Processing syntactically ill-formed language is an important mission of the EPISTLE system, lll-formed input is treated by this system in various ways.", "labels": [], "entities": [{"text": "EPISTLE", "start_pos": 76, "end_pos": 83, "type": "DATASET", "confidence": 0.8872458934783936}]}, {"text": "Misspellings are highlighted by a standard spelling checker; syntactic errors are detected and corrections are suggested; and stylistic infelicities are called to the user's attention.", "labels": [], "entities": []}, {"text": "Central to the EPISTLE processing strategy is its technique of fitted parsing.", "labels": [], "entities": [{"text": "EPISTLE processing", "start_pos": 15, "end_pos": 33, "type": "TASK", "confidence": 0.6686464250087738}, {"text": "fitted parsing", "start_pos": 63, "end_pos": 77, "type": "TASK", "confidence": 0.7600153684616089}]}, {"text": "When the rules of a conventional syntactic grammar are unable to produce a parse for an input string, this technique can be used to produce a reasonable approximate parse that can serve as input to the remaining stages of processing.", "labels": [], "entities": []}, {"text": "This paper first describes the fitting process and gives examples of ill-formed language situations where it is called into play.", "labels": [], "entities": [{"text": "fitting process", "start_pos": 31, "end_pos": 46, "type": "TASK", "confidence": 0.891112208366394}]}, {"text": "We then show how a fitted parse allows EPISTLE to carry on its text-critiquing mission where conventional grammars would fail either because of input problems or because of limitations in the grammars themselves.", "labels": [], "entities": [{"text": "EPISTLE", "start_pos": 39, "end_pos": 46, "type": "DATASET", "confidence": 0.8498315215110779}]}, {"text": "Some inherent difficulties of the fitting technique are also discussed.", "labels": [], "entities": [{"text": "fitting", "start_pos": 34, "end_pos": 41, "type": "TASK", "confidence": 0.9845037460327148}]}, {"text": "In addition, we explore how style critiquing relates to the handling of ill-formed input, and how a fitted parse can be used in style checking.", "labels": [], "entities": [{"text": "style critiquing", "start_pos": 28, "end_pos": 44, "type": "TASK", "confidence": 0.7727077603340149}, {"text": "style checking", "start_pos": 128, "end_pos": 142, "type": "TASK", "confidence": 0.7527235150337219}]}], "introductionContent": [{"text": "In its current form, the EPISTLE system addresses the problems of grammar and style checking of texts written in ordinary English (letters, reports, and manuals, as opposed to novels, plays, and poems).", "labels": [], "entities": [{"text": "EPISTLE system", "start_pos": 25, "end_pos": 39, "type": "DATASET", "confidence": 0.855126827955246}, {"text": "style checking of texts written in ordinary English (letters, reports, and manuals", "start_pos": 78, "end_pos": 160, "type": "TASK", "confidence": 0.8511697471141815}]}, {"text": "It is this goal that involves us so intimately with the processing of ill-formed language.", "labels": [], "entities": []}, {"text": "Grammar checking deals with such errors as disagreement in number between subject and verb; style checking calls attention to such infelicities as sentences that are too wordy or too complex.", "labels": [], "entities": [{"text": "Grammar checking", "start_pos": 0, "end_pos": 16, "type": "TASK", "confidence": 0.7985231876373291}, {"text": "style checking", "start_pos": 92, "end_pos": 106, "type": "TASK", "confidence": 0.6992317289113998}]}, {"text": "A standard spelling checker is also included.", "labels": [], "entities": []}, {"text": "Our grammar is written in NLP, an augmented phrase structure language which is currently implemented in LISP/370.", "labels": [], "entities": [{"text": "LISP/370", "start_pos": 104, "end_pos": 112, "type": "DATASET", "confidence": 0.8257858554522196}]}, {"text": "At this time the EPISTLE grammar uses syntactic, but not semantic, information.", "labels": [], "entities": [{"text": "EPISTLE grammar", "start_pos": 17, "end_pos": 32, "type": "DATASET", "confidence": 0.8826215863227844}]}, {"text": "Access to an on-line standard dictionary with about 130,000 entries, including part-of-speech and some other syntactic information (such as transitivity of The work described here is a continuation of work first presented at the Conference on Applied Natural Language Processing in Santa Monica, verbs), makes the system's vocabulary essentially unlimited.", "labels": [], "entities": []}, {"text": "We test and improve the grammar by regularly running it on a database of 2254 sentences from 411 actual business letters.", "labels": [], "entities": []}, {"text": "Most of these sentences are rather complicated; the longest contains 63 words, and the average length is 19.2 words.", "labels": [], "entities": []}, {"text": "Since the subset of English represented in business documents is very large, we need a very comprehensive grammar and a robust parser.", "labels": [], "entities": []}, {"text": "We take a heuristic approach and consider that a natural language parser can be divided into three parts: (a) a set of rules, called the core grammar, that precisely defines the central, agreed-upon grammatical structures of a language; (b) peripheral procedures that handle parsing ambiguity: when the core grammar produces more than one parse, these procedures decide which of the multiple parses is to be preferred; (c) peripheral procedures that handle parsing fail In EPISTLE, (a) the core grammar consists at present of a set of about 300 syntax rules; (b) ambiguity is resolved by using a metric that ranks alternative parses; and (c) parse failure is handled by the fitting procedure described here.", "labels": [], "entities": [{"text": "EPISTLE", "start_pos": 473, "end_pos": 480, "type": "DATASET", "confidence": 0.9009243249893188}]}, {"text": "In using the terms core grammar and periphery, we are consciously echoing recent work in generative grammar, but we are applying the terms in a somewhat different way.", "labels": [], "entities": [{"text": "generative grammar", "start_pos": 89, "end_pos": 107, "type": "TASK", "confidence": 0.9551927149295807}]}, {"text": "Core grammar, in current linguistic theory, suggests the notion of a set of very general rules that define universal properties of human language and effectively set limits on the types of grammars any particular language may have; periphery phenomena are those constructions that are peculiar to particular languages and that require rules beyond what the core grammar will provide.", "labels": [], "entities": []}, {"text": "Our current work is not concerned with the meta-rules of a Universal Grammar.", "labels": [], "entities": []}, {"text": "But we have found that a distinction between core and periphery is useful even within a grammar of a particular language -in this case, English.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}