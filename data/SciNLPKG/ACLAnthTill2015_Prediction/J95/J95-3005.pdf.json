{"title": [{"text": "Squibs and Discussions Memoization in Top-Down Parsing", "labels": [], "entities": [{"text": "Squibs and Discussions Memoization in Top-Down Parsing", "start_pos": 0, "end_pos": 54, "type": "TASK", "confidence": 0.6888923261846814}]}], "abstractContent": [], "introductionContent": [{"text": "Ina paper published in this journal, pointed out that memoization of a top-down recognizer program produces a program that behaves similiarly to a chart parser.", "labels": [], "entities": []}, {"text": "This is not surprising to anyone familiar with logic-programming approaches to natural language processing (NLP).", "labels": [], "entities": [{"text": "natural language processing (NLP)", "start_pos": 79, "end_pos": 112, "type": "TASK", "confidence": 0.7448384662469228}]}, {"text": "For example, the Earley deduction proof procedure is essentially a memoizing version of the top-down selected literal deletion (SLD) proof procedure employed by Prolog.", "labels": [], "entities": [{"text": "Earley deduction proof", "start_pos": 17, "end_pos": 39, "type": "TASK", "confidence": 0.5366213917732239}, {"text": "top-down selected literal deletion (SLD) proof", "start_pos": 92, "end_pos": 138, "type": "TASK", "confidence": 0.6908826641738415}]}, {"text": "showed that the steps of the Earley Deduction proof procedure proving the well-formedness of a string S from the standard 'top-down' definite clause grammar (DCG) axiomatization of a contextfree grammar (CFG) G correspond directly to those of Earley's algorithm recognizing S using G.", "labels": [], "entities": []}, {"text": "Yet as Norvig notes in passing, using his approach the resulting parsers in general fail to terminate on left-recursive grammars, even with memoization.", "labels": [], "entities": []}, {"text": "The goal of this paper is to discover why this is the case and present a functional formalization of memoized top-down parsing for which this is not so.", "labels": [], "entities": [{"text": "memoized top-down parsing", "start_pos": 101, "end_pos": 126, "type": "TASK", "confidence": 0.6436370511849722}]}, {"text": "Specifically, I show how to formulate top-down parsers in a 'continuation-passing style,' which incrementally enumerates the right string positions of a category, rather than returning a set of such positions as a single value.", "labels": [], "entities": []}, {"text": "This permits a type of memoization not described to my knowledge in the context of functional programming before.", "labels": [], "entities": []}, {"text": "This kind of memoization is akin to that used in logic programming, and yields terminating parsers even in the face of left recursion.", "labels": [], "entities": []}, {"text": "In this paper, algorithms are expressed in the Scheme programming language.", "labels": [], "entities": []}, {"text": "Scheme was chosen because it is a popular, widely known language that many readers find easy to understand.", "labels": [], "entities": []}, {"text": "Scheme's 'first-class' treatment of functions simplifies the functional abstraction used in this paper, but the basic approach can be implemented in more conventional languages as well.", "labels": [], "entities": []}, {"text": "Admittedly elegance is a matter of taste, but personally I find the functional specification of CFGs described here as simple and elegant as the more widely known logical (DCG) formalization, and I hope that the presentation of working code will encourage readers to experiment with the ideas described here and in more substantial works such as.", "labels": [], "entities": []}, {"text": "In fact, my own observations suggest that with minor modifications (such as the use of integers rather than lists to indicate string positions, and vectors indexed by string positions rather than lists in the memoization routines) an extremely efficient chart parser can be obtained from the code presented here.", "labels": [], "entities": []}, {"text": "Ideas related to the ones discussed here have been presented on numerous occasions.", "labels": [], "entities": []}, {"text": "Almost 20 years ago noticed the relationship between chart parsing and top-down parsing.", "labels": [], "entities": [{"text": "chart parsing", "start_pos": 53, "end_pos": 66, "type": "TASK", "confidence": 0.6963369995355606}, {"text": "top-down parsing", "start_pos": 71, "end_pos": 87, "type": "TASK", "confidence": 0.6682268381118774}]}, {"text": "presents a more abstract discussion of the functional treatment of parsing, and avoids the left-recursion problem for memoized functional parsers by using a 'recursive ascent' or PLR parsing strategy instead of a top-down strategy.", "labels": [], "entities": [{"text": "functional treatment of parsing", "start_pos": 43, "end_pos": 74, "type": "TASK", "confidence": 0.6448200345039368}]}, {"text": "At a more abstract level than that of this paper, Shieber, show that a variety of well-known parsing algorithms can be viewed as computing the closure of a set of basic parsing operations on a representation of the input string.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}