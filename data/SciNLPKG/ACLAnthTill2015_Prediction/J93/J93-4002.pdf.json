{"title": [], "abstractContent": [{"text": "In this paper we present a scheme to extend a recognition algorithm for Context-Free Grammars (CFG) that can be used to derive polynomial-time recognition algorithms fora set of formalisms that generate a superset of languages generated by CFG.", "labels": [], "entities": []}, {"text": "We describe the scheme by developing a Cocke-Kasami-Younger (CKY)-like pure bottom-up recognition algorithm for Linear Indexed Grammars and show how it can be adapted to give algorithms for Tree Adjoining Grammars and Combinatory Categorial Grammars.", "labels": [], "entities": []}, {"text": "This is the only polynomial-time recognition algorithm for Combinatory Categorial Grammars that we are aware of.", "labels": [], "entities": [{"text": "Combinatory Categorial Grammars", "start_pos": 59, "end_pos": 90, "type": "TASK", "confidence": 0.6957775553067526}]}, {"text": "The main contribution of this paper is the general scheme we propose for parsing a variety of formalisms whose derivation process is controlled by an explicit or implicit stack.", "labels": [], "entities": []}, {"text": "The ideas presented here can be suitably modified for other parsing styles or used in the generalized framework set out by Lang (1990).", "labels": [], "entities": []}], "introductionContent": [{"text": "This paper presents a scheme to extend known recognition algorithms for Context-Free Grammars (CFG) in order to obtain recognition algorithms fora class of grammatical formalisms that generate a strict superset of the set of languages generated by CFG.", "labels": [], "entities": [{"text": "CFG", "start_pos": 248, "end_pos": 251, "type": "DATASET", "confidence": 0.9369213581085205}]}, {"text": "In particular, we use this scheme to give recognition algorithms for Linear Indexed Grammars (LIG), Tree Adjoining Grammars (TAG), and aversion of Combinatory Categorial Grammars (CCG).", "labels": [], "entities": []}, {"text": "These formalisms belong to the class of mildly contextsensitive grammar formalisms identified by  on the basis of some properties of their generative capacity.", "labels": [], "entities": []}, {"text": "The parsing strategy that we propose can be applied to the formalisms listed as well as others that have similar characteristics (as outlined below) in their derivational process.", "labels": [], "entities": []}, {"text": "Some of the main ideas underlying our scheme have been influenced by the observations that can be made about the constructions used in the proofs of the equivalence of these formalisms and Head Grammars (HG).", "labels": [], "entities": []}, {"text": "There are similarities between the TAG and HG derivation processes and that of Context-Free Grammars (CFG).", "labels": [], "entities": []}, {"text": "This is reflected in common features of the parsing algorithms for HG and TAG and the CKY algorithm for CFG).", "labels": [], "entities": [{"text": "parsing", "start_pos": 44, "end_pos": 51, "type": "TASK", "confidence": 0.9690497517585754}, {"text": "CFG", "start_pos": 104, "end_pos": 107, "type": "DATASET", "confidence": 0.9056339263916016}]}, {"text": "In particular, what can happen at each step in a derivation can depend only on which of a finite set of \"states\" the derivation is in (for CFG these states can be considered to be the nonterminal symbols).", "labels": [], "entities": [{"text": "CFG", "start_pos": 139, "end_pos": 142, "type": "DATASET", "confidence": 0.9620813727378845}]}, {"text": "This property, which we refer to as the context-freeness property, is important because it allows one to keep only a limited amount of context during the recognition process, which results in polynomial time algorithms.", "labels": [], "entities": []}, {"text": "In the recognition algorithms mentioned above for CFG, HG, and TAG this is reflected in the fact that the recognizer can encode intermediate stages of the derivation with a bounded number of states.", "labels": [], "entities": [{"text": "CFG", "start_pos": 50, "end_pos": 53, "type": "DATASET", "confidence": 0.9143069386482239}]}, {"text": "An array is used whose entries are associated with a given component of the input.", "labels": [], "entities": []}, {"text": "In the case of the CKY algorithm, the presence of a particular nonterminal in an array entry is used to encode the fact that the nonterminal derives the associated substring of the input.", "labels": [], "entities": []}, {"text": "The context-freeness of CFG has the consequence that there is no need to encode the way, or ways, in which a nonterminal came to be placed in an array entry.", "labels": [], "entities": []}, {"text": "In this respect, the derivation processes of CCG and LIG would appear to differ from that of CFG.", "labels": [], "entities": [{"text": "CFG", "start_pos": 93, "end_pos": 96, "type": "DATASET", "confidence": 0.9207243323326111}]}, {"text": "In these systems unbounded stacklike structures replace the role played by nonterminals in controlling derivation choices.", "labels": [], "entities": []}, {"text": "This would seem to suggest that the context-freeness property of CFG, HG, and TAG derivations no longer holds.", "labels": [], "entities": [{"text": "CFG", "start_pos": 65, "end_pos": 68, "type": "DATASET", "confidence": 0.9282435774803162}]}, {"text": "Unbounded stacks can encode an unbounded number of earlier derivation choices.", "labels": [], "entities": []}, {"text": "In fact, while the path sets 1 of CFG, HG, and TAG derivation trees are regular languages, the path sets of CCG and LIG are context-free languages.", "labels": [], "entities": [{"text": "CFG", "start_pos": 34, "end_pos": 37, "type": "DATASET", "confidence": 0.9339398145675659}]}, {"text": "With respect to recognition algorithms, this suggests that the array (whose entries contain nonterminals in the case of CFG) would need to contain complete encodings of unbounded stacks giving an exponential time algorithm.", "labels": [], "entities": [{"text": "CFG", "start_pos": 120, "end_pos": 123, "type": "DATASET", "confidence": 0.9348721504211426}]}, {"text": "However, in LIG and CCG, the use of stacks to control derivations is limited in that different branches of a derivation cannot share stacks.", "labels": [], "entities": []}, {"text": "Thus, despite the above observations, the context-freeness property does in fact hold.", "labels": [], "entities": []}, {"text": "A detailed explanation of why this is so will be presented below.", "labels": [], "entities": []}, {"text": "We propose a method to extend the CKY algorithm to handle the limited use of stacks found in CCG and LIG.", "labels": [], "entities": []}, {"text": "We have chosen to adapt the CKY algorithm since it is the simplest form of bottom-up parsing.", "labels": [], "entities": []}, {"text": "A similar approach using Earley algorithm is also possible, although not considered here.", "labels": [], "entities": []}, {"text": "Since the use of the stacks is most explicit in the LIG formalism we describe our approach in detail by developing a recognition algorithm for LIG (Sections 2 and 3).", "labels": [], "entities": []}, {"text": "We then show how the general approach suggested in the parser for LIG can be tailored to CCG (in Section 4).", "labels": [], "entities": [{"text": "CCG", "start_pos": 89, "end_pos": 92, "type": "DATASET", "confidence": 0.9051079154014587}]}, {"text": "In the above discussion TAG has been grouped with HG.", "labels": [], "entities": [{"text": "TAG", "start_pos": 24, "end_pos": 27, "type": "TASK", "confidence": 0.7829750776290894}, {"text": "HG", "start_pos": 50, "end_pos": 52, "type": "DATASET", "confidence": 0.9489582777023315}]}, {"text": "However, TAG can also be viewed as making use of stacks in the same way as LIG and CCG.", "labels": [], "entities": [{"text": "TAG", "start_pos": 9, "end_pos": 12, "type": "TASK", "confidence": 0.7995455265045166}]}, {"text": "In Section 5 we show how the LIG algorithm presented in Section 3 can be adapted for TAG.", "labels": [], "entities": [{"text": "TAG", "start_pos": 85, "end_pos": 88, "type": "TASK", "confidence": 0.796943724155426}]}], "datasetContent": [], "tableCaptions": []}