{"title": [{"text": "A COMPLETE AND RECURSIVE FEATURE THEORY*", "labels": [], "entities": [{"text": "A COMPLETE", "start_pos": 0, "end_pos": 10, "type": "METRIC", "confidence": 0.7240232676267624}, {"text": "RECURSIVE", "start_pos": 15, "end_pos": 24, "type": "METRIC", "confidence": 0.9943748712539673}, {"text": "FEATURE", "start_pos": 25, "end_pos": 32, "type": "METRIC", "confidence": 0.9090879559516907}, {"text": "THEORY", "start_pos": 33, "end_pos": 39, "type": "METRIC", "confidence": 0.6445428729057312}]}], "abstractContent": [{"text": "Various feature descriptions are being employed in constrained-based grammar formalisms.", "labels": [], "entities": []}, {"text": "The common notational primitive of these descriptions are functional attributes called features.", "labels": [], "entities": []}, {"text": "The descriptions considered in this paper are the possibly quantified first-order formulae obtained from a signature of features and sorts.", "labels": [], "entities": []}, {"text": "We establish a complete first-order theory FT by means of three axiom schemes and construct three elementarily equivalent models.", "labels": [], "entities": [{"text": "FT", "start_pos": 43, "end_pos": 45, "type": "TASK", "confidence": 0.8350034952163696}]}, {"text": "One of the models consists of so-called feature graphs, a data structure common in computational linguistics.", "labels": [], "entities": []}, {"text": "The other two models consist of so-called feature trees, a record-like data structure generalizing the trees corresponding to first-order terms.", "labels": [], "entities": []}, {"text": "Our completeness proof exhibits a terminating simplification system deciding validity and satisfia-bility of possibly quantified feature descriptions.", "labels": [], "entities": [{"text": "validity", "start_pos": 77, "end_pos": 85, "type": "METRIC", "confidence": 0.9754602313041687}]}, {"text": "1 Introduction Feature descriptions provide for the typically partial description of abstract objects by means of functional attributes called features.", "labels": [], "entities": []}, {"text": "They originated in the late seventies with so-called unification grammars [14], a by now popular family of declarative grammar formalisms for the description and processing of natural language.", "labels": [], "entities": []}, {"text": "More recently, the use of feature descriptions in logic programming has been advocated and studied [2, 3, 4, 17, 16].", "labels": [], "entities": []}, {"text": "Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages.", "labels": [], "entities": []}, {"text": "Feature descriptions have been proposed in various forms with various formalizations [1, 13, 9, 15, 5, 10].", "labels": [], "entities": []}, {"text": "We will follow the logical approach pioneered by [15], which accommodates feature descriptions as standard first-order formulae interpreted in first-order structures.", "labels": [], "entities": []}, {"text": "In this approach, a semantics for *We appreciate discussions with Joachim Niehren and Ralf Treinen who read a draft version of this paper.", "labels": [], "entities": []}, {"text": "The research reported in this paper has been supported by the Bundesminister ffir Forschung und Technologie under contracts ITW 90002 0 (DISCO) and ITW 9105 (Hydra).", "labels": [], "entities": [{"text": "ITW 90002 0 (DISCO)", "start_pos": 124, "end_pos": 143, "type": "DATASET", "confidence": 0.85825843612353}, {"text": "ITW 9105 (Hydra)", "start_pos": 148, "end_pos": 164, "type": "DATASET", "confidence": 0.8406107187271118}]}, {"text": "For space limitations proofs are omitted; they can be found in the complete paper [6].", "labels": [], "entities": []}, {"text": "feature descriptions can be given by means of a feature theory (i.e., a set of closed feature descriptions having at least one model).", "labels": [], "entities": []}, {"text": "There are two complementary ways of specifying a feature theory: either by explicitly constructing a standard model and taking all sentences valid in it, or by stating axioms and proving their consistency.", "labels": [], "entities": [{"text": "specifying a feature theory", "start_pos": 36, "end_pos": 63, "type": "TASK", "confidence": 0.6686169356107712}]}, {"text": "Both possibilities are exemplified in [15]: the feature graph algebra ~\" is given as a standard model, and the class of feature algebras is obtained by means of an axiomatization.", "labels": [], "entities": []}, {"text": "Both approaches to fixing a feature theory have their advantages.", "labels": [], "entities": [{"text": "fixing a feature theory", "start_pos": 19, "end_pos": 42, "type": "TASK", "confidence": 0.8630808591842651}]}, {"text": "The construction of a standard model provides fora clear intuition and yields a complete feature theory (i.e., if \u00a2 is a closed feature description , then either \u00a2 or-~\u00a2 is valid).", "labels": [], "entities": []}, {"text": "The presentation of a recursively enumerable axiomatization has the advantage that we inherit from predicate logic a sound and complete deduction system for valid feature descriptions.", "labels": [], "entities": []}, {"text": "The ideal case then is to specify a feature theory by both a standard model and a corresponding re-cursively enumerable axiomatization.", "labels": [], "entities": []}, {"text": "The existence of such a double characterization, however, is by no means obvious since it implies that the feature theory is decidable.", "labels": [], "entities": []}, {"text": "In fact, so far no decidable, consistent and complete feature theory has been known.", "labels": [], "entities": []}, {"text": "In this paper we will establish a complete and de-cidable feature theory FT by means of three axiom schemes.", "labels": [], "entities": [{"text": "FT", "start_pos": 73, "end_pos": 75, "type": "TASK", "confidence": 0.7611485719680786}]}, {"text": "We will also construct three models of FT, two consisting of so-called feature trees, and one consisting of so-called feature graphs.", "labels": [], "entities": [{"text": "FT", "start_pos": 39, "end_pos": 41, "type": "TASK", "confidence": 0.9391013979911804}]}, {"text": "Since FT is complete , all three models are elementarily equivalent (i.e., satisfy exactly the same first-order formulae).", "labels": [], "entities": [{"text": "FT", "start_pos": 6, "end_pos": 8, "type": "TASK", "confidence": 0.48731672763824463}]}, {"text": "While the feature graph model captures intuitions common in linguistically motivated investigations, the feature tree model provides the connection to the tree constraint systems [8, 11, 12] employed in logic programming.", "labels": [], "entities": []}, {"text": "Our proof of FT's completeness will exhibit a simplification algorithm that computes for every feature description an equivalent solved form from which the solutions of the description can be read of easily.", "labels": [], "entities": [{"text": "FT", "start_pos": 13, "end_pos": 15, "type": "TASK", "confidence": 0.48605531454086304}]}, {"text": "For a closed feature description the solved form is either T (which means that the description is valid) or _L (which means that the description is invalid).", "labels": [], "entities": []}], "introductionContent": [{"text": "Feature descriptions provide for the typically partial description of abstract objects by means of functional attributes called features.", "labels": [], "entities": []}, {"text": "They originated in the late seventies with so-called unification grammars, a by now popular family of declarative grammar formalisms for the description and processing of natural language.", "labels": [], "entities": []}, {"text": "More recently, the use of feature descriptions in logic programming has been advocated and studied.", "labels": [], "entities": []}, {"text": "Essentially, feature descriptions provide a logical version of records, a data structure found in many programming languages.", "labels": [], "entities": []}, {"text": "Feature descriptions have been proposed in various forms with various formalizations.", "labels": [], "entities": []}, {"text": "We will follow the logical approach pioneered by, which accommodates feature descriptions as standard first-order formulae interpreted in firstorder structures.", "labels": [], "entities": []}, {"text": "In this approach, a semantics for *We appreciate discussions with Joachim Niehren and Ralf Treinen who read a draft version of this paper.", "labels": [], "entities": []}, {"text": "The research reported in this paper has been supported by the Bundesminister ffir Forschung und Technologie under contracts ITW 90002 0 (DISCO) and ITW 9105 (Hydra).", "labels": [], "entities": [{"text": "ITW 90002 0 (DISCO)", "start_pos": 124, "end_pos": 143, "type": "DATASET", "confidence": 0.85825843612353}, {"text": "ITW 9105 (Hydra)", "start_pos": 148, "end_pos": 164, "type": "DATASET", "confidence": 0.8406107187271118}]}, {"text": "For space limitations proofs are omitted; they can be found in the complete paper.", "labels": [], "entities": []}, {"text": "feature descriptions can be given by means of a feature theory (i.e., a set of closed feature descriptions having at least one model).", "labels": [], "entities": []}, {"text": "There are two complementary ways of specifying a feature theory: either by explicitly constructing a standard model and taking all sentences valid in it, or by stating axioms and proving their consistency.", "labels": [], "entities": [{"text": "specifying a feature theory", "start_pos": 36, "end_pos": 63, "type": "TASK", "confidence": 0.6686169356107712}]}, {"text": "Both possibilities are exemplified in: the feature graph algebra ~\" is given as a standard model, and the class of feature algebras is obtained by means of an axiomatization.", "labels": [], "entities": []}, {"text": "Both approaches to fixing a feature theory have their advantages.", "labels": [], "entities": [{"text": "fixing a feature theory", "start_pos": 19, "end_pos": 42, "type": "TASK", "confidence": 0.8630808591842651}]}, {"text": "The construction of a standard model provides fora clear intuition and yields a complete feature theory (i.e., if \u00a2 is a closed feature description, then either \u00a2 or -~\u00a2 is valid).", "labels": [], "entities": []}, {"text": "The presentation of a recursively enumerable axiomatization has the advantage that we inherit from predicate logic a sound and complete deduction system for valid feature descriptions.", "labels": [], "entities": []}, {"text": "The ideal case then is to specify a feature theory by both a standard model and a corresponding recursively enumerable axiomatization.", "labels": [], "entities": []}, {"text": "The existence of such a double characterization, however, is by no means obvious since it implies that the feature theory is decidable.", "labels": [], "entities": []}, {"text": "In fact, so far no decidable, consistent and complete feature theory has been known.", "labels": [], "entities": []}, {"text": "In this paper we will establish a complete and decidable feature theory FT by means of three axiom schemes.", "labels": [], "entities": [{"text": "FT", "start_pos": 72, "end_pos": 74, "type": "TASK", "confidence": 0.7873644828796387}]}, {"text": "We will also construct three models of FT, two consisting of so-called feature trees, and one consisting of so-called feature graphs.", "labels": [], "entities": [{"text": "FT", "start_pos": 39, "end_pos": 41, "type": "TASK", "confidence": 0.9391013979911804}]}, {"text": "Since FT is complete, all three models are elementarily equivalent (i.e., satisfy exactly the same first-order formulae).", "labels": [], "entities": [{"text": "FT", "start_pos": 6, "end_pos": 8, "type": "TASK", "confidence": 0.4873165190219879}]}, {"text": "While the feature graph model captures intuitions common in linguistically motivated investigations, the feature tree model provides the connection to the tree constraint systems employed in logic programming.", "labels": [], "entities": []}, {"text": "Our proof of FT's completeness will exhibit a simplification algorithm that computes for every feature description an equivalent solved form from which the solutions of the description can be read of easily.", "labels": [], "entities": [{"text": "FT", "start_pos": 13, "end_pos": 15, "type": "TASK", "confidence": 0.48605531454086304}]}, {"text": "For a closed feature description the solved form is either T (which means that the description is valid) or _L (which means that the description is invalid).", "labels": [], "entities": []}, {"text": "For a feature description with free variables the solved form is .L if and only if the description is unsatisfiable.", "labels": [], "entities": [{"text": "L", "start_pos": 66, "end_pos": 67, "type": "METRIC", "confidence": 0.9620600938796997}]}], "datasetContent": [], "tableCaptions": []}