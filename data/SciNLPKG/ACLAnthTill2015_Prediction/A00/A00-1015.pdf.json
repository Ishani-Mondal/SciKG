{"title": [{"text": "J avox: A Toolkit for Building Speech-Enabled Applications", "labels": [], "entities": []}], "abstractContent": [{"text": "JAVOX provides a mechanism for the development of spoken-language systems from existing desktop applications.", "labels": [], "entities": [{"text": "JAVOX", "start_pos": 0, "end_pos": 5, "type": "DATASET", "confidence": 0.9196217060089111}]}, {"text": "We present an architecture that allows existing Java 1 programs to be speech-enabled with no source-code modification, through the use of reflection and automatic modification to the ap-plication's compiled code.", "labels": [], "entities": []}, {"text": "The grammars used in JAvox are based on the Java Speech Grammar Format (JSGF); JAVOX grammars have an additional semantic component based on our JAVOX Script-ing Language (JSL).", "labels": [], "entities": []}, {"text": "JAVOX has been successfully demonstrated on real-world applications.", "labels": [], "entities": [{"text": "JAVOX", "start_pos": 0, "end_pos": 5, "type": "DATASET", "confidence": 0.8736370801925659}]}, {"text": "1 Overview JAVOX is an implemented set of tools that allows software developers to speech-enable existing applications.", "labels": [], "entities": [{"text": "1 Overview JAVOX", "start_pos": 0, "end_pos": 16, "type": "DATASET", "confidence": 0.6260137557983398}]}, {"text": "The process requires no changes to the program's source code: Speech capacity is plugged-in to the existing code by modifying the compiled program as it loads.", "labels": [], "entities": []}, {"text": "JAVOX is intended to provide similar functionality to that usually associated with menus and mouse actions in graphical user interfaces (GUIs).", "labels": [], "entities": [{"text": "JAVOX", "start_pos": 0, "end_pos": 5, "type": "DATASET", "confidence": 0.8852709531784058}]}, {"text": "It is completely programmable-developers can provide a speech interface to whatever func-tionality they desire.", "labels": [], "entities": []}, {"text": "Jivox has been successfully demonstrated with several GUI-based applications.", "labels": [], "entities": [{"text": "Jivox", "start_pos": 0, "end_pos": 5, "type": "DATASET", "confidence": 0.8867021799087524}]}, {"text": "Previous systems to assist in the development of spoken-langnage systems (SLSs) have focused on building stand-alone, customized applications, such as (Sutton et al., 1996) and (Pargellis et al., 1999).", "labels": [], "entities": []}, {"text": "The goal of the JAVOX toolkit is to speech-enable traditional desktop applications-this is similar to the goals of the MELISSA project (Schmidt et al., 1998).", "labels": [], "entities": []}, {"text": "It is intended to both speed the development of SLSs and to localize the speech-specific code within the application.", "labels": [], "entities": [{"text": "SLSs", "start_pos": 48, "end_pos": 52, "type": "TASK", "confidence": 0.9528223276138306}]}, {"text": "JAVOX allows developers to add speech interfaces to applications at the end of the development process; SLSs no longer need to be built from the ground up.", "labels": [], "entities": [{"text": "JAVOX", "start_pos": 0, "end_pos": 5, "type": "DATASET", "confidence": 0.9100263118743896}]}, {"text": "We will briefly present an overview of how JAVOX works, including its major modules.", "labels": [], "entities": []}, {"text": "First, we 1Java and Java Speech are registered trademarks of Sun Microsystems, Inc.", "labels": [], "entities": []}, {"text": "will examine TRANSLATOR, the implemented JAVOX natural language processing (NLP) component; its role is to translate from natural language utterances to the JhVOX Scripting Language (JSL).", "labels": [], "entities": [{"text": "JAVOX natural language processing (NLP)", "start_pos": 41, "end_pos": 80, "type": "TASK", "confidence": 0.6081888164792743}]}, {"text": "Next, we will discuss JSL in conjunction with a discussion of EXECUTER, the interface between JAVOX and the application.", "labels": [], "entities": [{"text": "JSL", "start_pos": 22, "end_pos": 25, "type": "TASK", "confidence": 0.684680700302124}]}, {"text": "We will explain the JhvOX infrastructure and its current implementation in Java.", "labels": [], "entities": [{"text": "JhvOX infrastructure", "start_pos": 20, "end_pos": 40, "type": "DATASET", "confidence": 0.8985334932804108}]}, {"text": "In conclusion, we will discuss the current state of the project and where it is going.", "labels": [], "entities": []}, {"text": "2 Basic Operation Jivox can be used as the sole location of NLP for an application; the application is written as a non-speech-enabled program and JhvOX adds the speech capability.", "labels": [], "entities": []}, {"text": "The current implementation is written in Java and works with Java programs.", "labels": [], "entities": []}, {"text": "The linkage between the application program and JhvOX is created by modifying-at load time-all constructors in the application to register new objects with JAVOX.", "labels": [], "entities": []}, {"text": "For this reason, the application's source code does not need any modification to enable JAVOX.", "labels": [], "entities": [{"text": "JAVOX", "start_pos": 88, "end_pos": 93, "type": "DATASET", "confidence": 0.7994260787963867}]}, {"text": "A thorough discussion of this technique is presented in Section 4.", "labels": [], "entities": []}, {"text": "The schematic in Figure 1 shows a high-level overview of the JAVOX architecture.", "labels": [], "entities": [{"text": "JAVOX architecture", "start_pos": 61, "end_pos": 79, "type": "DATASET", "confidence": 0.8638729453086853}]}, {"text": "Issuing a voice command begins with a user utterance , which the speech recognizer processes and passes to the NLP component, TRANSLATOR.", "labels": [], "entities": []}, {"text": "We are using the IBM implementation of Sun's Java Speech application program interface (API) (Sun Microsystems, Inc., 1998) in conjunction with IBM's VIAVOICE.", "labels": [], "entities": [{"text": "Sun Microsystems, Inc., 1998)", "start_pos": 94, "end_pos": 123, "type": "DATASET", "confidence": 0.7004457329000745}]}, {"text": "The job of TRANSLATOR-or a different module conforming to its API-is to translate the utterance into a form that represents the corresponding program actions.", "labels": [], "entities": []}, {"text": "The current implementation of TRANSLATOR uses a context-free grammar, with each rule carrying an optional JSL fragment.", "labels": [], "entities": []}, {"text": "A typical bottom-up parser processes utterances and a complete JSL program results.", "labels": [], "entities": []}, {"text": "The resulting JSL is forwarded to EXECUTER, where the JSL code is executed.", "labels": [], "entities": []}, {"text": "For example, in a hypothetical banking application, the utterance add $100 to the account might be translated into the JSL command: myBalance = myBalance + i00; 105", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [], "tableCaptions": []}