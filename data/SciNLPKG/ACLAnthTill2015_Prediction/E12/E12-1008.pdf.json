{"title": [], "abstractContent": [{"text": "We introduce anew approach to transition-based dependency parsing in which the parser does not directly construct a dependency structure, but rather an undirected graph, which is then converted into a directed dependency tree in a post-processing step.", "labels": [], "entities": [{"text": "transition-based dependency parsing", "start_pos": 30, "end_pos": 65, "type": "TASK", "confidence": 0.6093461414178213}]}, {"text": "This alleviates error propagation, since undirected parsers do not need to observe the single-head constraint.", "labels": [], "entities": [{"text": "error propagation", "start_pos": 16, "end_pos": 33, "type": "TASK", "confidence": 0.6615344882011414}]}, {"text": "Undirected parsers can be obtained by simplifying existing transition-based parsers satisfying certain conditions.", "labels": [], "entities": []}, {"text": "We apply this approach to obtain undirected variants of the planar and 2-planar parsers and of Cov-ington's non-projective parser.", "labels": [], "entities": []}, {"text": "We perform experiments on several datasets from the CoNLL-X shared task, showing that these variants outperform the original directed algorithms inmost of the cases.", "labels": [], "entities": []}], "introductionContent": [{"text": "Dependency parsing has proven to be very useful for natural language processing tasks.", "labels": [], "entities": [{"text": "Dependency parsing", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.8830900490283966}, {"text": "natural language processing tasks", "start_pos": 52, "end_pos": 85, "type": "TASK", "confidence": 0.6867751330137253}]}, {"text": "Datadriven dependency parsers such as those by,,, or are accurate and efficient, they can be trained from annotated data without the need fora grammar, and they provide a simple representation of syntax that maps to predicateargument structure in a straightforward way.", "labels": [], "entities": [{"text": "Datadriven dependency parsers", "start_pos": 0, "end_pos": 29, "type": "TASK", "confidence": 0.5875867505868276}]}, {"text": "In particular, transition-based dependency parsers area type of dependency parsing algorithms which use a model that scores transitions between parser states.", "labels": [], "entities": [{"text": "transition-based dependency parsers", "start_pos": 15, "end_pos": 50, "type": "TASK", "confidence": 0.6441915929317474}, {"text": "dependency parsing", "start_pos": 64, "end_pos": 82, "type": "TASK", "confidence": 0.7861429452896118}]}, {"text": "Greedy deterministic search can be used to select the transition to betaken at each state, thus achieving linear or quadratic time complexity.", "labels": [], "entities": []}, {"text": "Figure 1: An example dependency structure where transition-based parsers enforcing the single-head constraint will incur in error propagation if they mistakenly build a dependency link 1 \u2192 2 instead of 2 \u2192 1 (dependency links are represented as arrows going from head to dependent).", "labels": [], "entities": []}, {"text": "It has been shown by that such parsers suffer from error propagation: an early erroneous choice can place the parser in an incorrect state that will in turn lead to more errors.", "labels": [], "entities": [{"text": "error propagation", "start_pos": 51, "end_pos": 68, "type": "TASK", "confidence": 0.6568899303674698}]}, {"text": "For instance, suppose that a sentence whose correct analysis is the dependency graph in is analyzed by any bottom-up or leftto-right transition-based parser that outputs dependency trees, therefore obeying the single-head constraint (only one incoming arc is allowed per node).", "labels": [], "entities": []}, {"text": "If the parser chooses an erroneous transition that leads it to build a dependency link from 1 to 2 instead of the correct link from 2 to 1, this will lead it to a state where the single-head constraint makes it illegal to create the link from 3 to 2.", "labels": [], "entities": []}, {"text": "Therefore, a single erroneous choice will cause two attachment errors in the output tree.", "labels": [], "entities": []}, {"text": "With the goal of minimizing these sources of errors, we obtain novel undirected variants of several parsers; namely, of the planar and 2-planar parsers by and the non-projective list-based parser described by, which is based on Covington's algorithm).", "labels": [], "entities": []}, {"text": "These variants work by collapsing the LEFT-ARC and RIGHT-ARC transitions in the original parsers, which create right-to-left and left-to-right dependency links, into a single ARC transition creating an undirected link.", "labels": [], "entities": [{"text": "LEFT-ARC", "start_pos": 38, "end_pos": 46, "type": "METRIC", "confidence": 0.8733965754508972}]}, {"text": "This has the advantage that the single-head constraint need not be observed during the parsing process, since the directed notions of head and dependent are lost in undirected graphs.", "labels": [], "entities": [{"text": "parsing", "start_pos": 87, "end_pos": 94, "type": "TASK", "confidence": 0.9668039679527283}]}, {"text": "This gives the parser more freedom and can prevent situations where enforcing the constraint leads to error propagation, as in.", "labels": [], "entities": [{"text": "error propagation", "start_pos": 102, "end_pos": 119, "type": "TASK", "confidence": 0.6660690903663635}]}, {"text": "On the other hand, these new algorithms have the disadvantage that their output is an undirected graph, which has to be post-processed to recover the direction of the dependency links and generate a valid dependency tree.", "labels": [], "entities": []}, {"text": "Thus, some complexity is moved from the parsing process to this postprocessing step; and each undirected parser will outperform the directed version only if the simplification of the parsing phase is able to avoid more errors than are generated by the post-processing.", "labels": [], "entities": [{"text": "parsing", "start_pos": 40, "end_pos": 47, "type": "TASK", "confidence": 0.9664530158042908}]}, {"text": "As will be seen in latter sections, experimental results indicate that this is in fact the case.", "labels": [], "entities": []}, {"text": "The rest of this paper is organized as follows: Section 2 introduces some notation and concepts that we will use throughout the paper.", "labels": [], "entities": []}, {"text": "In Section 3, we present the undirected versions of the parsers by and, as well as some considerations about the feature models suitable to train them.", "labels": [], "entities": []}, {"text": "In Section 4, we discuss post-processing techniques that can be used to recover dependency trees from undirected graphs.", "labels": [], "entities": []}, {"text": "Section 5 presents an empirical study of the performance obtained by these parsers, and Section 6 contains a final discussion.", "labels": [], "entities": []}], "datasetContent": [{"text": "In this section, we evaluate the performance of the undirected planar, 2-planar and Covington parsers on eight datasets from the CoNLL-X shared task ().", "labels": [], "entities": []}, {"text": "compare the accuracy of the undirected versions with naive and label-based reconstruction to that of the directed versions of the planar, 2-planar and Covington parsers, respectively.", "labels": [], "entities": [{"text": "accuracy", "start_pos": 12, "end_pos": 20, "type": "METRIC", "confidence": 0.999423623085022}]}, {"text": "In addition, we provide a comparison to well-known state-of-the-art projective and nonprojective parsers: the planar parsers are compared to the arc-eager projective parser by, which is also restricted to planar structures; and the 2-planar parsers are compared with the arc-eager parser with pseudo-projective transformation of , capable of handling non-planar dependencies.", "labels": [], "entities": []}, {"text": "We use SVM classifiers from the LIBSVM package) for all the languages except Chinese, Czech and German.", "labels": [], "entities": [{"text": "LIBSVM package", "start_pos": 32, "end_pos": 46, "type": "DATASET", "confidence": 0.9164844453334808}]}, {"text": "In these, we use the LIBLINEAR package) for classification, which reduces training time for these larger datasets; and feature models adapted to this system which, in the case of German, result in higher accuracy than published results using LIBSVM.", "labels": [], "entities": [{"text": "LIBLINEAR", "start_pos": 21, "end_pos": 30, "type": "METRIC", "confidence": 0.9031062722206116}, {"text": "classification", "start_pos": 44, "end_pos": 58, "type": "TASK", "confidence": 0.9692099690437317}, {"text": "accuracy", "start_pos": 204, "end_pos": 212, "type": "METRIC", "confidence": 0.9972257018089294}]}, {"text": "The LIBSVM feature models for the arc-eager projective and pseudo-projective parsers are the same used by these parsers in the CoNLL-X shared task, where the pseudo-projective version of MaltParser was one of the two top performing systems ().", "labels": [], "entities": []}, {"text": "For the 2-planar parser, we took the feature models from for the languages included in that paper.", "labels": [], "entities": []}, {"text": "For all the algorithms and datasets, the feature models used for the undirected parsers were adapted from those of the directed parsers as described in Section 3.1.", "labels": [], "entities": []}, {"text": "The results show that the use of undirected parsing with label-based reconstruction clearly improves the performance in the vast majority of the datasets for the planar and Covington algorithms, wherein many cases it also improves upon the corresponding projective and non-projective state-of-the-art parsers provided for comparison.", "labels": [], "entities": []}, {"text": "In the case of the 2-planar parser the results are less conclusive, with improvements over the directed versions in five out of the eight languages.", "labels": [], "entities": []}, {"text": "The improvements in LAS obtained with labelbased reconstruction over directed parsing are statistically significant at the .05 level 5 for Danish, German and Portuguese in the case of the planar parser; and Czech, Danish and Turkish for Covington's parser.", "labels": [], "entities": [{"text": "LAS", "start_pos": 20, "end_pos": 23, "type": "METRIC", "confidence": 0.9722638726234436}]}, {"text": "No statistically significant decrease inaccuracy was detected in any of the algorithm/dataset combinations.", "labels": [], "entities": []}, {"text": "As expected, the good results obtained by the undirected parsers with label-based reconstruction contrast with those obtained by the variants with root-based reconstruction, which performed worse in all the experiments.", "labels": [], "entities": []}], "tableCaptions": []}