{"title": [{"text": "LiLFeS-Towards a Practical HPSG Parser *", "labels": [], "entities": []}], "abstractContent": [{"text": "This paper presents the LiLFeS system, an efficient feature-structure description language for HPSG.", "labels": [], "entities": [{"text": "HPSG", "start_pos": 95, "end_pos": 99, "type": "DATASET", "confidence": 0.918215274810791}]}, {"text": "The core engine of LiLFeS is an Abstract Machine for Attribute-Value Logics, proposed by Carpenter and Qu.", "labels": [], "entities": []}, {"text": "Basic design policies, the current status, and performance evaluation of the LiLFeS system are described.", "labels": [], "entities": []}, {"text": "The paper discusses two implementations of the LiLFeS.", "labels": [], "entities": []}, {"text": "The first one is based on an emu-lator of the abstract machine, while the second one uses a native-code compiler and therefore is much more efficient than the first one.", "labels": [], "entities": []}], "introductionContent": [], "datasetContent": [{"text": "We evaluated the performance of the LiLFeS system over three aspects: Parsing performance of LiLFeS, comparison to other TFS systems, and comparison to different Prolog systems.", "labels": [], "entities": [{"text": "Parsing", "start_pos": 70, "end_pos": 77, "type": "METRIC", "confidence": 0.8891680836677551}]}, {"text": "shows the performance of HPSG parsers on a real-world corpus.", "labels": [], "entities": []}, {"text": "However, even with the sophisticated algorithm, the parsing speed is 3.5 times slower than intended.", "labels": [], "entities": [{"text": "parsing", "start_pos": 52, "end_pos": 59, "type": "TASK", "confidence": 0.971603274345398}]}, {"text": "To achieve our goal, we need a drastic improvement of a performance.", "labels": [], "entities": []}, {"text": "We therefore performed the following experiments to find out the problem.", "labels": [], "entities": []}, {"text": "shows the performance comparison to other TFS systems, ALE and ProFIT.", "labels": [], "entities": [{"text": "ALE", "start_pos": 55, "end_pos": 58, "type": "DATASET", "confidence": 0.6109386682510376}, {"text": "ProFIT", "start_pos": 63, "end_pos": 69, "type": "DATASET", "confidence": 0.9540873765945435}]}, {"text": "Two grammars are used in the experiments: \"Simple\" is a small HPSG-like grammar written by our group, while \"HPSG\" is the small-lexicon HPSG grammar distributed with the ALE package.", "labels": [], "entities": [{"text": "ALE package", "start_pos": 170, "end_pos": 181, "type": "DATASET", "confidence": 0.8977770805358887}]}, {"text": "In the \"Simple\" experiments, the LiLFeS system is far more efficient than ALE, but is outperformed by ProFIT.", "labels": [], "entities": [{"text": "ProFIT", "start_pos": 102, "end_pos": 108, "type": "DATASET", "confidence": 0.9138215780258179}]}, {"text": "However, in the \"HPSG\" experiment, which has to handle much more complex TFSs than \"Simple\" experiments, LiLFeS is clearly better than ProFIT.", "labels": [], "entities": [{"text": "ProFIT", "start_pos": 135, "end_pos": 141, "type": "DATASET", "confidence": 0.9026311635971069}]}, {"text": "On the contrary, with simple data LiLFeS is relatively inefficient.", "labels": [], "entities": []}, {"text": "Experiments in, which show comparisons to Prolog systems, show that the performance of LiLFeS is significantly worse than that of those Prolog systems.", "labels": [], "entities": []}, {"text": "To summarize, the performance of LiLFeS is far more impressive when it has to handle complex TFSs.", "labels": [], "entities": []}, {"text": "This fact indicates that the TFS engine in LiLFeS is efficient but that the other parts, i.e. the Simple Simple HPSG  We evaluated the performance of the LiLFeS native-code compiler with the same experiments as used in Section 4.2.", "labels": [], "entities": []}, {"text": "The results of the experiments are shown in and.", "labels": [], "entities": []}, {"text": "The results of the native-code compiler are significantly better than those of the emulator-based LiLFeS system.", "labels": [], "entities": []}, {"text": "In particular, comparison to Prolog shows that the LiLFeS nativecode compiler achieves a speedup of 20 to 30 times compared to emulator-based LiLFeS, and parts concerning LiLFeS as a general logic programming system, are not yet efficient enough.", "labels": [], "entities": [{"text": "Prolog", "start_pos": 29, "end_pos": 35, "type": "DATASET", "confidence": 0.9665312767028809}]}, {"text": "This means that, in order to improve the LiLFeS system as a whole, we have to include various optimization techniques already encoded in recent Prolog implementations.", "labels": [], "entities": []}, {"text": "Thus we decided to redesign and optimize the whole system.", "labels": [], "entities": []}, {"text": "The next section describes this optimized LiLFeS.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 3 Performance Comparison to Other TFS Systems", "labels": [], "entities": []}]}