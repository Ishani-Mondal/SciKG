{"title": [{"text": "Constraints over Lambda-Structures in Semantic Underspecification", "labels": [], "entities": []}], "abstractContent": [{"text": "We introduce a first-order language for semantic underspecification that we call Constraint Language for Lambda-Structures (CLLS).", "labels": [], "entities": []}, {"text": "A A-structure can be considered as a A-term up to consistent renaming of bound variables (a-equality); a constraint of CLLS is an underspec-ified description of a A-structure.", "labels": [], "entities": []}, {"text": "CLLS solves a capturing problem omnipresent in underspec-ified scope representations.", "labels": [], "entities": []}, {"text": "CLLS features constraints for dominance, lambda binding, paral-lelism, and anaphoric links.", "labels": [], "entities": []}, {"text": "Based on CLLS we present a simple, integrated, and underspecified treatment of scope, parallelism, and anaphora.", "labels": [], "entities": []}], "introductionContent": [{"text": "A central concern of semantic underspecification) is the underspecification of the scope of variable binding operators such as quantifiers.", "labels": [], "entities": []}, {"text": "This immediately raises the conceptual problem of how to avoid variable-capturing when instantiating underspecified scope representations.", "labels": [], "entities": []}, {"text": "In principle, capturing may occur in all formalisms for structural underspecification which represent binding relations by the coordination of variables).", "labels": [], "entities": []}, {"text": "Consider for instance the verb phrase in (1) Manfred [vF knows every student] An underspecified description of the compositional semantics of the VP in (1) might be given along the lines of (2): (2) X--Cl(Vx(student(x)-+C2(know(Z, x)))) The meta-variable X in (2) denotes some tree representing a predicate logic formula which is underspecified for quantifier scope by means of two place holders C1 and C2 where a subjectquantifier can be filled in, and a placeholder Z for the subject-variable.", "labels": [], "entities": []}, {"text": "The binding of the object-variable x by the object-quantifier Vx is coordinated through the name of the objectvariable, namely 'x'.", "labels": [], "entities": []}, {"text": "Capturing occurs when anew quantifier like 3x is filled in C2 whereby the binding between x and Vx is accidentally undone, and is replaced with a binding of x by 3x.", "labels": [], "entities": [{"text": "Capturing", "start_pos": 0, "end_pos": 9, "type": "TASK", "confidence": 0.891456663608551}]}, {"text": "Capturing problems raised by variable coordination maybe circumvented in simple cases where all quantifiers in underspecified descriptions can be assumed to be named by distinct variables.", "labels": [], "entities": [{"text": "variable coordination", "start_pos": 29, "end_pos": 50, "type": "TASK", "confidence": 0.7424682378768921}]}, {"text": "However, this assumption becomes problematic in the light of parallelism between the interpretations of two clauses.", "labels": [], "entities": []}, {"text": "Consider for instance the correction of  The description of the semantics of the VP in (3) is given in (4): But a full understanding of the combined clauses (1) and (3) requires a grasp of the semantic identity of the two VP interpretations.", "labels": [], "entities": [{"text": "correction", "start_pos": 26, "end_pos": 36, "type": "METRIC", "confidence": 0.947746753692627}]}, {"text": "Now, the VP interpretations (2) and (4) look very much Mike but for the different objectvariable, namely 'y' instead of 'x'.", "labels": [], "entities": []}, {"text": "This illustrates that in cases of parallelism, like in corrections, different variables in parallel quantified structures have to be matched against each other, which requires some form of renaming to be done on them.", "labels": [], "entities": []}, {"text": "While this is unproblematic for fully specified structures, it presents serious problems with underspecified structures like (2) and (4), as there the names of the vari-ables are crucial for insuring the right bindings.", "labels": [], "entities": []}, {"text": "Any attempt to integrate parallelism with scope underspecification thus has to cope with conflicting requirements on the choice of variable names.", "labels": [], "entities": []}, {"text": "Avoiding capturing requires variables to be renamed apart but parallelism needs parallel bound variables to be named alike.", "labels": [], "entities": [{"text": "Avoiding capturing", "start_pos": 0, "end_pos": 18, "type": "TASK", "confidence": 0.8399598002433777}]}, {"text": "We avoid all capturing and renaming problems by introducing the notion of A-structures, which represent binding relations without naming variables.", "labels": [], "entities": []}, {"text": "A A-structure is a standard predicate logic tree structure which can be considered as a A-term or some other logical formula up-to consistent renaming of bound variables (a-equality).", "labels": [], "entities": []}, {"text": "Instead of variable names, a A-structure provides a partial function on tree-nodes for expressing variable binding.", "labels": [], "entities": []}, {"text": "An graphical illustration of the A-structure corresponding to the A-term Ax.like(x,x) is given (5).", "labels": [], "entities": [{"text": "Ax.like", "start_pos": 73, "end_pos": 80, "type": "METRIC", "confidence": 0.7174729704856873}]}], "datasetContent": [], "tableCaptions": []}