{"title": [{"text": "Efficient Generation and Processing of Word Co-occurrence Networks Using corpus2graph", "labels": [], "entities": [{"text": "corpus2graph", "start_pos": 73, "end_pos": 85, "type": "DATASET", "confidence": 0.7518804669380188}]}], "abstractContent": [{"text": "Corpus2graph is an open-source NLP-application-oriented Python package that generates a word co-occurrence network from a large corpus.", "labels": [], "entities": [{"text": "Corpus2graph", "start_pos": 0, "end_pos": 12, "type": "DATASET", "confidence": 0.8705244660377502}]}, {"text": "It not only contains different built-in methods to preprocess words, analyze sentences, extract word pairs and define edge weights, but also supports user-customized functions.", "labels": [], "entities": []}, {"text": "By using paral-lelization techniques, it can generate a large word co-occurrence network of the whole English Wikipedia data within hours.", "labels": [], "entities": [{"text": "English Wikipedia data", "start_pos": 102, "end_pos": 124, "type": "DATASET", "confidence": 0.7859809199968973}]}, {"text": "And thanks to its nodes-edges-weight three-level progressive calculation design, rebuilding networks with different configurations is even faster as it does not need to start allover again.", "labels": [], "entities": []}, {"text": "This tool also works with other graph libraries such as igraph, NetworkX and graph-tool as a front end providing data to boost network generation speed.", "labels": [], "entities": []}], "introductionContent": [{"text": "Word co-occurrence networks are widely used in graph-based natural language processing methods and applications, such as keyword extraction) and word sense discrimination.", "labels": [], "entities": [{"text": "keyword extraction", "start_pos": 121, "end_pos": 139, "type": "TASK", "confidence": 0.7269665449857712}, {"text": "word sense discrimination", "start_pos": 145, "end_pos": 170, "type": "TASK", "confidence": 0.7568694551785787}]}, {"text": "A word co-occurrence network is a graph of word interactions representing the co-occurrence of words in a corpus.", "labels": [], "entities": []}, {"text": "An edge can be created when two words co-occur within a sentence; these words are possibly non-adjacent, with a maximum distance (in number of words, see Section 2.2) defined by a parameter d max.", "labels": [], "entities": []}, {"text": "In an alternate definition, an edge can be created when two words co-occur in a fixed-sized sliding window moving along the entire document or sentences (.", "labels": [], "entities": []}, {"text": "Despite different methods of forming edges, the structure of the network for sentences will be the same for the two above definitions if the maximum distance of the former is equal to the sliding window size of the latter.", "labels": [], "entities": []}, {"text": "Edges can be weighted or not.", "labels": [], "entities": []}, {"text": "An edge's weight indicates the strength of the connection between two words, which is often related to their number of co-occurrences and/or their distance in the text.", "labels": [], "entities": []}, {"text": "Edges can be directed or undirected (.", "labels": [], "entities": []}, {"text": "While there already exist network analysis packages such as NetworkX (, igraph) and graph-tool (Peixoto, 2014), they do not include components to make them applicable to texts directly: users have to provide their own word preprocessor, sentence analyzer, weight function.", "labels": [], "entities": [{"text": "sentence analyzer", "start_pos": 237, "end_pos": 254, "type": "TASK", "confidence": 0.6742895096540451}]}, {"text": "Moreover, for certain graph-based NLP applications, it is not straightforward to find the best network configurations, e.g. the maximum distance between words.", "labels": [], "entities": []}, {"text": "A huge number of experiments with different network configurations is inevitable, typically rebuilding the network from scratch for each new configuration.", "labels": [], "entities": []}, {"text": "It is easy to build a word co-occurrence network from texts by using tools like textexture 1 or GoWvis 2 . But they mainly focus on network visualization and cannot handle large corpora such as the English Wikipedia.", "labels": [], "entities": []}, {"text": "Our contributions: To address these inconveniences of generating a word co-occurrence network from a large corpus for NLP applications, we propose corpus2graph, an open-source 3 NLP-oriented Python package designed to handle Wikipedia-level large corpora.", "labels": [], "entities": []}, {"text": "Corpus2graph supports many language processing configurations, from word preprocessing to sentence analysis, and different ways of defining network edges and edge attributes.", "labels": [], "entities": [{"text": "Corpus2graph", "start_pos": 0, "end_pos": 12, "type": "DATASET", "confidence": 0.8289854526519775}, {"text": "sentence analysis", "start_pos": 90, "end_pos": 107, "type": "TASK", "confidence": 0.7581864893436432}]}, {"text": "By using our node-edge-weight threelevel progressive calculation design, it can quickly build networks for multiple configurations.", "labels": [], "entities": []}, {"text": "1 http://textexture.com 2 https://safetyapp.shinyapps.io/GoWvis/ 3 available at https://github.com/zzcoolj/corpus2graph 7 We are currently using it to experiment with injecting pre-computed word co-occurrence networks into word2vec word embedding computation.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Word pairs for different values of distance \u03b4  in sentence \"8746 2357 2669 4 309 1285 7360\"", "labels": [], "entities": [{"text": "8746 2357 2669 4 309 1285 7360", "start_pos": 70, "end_pos": 100, "type": "DATASET", "confidence": 0.9373288069452558}]}, {"text": " Table 2: Word network generation speed (seconds)", "labels": [], "entities": [{"text": "Word network generation", "start_pos": 10, "end_pos": 33, "type": "TASK", "confidence": 0.6393633186817169}]}, {"text": " Table 3: Transition matrix calculation speed (seconds)", "labels": [], "entities": []}]}