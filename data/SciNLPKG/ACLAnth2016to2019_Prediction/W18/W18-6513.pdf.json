{"title": [{"text": "Content Aware Source Code Change Description Generation", "labels": [], "entities": [{"text": "Content Aware Source Code Change Description", "start_pos": 0, "end_pos": 44, "type": "TASK", "confidence": 0.6088928331931432}]}], "abstractContent": [{"text": "We propose to study the generation of descriptions from source code changes by integrating the messages included on code commits and the intra-code documentation inside the source in the form of docstrings.", "labels": [], "entities": []}, {"text": "Our hypothesis is that although both types of descriptions are not directly aligned in semantic terms-one explaining a change and the other the actual functionality of the code being modified-there could be certain common ground that is useful for the generation.", "labels": [], "entities": []}, {"text": "To this end, we propose an architecture that uses the source code-docstring relationship to guide the description generation.", "labels": [], "entities": [{"text": "description generation", "start_pos": 102, "end_pos": 124, "type": "TASK", "confidence": 0.6966122686862946}]}, {"text": "We discuss the results of the approach comparing against a baseline based on a sequence-to-sequence model, using standard automatic natural language generation metrics as well as with a human study, thus offering a comprehensive view of the feasibility of the approach.", "labels": [], "entities": []}], "introductionContent": [{"text": "Transferring the semantics from source code to natural language and vice-versa is at the core of several machine learning endeavors, as it could enable a direct communication between man and machine, improving the level of interpretability and comprehension between each other and easing their collaboration.", "labels": [], "entities": []}, {"text": "In that sense, source code can be conceived as an actual medium of communication from two perspectives, which have been explored separately in both computational linguistics and software engineering communities.", "labels": [], "entities": []}, {"text": "In the first place, from a developer-program perspective, source code encodes, in a set of human readable instructions, the requirements a developer commands a program to satisfy.", "labels": [], "entities": []}, {"text": "This view has been operationalized as a machine translation problem, trying to learn efficient transitions between the dependencies that words and source code tokens exhibit.", "labels": [], "entities": [{"text": "machine translation", "start_pos": 40, "end_pos": 59, "type": "TASK", "confidence": 0.7755100429058075}]}, {"text": "With this, recent approaches have been able to summarize source code snippets ( or even synthesize natural language instructions into actual commands.", "labels": [], "entities": [{"text": "summarize source code snippets", "start_pos": 47, "end_pos": 77, "type": "TASK", "confidence": 0.8759147375822067}]}, {"text": "In the second place, from a developer-developer perspective, the collaborative nature of software development has transformed source code into a common ground for human interaction.", "labels": [], "entities": []}, {"text": "In that sense, every new code contribution takes into account the previous modifications, allowing developers to communicate indirectly.", "labels": [], "entities": []}, {"text": "One of these applications is the generation of descriptions for source code changes (, which uses the information contained in a code commit -the diff representing the changed code and the message the developer provides at submission time -to train an encoder-decoder architecture.", "labels": [], "entities": []}, {"text": "This problem has the particularity of containing certain elements of summarization, as most salient characteristics of the code change need to be extracted, and translation, as it is required to generate a natural language description from a code change.", "labels": [], "entities": [{"text": "summarization", "start_pos": 69, "end_pos": 82, "type": "TASK", "confidence": 0.979961097240448}, {"text": "translation", "start_pos": 161, "end_pos": 172, "type": "TASK", "confidence": 0.9701405167579651}]}, {"text": "In this work, we consider the generation of descriptions for source changes as a testing task to explore if the perspectives presented above can be integrated into a single learning architecture.", "labels": [], "entities": []}, {"text": "That is, we want to learn to generate descriptions from changes exploiting the information in the source code commits, but incorporating the program functionality expressed through the docstrings contained within the source code.", "labels": [], "entities": []}, {"text": "Our hypothesis is that, while both perspectives point at different semantic directions, there should be a certain degree of dependency, since in order to perform a change on the code the developer first needs to understand its functionality.", "labels": [], "entities": []}, {"text": "Moreover, we consider that integrating these two perspectives could contribute to alleviate the issues that current approaches for generating descriptions from source code change present, such as the hallucination in the generation, where generated descriptions are syntactically correct but that do not keep any semantic relationship with the actual code change, and also the inability of the model to produce descriptions with a relevant amount of detail.", "labels": [], "entities": []}, {"text": "We propose an approach that, given a code change, compresses the information associated to the docstrings within the file being modified and uses it as an additional context when selecting the next word from the output vocabulary.", "labels": [], "entities": []}, {"text": "We also reported an exploratory approach that generates a mask to be used at decoding time that considers the inter-perspective distances based on a bilingual embedding.", "labels": [], "entities": []}, {"text": "In addition to integrating change descriptions and source code documentation, we also explore how to represent the code change itself.", "labels": [], "entities": []}, {"text": "Previous work on description generation has relied on the output from the diff command, which provides a distinction between the portions of the source code that were added and removed.", "labels": [], "entities": [{"text": "description generation", "start_pos": 17, "end_pos": 39, "type": "TASK", "confidence": 0.9070968627929688}]}, {"text": "Such data source has been treated just as a sequence of source code tokens, such as in the case of.", "labels": [], "entities": []}, {"text": "In contrast, we explore an architectural variation where we use two encoders to obtain a more expressive signal from the source code perspective, which can lead to a better natural language generation.", "labels": [], "entities": []}, {"text": "We constructed a dataset by merging both change history and docstring data from several real world open source projects to evaluate our approach.", "labels": [], "entities": []}, {"text": "We reported the results on standard translation-based metrics as well through a user study using a crowd-sourcing, to get a more qualitative estimation of the performance of the model.", "labels": [], "entities": []}, {"text": "Our results show that, on average, incorporating a signal from the content of the source code file has a positive impact on the performance of the model.", "labels": [], "entities": []}, {"text": "We consider these results could open the door to further research that considers the generation of descriptions from software artifacts from a more systemic perspective.", "labels": [], "entities": []}, {"text": "The source code and data for this approach is available at: https: //github.com/epochx/py-commitgen.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Number of commits available on each  dataset subset. Both the Content and Structure  subsets are obtained using the Atomic subset.", "labels": [], "entities": []}, {"text": " Table 2: Best results using our context and structure aware architectures.", "labels": [], "entities": []}]}