{"title": [{"text": "Extracting Relational Facts by an End-to-End Neural Model with Copy Mechanism", "labels": [], "entities": [{"text": "Extracting Relational Facts", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.9195718765258789}]}], "abstractContent": [{"text": "The relational facts in sentences are often complicated.", "labels": [], "entities": []}, {"text": "Different relational triplets may have overlaps in a sentence.", "labels": [], "entities": []}, {"text": "We divided the sentences into three types according to triplet overlap degree, including Normal, EntityPairOverlap and SingleEn-tiyOverlap.", "labels": [], "entities": [{"text": "triplet overlap degree", "start_pos": 55, "end_pos": 77, "type": "METRIC", "confidence": 0.6839253107706705}]}, {"text": "Existing methods mainly focus on Normal class and fail to extract re-lational triplets precisely.", "labels": [], "entities": []}, {"text": "In this paper, we propose an end-to-end model based on sequence-to-sequence learning with copy mechanism, which can jointly extract rela-tional facts from sentences of any of these classes.", "labels": [], "entities": []}, {"text": "We adopt two different strategies in decoding process: employing only one united decoder or applying multiple separated decoders.", "labels": [], "entities": []}, {"text": "We test our models in two public datasets and our model outperform the baseline method significantly.", "labels": [], "entities": []}], "introductionContent": [{"text": "Recently, to build large structural knowledge bases (KB), great efforts have been made on extracting relational facts from natural language texts.", "labels": [], "entities": [{"text": "extracting relational facts from natural language texts", "start_pos": 90, "end_pos": 145, "type": "TASK", "confidence": 0.6839443530355181}]}, {"text": "A relational fact is often represented as a triplet which consists of two entities (an entity pair) and a semantic relation between them, such as < Chicago, country, U nitedStates >.", "labels": [], "entities": []}, {"text": "So far, most previous methods mainly focused on the task of relation extraction or classification which identifies the semantic relations between two pre-assigned entities.", "labels": [], "entities": [{"text": "relation extraction or classification", "start_pos": 60, "end_pos": 97, "type": "TASK", "confidence": 0.7893091440200806}]}, {"text": "Although great progresses have been made, they all assume that the entities are identified beforehand and neglect the extraction of entities.", "labels": [], "entities": []}, {"text": "To extract both of entities and relations, early works(: Examples of Normal, EntityPairOverlap (EPO) and SingleEntityOverlap (SEO) classes.", "labels": [], "entities": []}, {"text": "The overlapped entities are marked in yellow.", "labels": [], "entities": []}, {"text": "S1 belongs to Normal class because none of its triplets have overlapped entities; S2 belongs to EntityPairOverlap class since the entity pair < Sudan, Khartoum > of it's two triplets are overlapped; And S3 belongs to SingleEntityOverlap class because the entity Aarhus of it's two triplets are overlapped and these two triplets have no overlapped entity pair.", "labels": [], "entities": []}, {"text": "manner, where they first conduct entity recognition and then predict relations between extracted entities.", "labels": [], "entities": [{"text": "entity recognition", "start_pos": 33, "end_pos": 51, "type": "TASK", "confidence": 0.7146428376436234}]}, {"text": "However, the pipeline framework ignores the relevance of entity identification and relation prediction ().", "labels": [], "entities": [{"text": "entity identification", "start_pos": 57, "end_pos": 78, "type": "TASK", "confidence": 0.7514686286449432}, {"text": "relation prediction", "start_pos": 83, "end_pos": 102, "type": "TASK", "confidence": 0.7552376687526703}]}, {"text": "Recent works attempted to extract entities and relations jointly.;; designed several elaborate features to construct the bridge between these two subtasks.", "labels": [], "entities": []}, {"text": "Similar to other natural language processing (NLP) tasks, they need complicated feature engineering and heavily rely on pre-existing NLP tools for feature extraction.", "labels": [], "entities": [{"text": "feature extraction", "start_pos": 147, "end_pos": 165, "type": "TASK", "confidence": 0.7173926681280136}]}, {"text": "Recently, with the success of deep learning on many NLP tasks, it is also applied on relational facts extraction.; employed CNN or RNN on relation classification.;; treated relation extraction task as an end-to-end (end2end) tablefilling problem.", "labels": [], "entities": [{"text": "relational facts extraction.", "start_pos": 85, "end_pos": 113, "type": "TASK", "confidence": 0.8176929553349813}, {"text": "relation classification.", "start_pos": 138, "end_pos": 162, "type": "TASK", "confidence": 0.8058018982410431}, {"text": "relation extraction task", "start_pos": 173, "end_pos": 197, "type": "TASK", "confidence": 0.8769065539042155}]}, {"text": "proposed a novel tagging schema and employed a Recurrent Neural Networks (RNN) based sequence labeling model to jointly extract entities and relations.", "labels": [], "entities": []}, {"text": "Nevertheless, the relational facts in sentences are often complicated.", "labels": [], "entities": []}, {"text": "Different relational triplets may have overlaps in a sentence.", "labels": [], "entities": []}, {"text": "Such phenomenon makes aforementioned methods, whatever deep learning based models and traditional feature engineering based joint models, always fail to extract relational triplets precisely.", "labels": [], "entities": []}, {"text": "Generally, according to our observation, we divide the sentences into three types according to triplet overlap degree, including Normal, EntityPairOverlap (EPO) and SingleEntityOverlap (SEO).", "labels": [], "entities": [{"text": "triplet overlap degree", "start_pos": 95, "end_pos": 117, "type": "METRIC", "confidence": 0.7451164126396179}]}, {"text": "As shown in, a sentence belongs to Normal class if none of its triplets have overlapped entities.", "labels": [], "entities": []}, {"text": "A sentence belongs to EntityPairOverlap class if some of its triplets have overlapped entity pair.", "labels": [], "entities": []}, {"text": "And a sentence belongs to SingleEntityOverlap class if some of its triplets have an overlapped entity and these triplets don't have overlapped entity pair.", "labels": [], "entities": []}, {"text": "In our knowledge, most previous methods focused on Normal type and seldom consider other types.", "labels": [], "entities": []}, {"text": "Even the joint models based on neural network (, it only assigns a single tag to a word, which means one word can only participate in at most one triplet.", "labels": [], "entities": []}, {"text": "As a result, the triplet overlap issue is not actually addressed.", "labels": [], "entities": [{"text": "triplet overlap", "start_pos": 17, "end_pos": 32, "type": "TASK", "confidence": 0.8847220242023468}]}, {"text": "To address the aforementioned challenge, we aim to design a model that could extract triplets, including entities and relations, from sentences of Normal, EntityPairOverlap and SingleEntityOverlap classes.", "labels": [], "entities": []}, {"text": "To handle the problem of triplet overlap, one entity must be allowed to freely participate in multiple triplets.", "labels": [], "entities": [{"text": "triplet overlap", "start_pos": 25, "end_pos": 40, "type": "TASK", "confidence": 0.8315685391426086}]}, {"text": "Different from previous neural methods, we propose an end2end model based on sequence-to-sequence (Seq2Seq) learning with copy mechanism, which can jointly extract relational facts from sentences of any of these classes.", "labels": [], "entities": []}, {"text": "Specially, the main component of this model includes two parts: encoder and decoder.", "labels": [], "entities": []}, {"text": "The encoder converts a natural language sentence (the source sentence) into a fixed length semantic vector.", "labels": [], "entities": []}, {"text": "Then, the decoder reads in this vector and generates triplets directly.", "labels": [], "entities": []}, {"text": "To generate a triplet, firstly, the decoder generates the relation.", "labels": [], "entities": []}, {"text": "Secondly, by adopting the copy mechanism, the decoder copies the first entity (head entity) from the source sentence.", "labels": [], "entities": []}, {"text": "Lastly, the decoder copies the second entity (tail entity) from the source sentence.", "labels": [], "entities": []}, {"text": "In this way, multiple triplets can be extracted (In detail, we adopt two different strategies in decoding process: employing only one unified decoder (OneDecoder) to generate all triplets or applying multiple separated decoders (MultiDecoder) and each of them generating one triplet).", "labels": [], "entities": []}, {"text": "In our model, one entity is allowed to be copied several times when it needs to participate in different triplets.", "labels": [], "entities": []}, {"text": "Therefore, our model could handle the triplet overlap issue and deal with both of EntityPairOverlap and SingleEntityOverlap sentence types.", "labels": [], "entities": []}, {"text": "Moreover, since extracting entities and relations in a single end2end neural network, our model could extract entities and relations jointly.", "labels": [], "entities": []}, {"text": "The main contributions of our work are as follows: \u2022 We propose an end2end neural model based on sequence-to-sequence learning with copy mechanism to extract relational facts from sentences, where the entities and relations could be jointly extracted.", "labels": [], "entities": []}, {"text": "\u2022 Our model could consider the relational triplet overlap problem through copy mechanism.", "labels": [], "entities": [{"text": "relational triplet overlap", "start_pos": 31, "end_pos": 57, "type": "TASK", "confidence": 0.7295995155970255}]}, {"text": "In our knowledge, the relational triplet overlap problem has never been addressed before.", "labels": [], "entities": [{"text": "relational triplet overlap", "start_pos": 22, "end_pos": 48, "type": "TASK", "confidence": 0.8039471308390299}]}, {"text": "\u2022 We conduct experiments on two public datasets.", "labels": [], "entities": []}, {"text": "Experimental results show that we outperforms the state-of-the-arts with 39.8% and 31.1% improvements respectively.: The overall structure of OneDecoder model.", "labels": [], "entities": []}, {"text": "A bi-directional RNN is used to encode the source sentence and then a decoder is used to generate triples directly.", "labels": [], "entities": []}, {"text": "The relation is predicted and the entity is copied from source sentence.", "labels": [], "entities": []}], "datasetContent": [{"text": "To evaluate the performance of our methods, we conduct experiments on two widely used datasets.", "labels": [], "entities": []}, {"text": "The first is New York Times (NYT) dataset, which is produced by distant supervision method (.", "labels": [], "entities": [{"text": "New York Times (NYT) dataset", "start_pos": 13, "end_pos": 41, "type": "DATASET", "confidence": 0.8421796560287476}]}, {"text": "This dataset consists of 1.18M sentences sampled from 294k 1987-2007 New York Times news articles.", "labels": [], "entities": []}, {"text": "There are 24 valid relations in total.", "labels": [], "entities": []}, {"text": "In this paper, we treat this dataset as supervised data as the same as.", "labels": [], "entities": []}, {"text": "We filter the sentences with more than 100 words and the sentences containing no positive triplets, and 66195 sentences are left.", "labels": [], "entities": []}, {"text": "We randomly select 5000 sentences from it as the test set, 5000 sentences as the validation set and the rest 56195 sentences are used as train set.", "labels": [], "entities": []}, {"text": "The second is WebNLG dataset (.", "labels": [], "entities": [{"text": "WebNLG dataset", "start_pos": 14, "end_pos": 28, "type": "DATASET", "confidence": 0.9828804135322571}]}, {"text": "It is originally created for Natural Language Generation (NLG) task.", "labels": [], "entities": [{"text": "Natural Language Generation (NLG) task", "start_pos": 29, "end_pos": 67, "type": "TASK", "confidence": 0.8060504794120789}]}, {"text": "This dataset contains 246 valid relations.", "labels": [], "entities": []}, {"text": "In this dataset, a instance including a group of triplets and several standard sentences (written by human).", "labels": [], "entities": []}, {"text": "Every standard sentence contains all triplets of this instance.", "labels": [], "entities": []}, {"text": "We only use the first standard sentence in our experiments and we filter out the instances if all entities of triplets are not found in this standard sentence.", "labels": [], "entities": []}, {"text": "The origin WebNLG dataset contains train set and development set.", "labels": [], "entities": [{"text": "WebNLG dataset", "start_pos": 11, "end_pos": 25, "type": "DATASET", "confidence": 0.9579818844795227}]}, {"text": "In our experiments, we treat the origin development set as test set and randomly split the origin train set into validation set and train set.", "labels": [], "entities": []}, {"text": "After filtering and splitting, the train set contains 5019 instances, the test set contains 703 instances and the validation set contains 500 instances.", "labels": [], "entities": []}, {"text": "The number of sentences of every class in NYT and WebNLG dataset are shown in.", "labels": [], "entities": [{"text": "NYT", "start_pos": 42, "end_pos": 45, "type": "DATASET", "confidence": 0.9593436121940613}, {"text": "WebNLG dataset", "start_pos": 50, "end_pos": 64, "type": "DATASET", "confidence": 0.9533202052116394}]}, {"text": "It's worthy noting that a sentence can belongs to both EntityPairOverlap class and SingleEntityOverlap class.", "labels": [], "entities": []}, {"text": "We compare our models with NovelTagging model (, which conduct the best performance on relational facts extraction.", "labels": [], "entities": [{"text": "relational facts extraction", "start_pos": 87, "end_pos": 114, "type": "TASK", "confidence": 0.7599973678588867}]}, {"text": "We directly run the code released by to acquire the results.", "labels": [], "entities": []}, {"text": "Following, we use the standard micro Precision, Recall and F1 score to evaluate the results.", "labels": [], "entities": [{"text": "micro", "start_pos": 31, "end_pos": 36, "type": "METRIC", "confidence": 0.866230309009552}, {"text": "Precision", "start_pos": 37, "end_pos": 46, "type": "METRIC", "confidence": 0.6083100438117981}, {"text": "Recall", "start_pos": 48, "end_pos": 54, "type": "METRIC", "confidence": 0.9875895977020264}, {"text": "F1", "start_pos": 59, "end_pos": 61, "type": "METRIC", "confidence": 0.9986417889595032}]}, {"text": "Triplets are regarded as correct when it's relation and entities are both correct.", "labels": [], "entities": []}, {"text": "When copying the entity, we only copy the last word of it.", "labels": [], "entities": []}, {"text": "A triplet is regarded as NA-triplet when and only when it's relation is NA-relation and it has an NA-entity pair.", "labels": [], "entities": []}, {"text": "The predicted NA-triplets will be excluded.", "labels": [], "entities": []}, {"text": "As we can see, in NYT dataset, our MultiDecoder model achieves the best F1 score, which is 0.587.", "labels": [], "entities": [{"text": "NYT dataset", "start_pos": 18, "end_pos": 29, "type": "DATASET", "confidence": 0.960282951593399}, {"text": "F1 score", "start_pos": 72, "end_pos": 80, "type": "METRIC", "confidence": 0.9890358746051788}]}, {"text": "There is 39.8% improvement compared with the NovelTagging model, which is 0.420.", "labels": [], "entities": []}, {"text": "Besides, our OneDecoder model also outperforms the NovelTagging model.", "labels": [], "entities": []}, {"text": "In the WebNLG dataset, MultiDecoder model achieves the highest F1 score (0.371).", "labels": [], "entities": [{"text": "WebNLG dataset", "start_pos": 7, "end_pos": 21, "type": "DATASET", "confidence": 0.9848549365997314}, {"text": "F1 score", "start_pos": 63, "end_pos": 71, "type": "METRIC", "confidence": 0.9909210801124573}]}, {"text": "MultiDecoder and OneDecoder models outperform the NovelTagging model with 31.1% and 7.8% improvements, respectively.", "labels": [], "entities": []}, {"text": "These observations verify the effectiveness of our models.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: The number of sentences of Normal, En- tityPairOverlap (EPO) and SingleEntityOverlap  (SEO) classes. It's worthy noting that a sentence  can belongs to both EPO class and SEO class.", "labels": [], "entities": []}, {"text": " Table 2: Results of different models in NYT dataset and WebNLG dataset.", "labels": [], "entities": [{"text": "NYT dataset", "start_pos": 41, "end_pos": 52, "type": "DATASET", "confidence": 0.9738029539585114}, {"text": "WebNLG dataset", "start_pos": 57, "end_pos": 71, "type": "DATASET", "confidence": 0.9846822619438171}]}, {"text": " Table 3: F1 values of entity generation.", "labels": [], "entities": [{"text": "F1", "start_pos": 10, "end_pos": 12, "type": "METRIC", "confidence": 0.997936487197876}, {"text": "entity generation", "start_pos": 23, "end_pos": 40, "type": "TASK", "confidence": 0.7245709300041199}]}, {"text": " Table 4: F1 values of relation generation.", "labels": [], "entities": [{"text": "F1", "start_pos": 10, "end_pos": 12, "type": "METRIC", "confidence": 0.9982500672340393}, {"text": "relation generation", "start_pos": 23, "end_pos": 42, "type": "TASK", "confidence": 0.818030834197998}]}]}