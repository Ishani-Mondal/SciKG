{"title": [], "abstractContent": [{"text": "Integrating surface realization and the generation of referring expressions (REs) into a single algorithm can improve the quality of the generated sentences.", "labels": [], "entities": []}, {"text": "Existing algorithms for doing this, such as SPUD and CRISP, are search-based and can be slow or incomplete.", "labels": [], "entities": []}, {"text": "We offer a chart-based algorithm for integrated sentence generation which supports efficient search through chart pruning.", "labels": [], "entities": [{"text": "integrated sentence generation", "start_pos": 37, "end_pos": 67, "type": "TASK", "confidence": 0.6332255403200785}]}], "introductionContent": [{"text": "It has long been argued () that the strict distinction between surface realization and sentence planning in the classical NLG pipeline) can cause difficulties for an NLG system.", "labels": [], "entities": []}, {"text": "Generation decisions that look good to the sentence planner maybe hard or impossible for the realizer to express in natural language.", "labels": [], "entities": []}, {"text": "Furthermore, a standalone sentence planner must compute each RE separately, thus missing out on opportunities for succinct REs that are ambiguous in isolation but correct in context.", "labels": [], "entities": []}, {"text": "Algorithms such as SPUD () and CRISP () perform surface realization and parts of sentence planning, including RE generation, in an integrated fashion.", "labels": [], "entities": [{"text": "RE generation", "start_pos": 110, "end_pos": 123, "type": "TASK", "confidence": 0.9454269707202911}]}, {"text": "Such integrated algorithms for sentence generation can balance the needs of the realizer and the sentence planner and take advantage of opportunities for succinct realizations.", "labels": [], "entities": [{"text": "sentence generation", "start_pos": 31, "end_pos": 50, "type": "TASK", "confidence": 0.7426045835018158}]}, {"text": "However, integrated sentence planning multiplies the complexities of two hard combinatorial problems, and thus existing, search-based algorithms can be inefficient or fail to find a good solution; SPUD's greedy search strategy may even find no solution at all, even when one exists.", "labels": [], "entities": [{"text": "sentence planning", "start_pos": 20, "end_pos": 37, "type": "TASK", "confidence": 0.7172074317932129}]}, {"text": "By contrast, chart-based algorithms have been shown in parsing to remain efficient and accurate even for large inputs because they support structure sharing and very effective pruning techniques.", "labels": [], "entities": [{"text": "parsing", "start_pos": 55, "end_pos": 62, "type": "TASK", "confidence": 0.9828694462776184}]}, {"text": "Chart algorithms have been successfully applied to surface realization, but in RE generation, most algorithms are not chartbased, see e.g. (. One exception is the chart-based RE generation of.", "labels": [], "entities": [{"text": "surface realization", "start_pos": 51, "end_pos": 70, "type": "TASK", "confidence": 0.7535072267055511}, {"text": "RE generation", "start_pos": 79, "end_pos": 92, "type": "TASK", "confidence": 0.965249627828598}, {"text": "RE generation", "start_pos": 175, "end_pos": 188, "type": "TASK", "confidence": 0.7654462158679962}]}, {"text": "In this paper, we present a chart-based algorithm for integrated surface realization and RE generation.", "labels": [], "entities": [{"text": "integrated surface realization", "start_pos": 54, "end_pos": 84, "type": "TASK", "confidence": 0.6256087124347687}, {"text": "RE generation", "start_pos": 89, "end_pos": 102, "type": "TASK", "confidence": 0.9683255851268768}]}, {"text": "This makes it possible -to our knowledge, for the first time -to apply chart-based pruning techniques to integrated sentence generation.", "labels": [], "entities": [{"text": "integrated sentence generation", "start_pos": 105, "end_pos": 135, "type": "TASK", "confidence": 0.5963056882222494}]}, {"text": "Our algorithm extends the chart-based RE generation algorithm of by keeping track of the semantic content that has been expressed by each chart item.", "labels": [], "entities": [{"text": "RE generation", "start_pos": 38, "end_pos": 51, "type": "TASK", "confidence": 0.8837137222290039}]}, {"text": "Because it is modular on the string side, the same algorithm can be used to generate with context-free grammars or TAGs, with or without feature structures, at no expense in runtime efficiency.", "labels": [], "entities": []}, {"text": "An open-source implementation of our algorithm, based on the Alto system (), can be found at bitbucket.org/tclup/alto.", "labels": [], "entities": [{"text": "Alto system", "start_pos": 61, "end_pos": 72, "type": "DATASET", "confidence": 0.9348044097423553}]}], "datasetContent": [], "tableCaptions": []}