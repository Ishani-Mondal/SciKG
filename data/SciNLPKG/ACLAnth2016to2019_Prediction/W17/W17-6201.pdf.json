{"title": [{"text": "A Feature Structure Algebra for FTAG", "labels": [], "entities": [{"text": "FTAG", "start_pos": 32, "end_pos": 36, "type": "DATASET", "confidence": 0.7490044832229614}]}], "abstractContent": [{"text": "FTAG, the extension of TAG with feature structures, lags behind other feature-based grammar formalisms in the availability of efficient chart parsers.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.864926278591156}]}, {"text": "This is in part because of the complex interaction of adjunction and unification, which makes such parsers inconvenient to implement.", "labels": [], "entities": []}, {"text": "We present a novel, simple algebra for feature structures and show how FTAG can be encoded as an Interpreted Regular Tree Grammar using this algebra.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 71, "end_pos": 75, "type": "DATASET", "confidence": 0.7459264397621155}]}, {"text": "This yields a straightforward, efficient chart parsing algorithm for FTAG.", "labels": [], "entities": [{"text": "chart parsing", "start_pos": 41, "end_pos": 54, "type": "TASK", "confidence": 0.7008770406246185}, {"text": "FTAG", "start_pos": 69, "end_pos": 73, "type": "DATASET", "confidence": 0.6891991496086121}]}], "introductionContent": [{"text": "Like many other grammar formalisms, treeadjoining grammars (TAG) have been extended with feature structures to model linguistic phenomena such as agreement conveniently.", "labels": [], "entities": []}, {"text": "The FTAG formalism of equips each node in each elementary tree with a \"top\" and \"bottom\" feature structure.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 4, "end_pos": 8, "type": "DATASET", "confidence": 0.7208220958709717}]}, {"text": "These are unified with each other at the end of the derivation if no auxiliary tree is adjoined at this node; otherwise they are unified with feature structures from the root and foot node of such an auxiliary tree.", "labels": [], "entities": []}, {"text": "FTAG has been used successfully in largescale grammar engineering, such as in the XTAG grammar.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 0, "end_pos": 4, "type": "DATASET", "confidence": 0.8389797806739807}, {"text": "largescale grammar engineering", "start_pos": 35, "end_pos": 65, "type": "TASK", "confidence": 0.7435621420542399}, {"text": "XTAG grammar", "start_pos": 82, "end_pos": 94, "type": "DATASET", "confidence": 0.891682505607605}]}, {"text": "One aspect in which FTAG has lagged behind other feature grammar formalisms, such as HPSG and LFG, is in parsing.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 20, "end_pos": 24, "type": "DATASET", "confidence": 0.5394554138183594}, {"text": "HPSG", "start_pos": 85, "end_pos": 89, "type": "DATASET", "confidence": 0.9054591059684753}]}, {"text": "Recent efficient parsers for TAG, such as MICA ( and Alto (, do not support feature structures.", "labels": [], "entities": [{"text": "TAG", "start_pos": 29, "end_pos": 32, "type": "TASK", "confidence": 0.9164020419120789}, {"text": "MICA", "start_pos": 42, "end_pos": 46, "type": "DATASET", "confidence": 0.8332814574241638}]}, {"text": "The recent TuLiPA parser ( does support feature structures in FTAG parsing, but can be inefficient in practice because it enumerates all TAG derivation trees and then checks each of them for feature structure violations individually, instead of checking features on the parse chart directly.", "labels": [], "entities": [{"text": "TuLiPA parser", "start_pos": 11, "end_pos": 24, "type": "TASK", "confidence": 0.6763682067394257}, {"text": "FTAG parsing", "start_pos": 62, "end_pos": 74, "type": "TASK", "confidence": 0.7709833979606628}]}, {"text": "On the theoretical side, explain FTAG through a feature-based formalism for describing languages of derivation trees, with unclear implications for parsing efficiency.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 33, "end_pos": 37, "type": "DATASET", "confidence": 0.5578558444976807}]}, {"text": "Overall, the sense is that because of the complex interaction of unification and adjunction in FTAG, implementing efficient FTAG parsers is uncomfortable and something that tends to get avoided.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 95, "end_pos": 99, "type": "DATASET", "confidence": 0.8720546960830688}]}, {"text": "In this paper, we offer a simple and modular approach to efficient parsing with FTAG.", "labels": [], "entities": [{"text": "parsing", "start_pos": 67, "end_pos": 74, "type": "TASK", "confidence": 0.9501626491546631}, {"text": "FTAG", "start_pos": 80, "end_pos": 84, "type": "DATASET", "confidence": 0.8477018475532532}]}, {"text": "We encode an FTAG grammar into an Interpreted Regular Tree Grammar (IRTG,) by extending the TAG-to-IRTG encoding of with an additional interpretation into feature structures.", "labels": [], "entities": []}, {"text": "This interpretation maps each derivation tree into a term over a novel algebra of feature structures, in a similar way as c-structures are mapped into fstructures in LFG.", "labels": [], "entities": []}, {"text": "This term can be evaluated to a value in the algebra if and only if all unifications required by the grammar succeed.", "labels": [], "entities": []}, {"text": "We then show how known algorithms for IRTG chart parsing -which can be efficient for TAG () -extend naturally to FTAG parsing.", "labels": [], "entities": [{"text": "IRTG chart parsing", "start_pos": 38, "end_pos": 56, "type": "TASK", "confidence": 0.7381620009740194}, {"text": "FTAG parsing", "start_pos": 113, "end_pos": 125, "type": "TASK", "confidence": 0.8085955679416656}]}, {"text": "We offer a view on FTAG which brings it more inline with other feature-based grammar formalisms, in that the distinction between top and bottom feature structures is represented correctly, but requires no special treatment by the parser.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 19, "end_pos": 23, "type": "DATASET", "confidence": 0.5915680527687073}]}, {"text": "This simplifies, for instance, the use of existing unification algorithms.", "labels": [], "entities": []}, {"text": "At the same time, we offer a very general and modular approach to checking feature unification on a parse chart; no unpacking of the individual derivation trees is required in our algorithm.", "labels": [], "entities": [{"text": "checking feature unification", "start_pos": 66, "end_pos": 94, "type": "TASK", "confidence": 0.6737486322720846}]}, {"text": "This approach generalizes straightfor- Figure 1: Two example feature structures.", "labels": [], "entities": []}, {"text": "wardly to other mechanisms for filtering derivation trees, as long as they can be expressed in terms of finite-state constraints on trees.", "labels": [], "entities": []}, {"text": "We will review FTAG in Section 2 and IRTGs and the TAG-to-IRTG encoding in Section 3.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 15, "end_pos": 19, "type": "DATASET", "confidence": 0.6368207335472107}, {"text": "IRTGs", "start_pos": 37, "end_pos": 42, "type": "METRIC", "confidence": 0.6878805160522461}, {"text": "TAG-to-IRTG", "start_pos": 51, "end_pos": 62, "type": "METRIC", "confidence": 0.8872504830360413}]}, {"text": "We will then define the feature structure algebra and show how it can be used to encode FTAG in Section 4.", "labels": [], "entities": [{"text": "FTAG", "start_pos": 88, "end_pos": 92, "type": "DATASET", "confidence": 0.6521139740943909}]}, {"text": "We show how to do efficient and modular chart parsing for FTAG in Section 5.", "labels": [], "entities": [{"text": "chart parsing", "start_pos": 40, "end_pos": 53, "type": "TASK", "confidence": 0.7341872453689575}, {"text": "FTAG", "start_pos": 58, "end_pos": 62, "type": "DATASET", "confidence": 0.8328478932380676}]}], "datasetContent": [], "tableCaptions": []}