{"title": [{"text": "Transforming Dependency Structures to LTAG Derivation Trees", "labels": [], "entities": [{"text": "LTAG Derivation", "start_pos": 38, "end_pos": 53, "type": "TASK", "confidence": 0.6571339964866638}]}], "abstractContent": [{"text": "We propose anew algorithm for parsing Lexicalized Tree Adjoining Grammars (LTAGs) which uses pre-assigned bilexi-cal dependency relations as a filter.", "labels": [], "entities": [{"text": "parsing Lexicalized Tree Adjoining Grammars (LTAGs)", "start_pos": 30, "end_pos": 81, "type": "TASK", "confidence": 0.8737566098570824}]}, {"text": "That is, given a sentence and its corresponding well-formed dependency structure, the parser assigns elementary trees to words of the sentence and return attachment sites compatible with these elementary trees and predefined dependencies.", "labels": [], "entities": []}, {"text": "Moreover, we prove that this algorithm has a linear-time complexity in the input length.", "labels": [], "entities": []}, {"text": "This algorithm returns all compatible derivation trees as a packed forest.", "labels": [], "entities": []}, {"text": "This result is of practical interest to the development of efficient weighted LTAG parsers based on derivation tree decoding.", "labels": [], "entities": []}], "introductionContent": [{"text": "Lexicalized Tree Adjoining Grammars (LTAGs), that is TAGs where each elementary tree contains exactly one lexical anchor, have been proposed as an attractive formalism to model the phrasestructure construction in natural languages).", "labels": [], "entities": [{"text": "Lexicalized Tree Adjoining Grammars (LTAGs)", "start_pos": 0, "end_pos": 43, "type": "TASK", "confidence": 0.7462194732257298}, {"text": "phrasestructure construction", "start_pos": 181, "end_pos": 209, "type": "TASK", "confidence": 0.7635663449764252}]}, {"text": "An important property of lexicalized grammars is their ability to directly encode semantic information in combination operations.", "labels": [], "entities": []}, {"text": "Borrowing the example provided by, in the sentence \"She deliberately walks the dog\", the tree anchored with \"dog\" is combined to the tree anchored with \"walks\", see.", "labels": [], "entities": []}, {"text": "Thus, the object associated with a transitive realization \"walks\" can be restricted to a subset of allowed words, including \"dog\" but not \"river\".", "labels": [], "entities": []}, {"text": "Unfortunately, parsing with a LTAG is hardly tractable.", "labels": [], "entities": [{"text": "parsing", "start_pos": 15, "end_pos": 22, "type": "TASK", "confidence": 0.9705166220664978}]}, {"text": "proposed the We use a simplified grammar to ease the presentation.", "labels": [], "entities": []}, {"text": "best-known parsing strategy with a O(n 7 ) worst case time complexity and O(n 5 ) space complexity where n is the length of the input sentence.", "labels": [], "entities": [{"text": "O(n 7 ) worst case time complexity", "start_pos": 35, "end_pos": 69, "type": "METRIC", "confidence": 0.7144128349092271}, {"text": "O(n 5 ) space complexity", "start_pos": 74, "end_pos": 98, "type": "METRIC", "confidence": 0.8289627347673688}]}, {"text": "This is a major drawback for downstream applications where speed and low memory use is important.", "labels": [], "entities": []}, {"text": "Moreover, by reducing boolean matrix multiplication to TAG parsing, argued that obtaining a lower complexity bound for the latter problem is unlikely to be straightforward.", "labels": [], "entities": [{"text": "TAG parsing", "start_pos": 55, "end_pos": 66, "type": "TASK", "confidence": 0.8011502623558044}]}, {"text": "Hence, parsing with weighted TAGs has received too little attention even though Chiang (2000) experimentally demonstrated their usefulness in the Penn Treebank parsing task.", "labels": [], "entities": [{"text": "parsing", "start_pos": 7, "end_pos": 14, "type": "TASK", "confidence": 0.9869759678840637}, {"text": "Penn Treebank", "start_pos": 146, "end_pos": 159, "type": "DATASET", "confidence": 0.97907355427742}, {"text": "parsing task", "start_pos": 160, "end_pos": 172, "type": "TASK", "confidence": 0.50361667573452}]}, {"text": "In order to bypass this major bottleneck, two main strategies have been explored.", "labels": [], "entities": []}, {"text": "On the one hand, splittable grammars () are interesting because they have a lower asymptotic complexity than LTAGs.", "labels": [], "entities": [{"text": "splittable grammars", "start_pos": 17, "end_pos": 36, "type": "TASK", "confidence": 0.9063700139522552}]}, {"text": "However, they cannot directly encode several properties that make TAGs linguistically plausible, such as cross-serial dependencies.", "labels": [], "entities": []}, {"text": "In fact, they are restricted to context-free languages.", "labels": [], "entities": []}, {"text": "On the other hand, a popular approach to speedup LTAG parsing is to include a preliminary step called supertagging: only a subset of tree fragments per word are retained as candidates, or exactly one in the most aggressive form ().", "labels": [], "entities": [{"text": "LTAG parsing", "start_pos": 49, "end_pos": 61, "type": "TASK", "confidence": 0.8796273767948151}]}, {"text": "However, this pruning does not improve the asymptotic complexity of the parser.", "labels": [], "entities": []}, {"text": "Moreover, it is usually performed via local methods that can hardly take into account long distance relationships since lexical dependencies are unknown at this step.", "labels": [], "entities": []}, {"text": "For instance, in the sentence \"She deliberately walks, despite her hatred for quadruped mammals, the dog\", capturing the transitive nature of the first verb is difficult without further analysis.: Phrase-structure of the sentence \"She deliberately walks the dog\", its construction thanks to a LTAG and the associated derivation tree.", "labels": [], "entities": []}, {"text": "Dashed arrows in the left figure represent combination operations.", "labels": [], "entities": []}, {"text": "Note that the derivation tree is a a labelled dependency structure.", "labels": [], "entities": []}, {"text": "In this work, we explore a component fora new alternative in fast and efficient LTAG parsing.", "labels": [], "entities": [{"text": "LTAG parsing", "start_pos": 80, "end_pos": 92, "type": "TASK", "confidence": 0.73002490401268}]}, {"text": "Dependency structures can be interpreted as sets of derivation trees which share lexical composition operations.", "labels": [], "entities": []}, {"text": "This property has already been investigated in order to propose efficient phrase-structure parsers under several formalisms (Section 2).", "labels": [], "entities": []}, {"text": "The derivation tree induced by an LTAG analysis, as shown in, is a dependency structure exposing bilexical dependencies and labelled with elementary trees and operation sites (Section 3).", "labels": [], "entities": []}, {"text": "As such, LTAG parsing can be seen as dependency parsing where both valid tree structures and valid labellings are constrained.", "labels": [], "entities": [{"text": "LTAG parsing", "start_pos": 9, "end_pos": 21, "type": "TASK", "confidence": 0.7743150889873505}, {"text": "dependency parsing", "start_pos": 37, "end_pos": 55, "type": "TASK", "confidence": 0.734783947467804}]}, {"text": "Following the pipeline used inmost labeled dependency parsers: 1.", "labels": [], "entities": []}, {"text": "a parser starts by assigning a single head to each lexical item, without taking into account the grammar; 2.", "labels": [], "entities": []}, {"text": "then, a parse labeler assigns elementary trees and operation sites.", "labels": [], "entities": []}, {"text": "Regarding the first step, seminal work of showed that, ignoring labels, the derivation tree is an arborescence 3 that can be characterized thanks to two structural properties: 2-bounded block degree and wellnestedness.", "labels": [], "entities": []}, {"text": "introduced an algorithm with a O(n 7 ) time complexity for decoding this type of structures.", "labels": [], "entities": [{"text": "O(n 7 ) time complexity", "start_pos": 31, "end_pos": 54, "type": "METRIC", "confidence": 0.673750673021589}]}, {"text": "Still, this is a dependency parsing problem hardly tractable for sentences longer than 15 \u223c 20 words.", "labels": [], "entities": [{"text": "dependency parsing", "start_pos": 17, "end_pos": 35, "type": "TASK", "confidence": 0.7859444916248322}]}, {"text": "More recently, proposed an experimentally fast alternative based on combinatorial optimization and the maximum spanning arborescence problem.", "labels": [], "entities": [{"text": "combinatorial optimization", "start_pos": 68, "end_pos": 94, "type": "TASK", "confidence": 0.7205286920070648}]}, {"text": "Either way, this means that it is now possible to obtain dependency trees that are compatible with LTAG parsing.", "labels": [], "entities": [{"text": "LTAG parsing", "start_pos": 99, "end_pos": 111, "type": "TASK", "confidence": 0.669009268283844}]}, {"text": "Still, we are left with the second step: the parse labeler.", "labels": [], "entities": [{"text": "parse labeler", "start_pos": 45, "end_pos": 58, "type": "TASK", "confidence": 0.7435453534126282}]}, {"text": "Our contribution is a novel algorithm for this second step that can infer elementary trees and operation sites (Sections 4 and 5) as a postprocessing step to build all compatible derivation trees, from which derived trees are completely specified.", "labels": [], "entities": []}, {"text": "The time complexity in the length of the sentence is linear (Section 6).", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}