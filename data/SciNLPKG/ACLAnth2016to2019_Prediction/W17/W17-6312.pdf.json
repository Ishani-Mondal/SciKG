{"title": [{"text": "Exploiting Structure in Parsing to 1-Endpoint-Crossing Graphs", "labels": [], "entities": []}], "abstractContent": [{"text": "Deep dependency parsing can be cast as the search for maximum acyclic subgraphs in weighted digraphs.", "labels": [], "entities": [{"text": "Deep dependency parsing", "start_pos": 0, "end_pos": 23, "type": "TASK", "confidence": 0.6605999767780304}]}, {"text": "Because this search problem is intractable in the general case, we consider its restriction to the class of 1-endpoint-crossing (1ec) graphs, which has high coverage on standard data sets.", "labels": [], "entities": []}, {"text": "Our main contribution is a characterization of 1ec graphs as a subclass of the graphs with pagenumber at most 3.", "labels": [], "entities": []}, {"text": "Building on this we show how to extend an existing parsing algorithm for 1-endpoint-crossing trees to the full class.", "labels": [], "entities": []}, {"text": "While the runtime complexity of the extended algorithm is polynomial in the length of the input sentence, it features a large constant, which poses a challenge for practical implementations.", "labels": [], "entities": []}], "introductionContent": [{"text": "Motivated by applications in natural language understanding, recent work in dependency parsing has targeted 'deep' graphs, a term used to refer to representations that are not necessarily tree-shaped.", "labels": [], "entities": [{"text": "natural language understanding", "start_pos": 29, "end_pos": 59, "type": "TASK", "confidence": 0.6594920953114828}, {"text": "dependency parsing", "start_pos": 76, "end_pos": 94, "type": "TASK", "confidence": 0.8246176540851593}]}, {"text": "Such graphs support intuitive analyses of argument sharing in control constructions, quantification, and semantic modification, among others.", "labels": [], "entities": [{"text": "semantic modification", "start_pos": 105, "end_pos": 126, "type": "TASK", "confidence": 0.7412460744380951}]}, {"text": "Data sets of deep dependency graphs are often derived from the derivations of expressive grammar formalisms; for an overview, see . Deep dependency parsing has been formalized as the search for maximum acyclic subgraphs in weighted digraphs.", "labels": [], "entities": [{"text": "Deep dependency parsing", "start_pos": 132, "end_pos": 155, "type": "TASK", "confidence": 0.6379742721716563}]}, {"text": "Because this problem is known to be intractable in the general case, it is interesting to identify structural restrictions on the target graphs that can yield polynomial-time parsing algorithms without sacrificing too much of the empirical coverage. and propose to address deep dependency parsing under the restriction that the target structures should be noncrossing, a constraint related to projectivity as known from syntactic parsing.", "labels": [], "entities": [{"text": "deep dependency parsing", "start_pos": 273, "end_pos": 296, "type": "TASK", "confidence": 0.6134961843490601}, {"text": "syntactic parsing", "start_pos": 420, "end_pos": 437, "type": "TASK", "confidence": 0.7456018030643463}]}, {"text": "When the search space is restricted to the class of noncrossing graphs, maximum subgraph parsing is possible in time O(n 3 ), where n is the length of the input sentence.", "labels": [], "entities": [{"text": "subgraph parsing", "start_pos": 80, "end_pos": 96, "type": "TASK", "confidence": 0.7519285976886749}]}, {"text": "Unfortunately, the restriction to noncrossing graphs excludes a large proportion of the linguistic data.", "labels": [], "entities": []}, {"text": "It seems clear that deep dependency parsing, much more than syntactic parsing, needs algorithms that can handle graphs with crossing arcs.", "labels": [], "entities": [{"text": "deep dependency parsing", "start_pos": 20, "end_pos": 43, "type": "TASK", "confidence": 0.6471944451332092}, {"text": "syntactic parsing", "start_pos": 60, "end_pos": 77, "type": "TASK", "confidence": 0.8118497431278229}]}, {"text": "An interesting weaker restriction than the noncrossing condition is the restriction to graphs which are 1-endpoint-crossing ( ), a constraint originally formulated for tree-shaped graphs.", "labels": [], "entities": []}, {"text": "The maximum 1-endpoint-crossing subtree of a weighted digraph can be found in time O(n 4 ).", "labels": [], "entities": []}, {"text": "In this paper we show how to generalize this result to non-trees.", "labels": [], "entities": []}, {"text": "This is not straightforward, as the obvious modification of existing algorithm for trees turns out to be incomplete for general graphs.", "labels": [], "entities": []}, {"text": "The key to a complete algorithm, and our main technical contribution, is a characterization of 1-endpointcrossing graphs as a certain subset of the class of graphs with pagenumber at most 3 (Section 3).", "labels": [], "entities": []}, {"text": "The exact characterization refers to the restricted patterns in which arcs can cross each other.", "labels": [], "entities": []}, {"text": "From this characterization we obtain an O(n 5 ) algorithm for general graphs (Section 4).", "labels": [], "entities": []}, {"text": "When a certain, rare type of crossing configurations is ruled out, the runtime complexity of the algorithm reduces to O(n 4 ), the same as for trees.", "labels": [], "entities": [{"text": "O", "start_pos": 118, "end_pos": 119, "type": "METRIC", "confidence": 0.9918294548988342}]}, {"text": "While the runtime of both new algorithms is polynomial in the length of the input sentence, both feature large constants, which leads us to discuss challenges in extending our algorithm into a practical parser for deep dependency parsing (Section 5).", "labels": [], "entities": [{"text": "deep dependency parsing", "start_pos": 214, "end_pos": 237, "type": "TASK", "confidence": 0.6219343940416971}]}, {"text": "Note that each word is meant to represent one endpoint.", "labels": [], "entities": []}, {"text": "(We leave some space between different arcs that share a common endpoint.)", "labels": [], "entities": []}, {"text": "To save some space we draw arcs as semi-ellipses rather than semi-circles.", "labels": [], "entities": []}, {"text": "The graph has pagenumber 3 and is 1ec.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Coverage in terms of complete graphs  (G) and individual arcs (A) for noncrossing graphs,  graphs with pagenumber at most 2, and 1ec graphs.", "labels": [], "entities": []}]}