{"title": [{"text": "Udapi: Universal API for Universal Dependencies", "labels": [], "entities": []}], "abstractContent": [{"text": "Udapi is an open-source framework providing an application programming interface (API) for processing Universal Dependencies data.", "labels": [], "entities": [{"text": "Udapi", "start_pos": 0, "end_pos": 5, "type": "DATASET", "confidence": 0.8394163250923157}]}, {"text": "Udapi is available in Python, Perl and Java.", "labels": [], "entities": []}, {"text": "It is suitable both for full-fledged applications and fast prototyping: visualization of dependency trees, format conversions, querying, editing and transformations, validity tests, dependency parsing, evaluation etc.", "labels": [], "entities": [{"text": "format conversions", "start_pos": 107, "end_pos": 125, "type": "TASK", "confidence": 0.7051981091499329}, {"text": "dependency parsing", "start_pos": 182, "end_pos": 200, "type": "TASK", "confidence": 0.8593581914901733}]}], "introductionContent": [{"text": "Universal Dependencies (UD) 1 is a project that seeks to develop cross-linguistically consistent treebank annotation, by both providing annotation guidelines and releasing freely available treebanks.", "labels": [], "entities": []}, {"text": "Two years after the first release, UD version 2 (UDv2) of the guidelines was published, accompanied by the UDv2.0 release of the data: 70 treebanks for 50 languages, with 12M words in total, contributed by 145 treebank developers.", "labels": [], "entities": []}, {"text": "The steady growth of the UD popularity results in an increased need for tools compatible with UD and its native data format CoNLL-U.", "labels": [], "entities": [{"text": "CoNLL-U", "start_pos": 124, "end_pos": 131, "type": "DATASET", "confidence": 0.9148800373077393}]}, {"text": "Such tools are needed by both the treebank developers and users of the treebanks.", "labels": [], "entities": []}, {"text": "Thanks to the simplicity of CoNLL-U, simple tasks can be performed with ad-hoc scripts or even standard Unix tools (sed, cut, grep etc.).", "labels": [], "entities": []}, {"text": "However, there are several disadvantages of these ad-hoc solutions: \u2022 They tend to be suboptimal regarding speed and memory, thus discouraging more frequent large-scale experiments.", "labels": [], "entities": [{"text": "speed", "start_pos": 107, "end_pos": 112, "type": "METRIC", "confidence": 0.9911181330680847}, {"text": "memory", "start_pos": 117, "end_pos": 123, "type": "METRIC", "confidence": 0.9658185243606567}]}, {"text": "\u2022 The code is less readable because the main logic is mixed with boilerplate.", "labels": [], "entities": []}, {"text": "1 http://universaldependencies.org 2 http://hdl.handle.net/11234/  \u2022 It is easy to forget handling edge cases.", "labels": [], "entities": []}, {"text": "3 \u2022 Ad-hoc solutions are difficult to maintain once they outgrow the original simple task.", "labels": [], "entities": []}, {"text": "We present Udapi -a framework providing an API for processing UD, which should solve the above-mentioned problems.", "labels": [], "entities": []}, {"text": "Udapi implementation is available in Python, Perl and Java.", "labels": [], "entities": []}, {"text": "In this paper, we focus on the Python implementation because it currently has the best support and largest user community.", "labels": [], "entities": []}, {"text": "The Perl and Java implementations are kept harmonized with the Python implementation as much as the differences between these programming languages allow.", "labels": [], "entities": []}, {"text": "The API is object-oriented and covers both processing units ( \u00a73.1) and data representation ( \u00a73.2).", "labels": [], "entities": []}, {"text": "The development of Udapi is hosted at GitHub.", "labels": [], "entities": []}, {"text": "Anyone is welcome to contribute.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Memory and speed comparison. We  measured performance of individual implementa- tions on loading and saving from/to CoNLL-U,  and on a benchmark composed of iterating over  all nodes, reading and writing node attributes,  changing the dependency structure, adding and  removing nodes, and changing word order. We  used cs-ud-train-l.conllu from UDv1.2  (68 MiB, 41k sentences, 800k words).", "labels": [], "entities": [{"text": "UDv1.2", "start_pos": 355, "end_pos": 361, "type": "DATASET", "confidence": 0.8989389538764954}]}]}