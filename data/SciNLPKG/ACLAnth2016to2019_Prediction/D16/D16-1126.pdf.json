{"title": [], "abstractContent": [{"text": "We describe Hafez, a program that generates any number of distinct poems on a user-supplied topic.", "labels": [], "entities": []}, {"text": "Poems obey rhythmic and rhyme constraints.", "labels": [], "entities": []}, {"text": "We describe the poetry-generation algorithm, give experimental data concerning its parameters, and show its generality with respect to language and poetic form.", "labels": [], "entities": []}], "introductionContent": [{"text": "Automatic algorithms are starting to generate interesting, creative text, as evidenced by recent distinguishability tests that ask whether a given story, poem, or song was written by a human or a computer.", "labels": [], "entities": []}, {"text": "In this paper, we describe Hafez, a program that generates any number of distinct poems on a user-supplied topic.", "labels": [], "entities": []}, {"text": "shows an overview of the system, which sets out these tasks: \u2022 Vocabulary.", "labels": [], "entities": []}, {"text": "We select a specific, large vocabulary of words for use in our generator, and we compute stress patterns for each word.", "labels": [], "entities": []}, {"text": "Given a user-supplied topic, we compute a large set of related words.", "labels": [], "entities": []}, {"text": "From the set of related words, we select pairs of rhyming words to end lines.", "labels": [], "entities": []}, {"text": "\u2022 Finite-state acceptor (FSA).", "labels": [], "entities": [{"text": "Finite-state acceptor (FSA)", "start_pos": 2, "end_pos": 29, "type": "METRIC", "confidence": 0.6964327275753022}]}, {"text": "We build an FSA with a path for every conceivable sequence of vocabulary words that obeys formal rhythm constraints, with chosen rhyme words in place.", "labels": [], "entities": [{"text": "FSA", "start_pos": 12, "end_pos": 15, "type": "TASK", "confidence": 0.5757603049278259}]}, {"text": "We select a fluent path through the FSA, using a recurrent neural network (RNN) for scoring.", "labels": [], "entities": [{"text": "FSA", "start_pos": 36, "end_pos": 39, "type": "TASK", "confidence": 0.6025360822677612}]}, {"text": "For example, in the 2016 Dartmouth test bit.ly/20WGLF3, no automatic sonnet-writing system passed indistinguishability, though ours was selected as the best of the submitted systems.", "labels": [], "entities": [{"text": "Dartmouth test bit.ly/20WGLF3", "start_pos": 25, "end_pos": 54, "type": "DATASET", "confidence": 0.9284228324890137}]}, {"text": "Sections 3-7 describe how we address these tasks.", "labels": [], "entities": []}, {"text": "After this, we show results of Hafez generating 14-line classical sonnets with rhyme scheme ABAB CDCD EFEF GG, written in iambic pentameter (ten syllables per line with alternating stress: \"da-DUM da-DUM da-DUM . .", "labels": [], "entities": [{"text": "ABAB CDCD EFEF GG", "start_pos": 92, "end_pos": 109, "type": "DATASET", "confidence": 0.7351270914077759}]}, {"text": "We then show experiments on Hafez's parameters and conclude by showing the generality of the approach with respect to language and poetic form.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 4: Users prefer poems created with the encoder-decoder", "labels": [], "entities": []}]}