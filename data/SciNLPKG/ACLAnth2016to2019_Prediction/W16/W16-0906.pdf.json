{"title": [], "abstractContent": [{"text": "We introduce anew method for incremen-tal shift-reduce parsing of discontinuous constituency trees, based on the fact that discon-tinuous trees can be transformed into continuous trees by changing the order of the terminal nodes.", "labels": [], "entities": []}, {"text": "It allows fora clean formulation of different oracles, leads to faster parsers and provides better results.", "labels": [], "entities": []}, {"text": "Our best system achieves an F 1 of 80.02 on TIGER.", "labels": [], "entities": [{"text": "F 1", "start_pos": 28, "end_pos": 31, "type": "METRIC", "confidence": 0.9817692041397095}, {"text": "TIGER", "start_pos": 44, "end_pos": 49, "type": "METRIC", "confidence": 0.6822614073753357}]}], "introductionContent": [{"text": "Certain structures in natural language can be described as discontinuous, in the sense that they consist of two or more parts which are not adjacent.", "labels": [], "entities": []}, {"text": "In linguistics, such structures are typically considered the result of some kind of movement of an element out of a \"base\" position.", "labels": [], "entities": []}, {"text": "Discontinuous structures occur across many other languages.", "labels": [], "entities": []}, {"text": "Sentence (1) is a German example, taken from the NeGra treebank.", "labels": [], "entities": [{"text": "NeGra treebank", "start_pos": 49, "end_pos": 63, "type": "DATASET", "confidence": 0.9874750971794128}]}, {"text": "(1) Dar\u00fcber Thereof muss must nachgedacht thought-about werden be 'We have to think about that' In this sentence, the adverb Dar\u00fcber, modifier of the participle nachgedacht, is moved to the front.", "labels": [], "entities": []}, {"text": "Treebank annotation generally accounts for such structures: Either, the base position of an element is marked with a trace node which is coindexed with the moved element, as it is done, e.g., in the Penn Treebank; or, all parts of a discontinuous constituent are grouped under a single node, as it is done in the German TIGER and NeGra treebanks.", "labels": [], "entities": [{"text": "Penn Treebank", "start_pos": 199, "end_pos": 212, "type": "DATASET", "confidence": 0.9959213435649872}, {"text": "NeGra treebanks", "start_pos": 330, "end_pos": 345, "type": "DATASET", "confidence": 0.8618274033069611}]}, {"text": "This can be seen in, which shows the treebank annotation of (1).", "labels": [], "entities": []}, {"text": "The connection between Dar\u00fcber and its reference participle nachgedacht is made by grouping both words under a single VP node.", "labels": [], "entities": [{"text": "Dar\u00fcber", "start_pos": 23, "end_pos": 30, "type": "DATASET", "confidence": 0.651343584060669}]}, {"text": "Parsing discontinuous constituents is a challenge, since approaches that produce context-free derivations cannot be used.", "labels": [], "entities": [{"text": "Parsing discontinuous constituents", "start_pos": 0, "end_pos": 34, "type": "TASK", "confidence": 0.8969756563504537}]}, {"text": "For treebanks in which discontinuities are represented by traces, various approaches have been presented, mostly based on the extension of a CFG parser with a pre-, post-or in-processing step.", "labels": [], "entities": []}, {"text": "See, e.g.,,,,.", "labels": [], "entities": []}, {"text": "For the direct parsing of discontinuous constituents, grammarbased techniques have been used, mostly on the basis of Linear Context-Free Rewriting System (LCFRS).", "labels": [], "entities": []}, {"text": "LCFRS is an extension of Context-Free Grammar in which a single non-terminal can spank \u2265 1 continuous parts of the input string; i.e., CFG is a special case of LCFRS in which k = 1.", "labels": [], "entities": [{"text": "CFG", "start_pos": 135, "end_pos": 138, "type": "DATASET", "confidence": 0.8668525218963623}]}, {"text": "See, e.g.,,,, or.", "labels": [], "entities": []}, {"text": "Even with advanced approaches such as the latter, the high parsing complexity with such approaches is a major bottleneck which tends to lead to low parsing speeds.", "labels": [], "entities": [{"text": "parsing", "start_pos": 59, "end_pos": 66, "type": "TASK", "confidence": 0.959458589553833}]}, {"text": "Another approach consists of creating a reversible conversion of discontinuous constituents to dependencies, and to parse those with an appropriate dependency parser.", "labels": [], "entities": []}, {"text": "This very successful approach is taken by and.", "labels": [], "entities": []}, {"text": "Recently, and have exploited a strategy known from non-projective dependency parsing: One can convert every non-projective dependency tree into a projective one by reordering its words.", "labels": [], "entities": [{"text": "non-projective dependency parsing", "start_pos": 51, "end_pos": 84, "type": "TASK", "confidence": 0.7292760213216146}]}, {"text": "Non-projective dependency parsing can therefore be cast as projective dependency parsing with an additional online reordering operation which allows for the input to be processed out-of-order (\"swap\").", "labels": [], "entities": [{"text": "projective dependency parsing", "start_pos": 59, "end_pos": 88, "type": "TASK", "confidence": 0.7299471696217855}]}, {"text": "The same holds for the parsing of discontinuous constituency trees.", "labels": [], "entities": [{"text": "parsing of discontinuous constituency trees", "start_pos": 23, "end_pos": 66, "type": "TASK", "confidence": 0.8247602105140686}]}, {"text": "While Versley (2014) adapts the \"easy-first\" strategy of to work with a swap operation, extends the shift-reduce approach of correspondingly.", "labels": [], "entities": []}, {"text": "Note that the idea of processing linear precedence and immediate dominance for discontinuous parsing separately has also been explored in a grammar-based context by.", "labels": [], "entities": []}, {"text": "In this paper, we build on the work of Maier (2015) and make two contributions.", "labels": [], "entities": []}, {"text": "Firstly, we introduce anew parser transition SKIPSHIFT-i which in comparison to the swap operation reduces the amount of decisions required to betaken in order to produce a discontinuous constituent and therefore leads to fewer errors.", "labels": [], "entities": []}, {"text": "Secondly, we address the problem that when processing the input terminals outof-order, the same tree can be mapped to different parser transition sequences.", "labels": [], "entities": []}, {"text": "We introduce an algorithm which reorders the terminals of a tree off-line such that the resulting tree is continuous.", "labels": [], "entities": []}, {"text": "The reordered terminals are used as a basis for obtaining an oracle that maps the tree to a canonical transition sequence.", "labels": [], "entities": []}, {"text": "All new techniques are implemented within uparse, the publicly available parser of.", "labels": [], "entities": []}, {"text": "An experimental evaluation shows that 1 https://github.com/wmaier/uparse.", "labels": [], "entities": []}, {"text": "choosing the appropriate terminal order is crucial to parsing success: We obtain state-of-the-art results for discontinuous shift-reduce constituency parsing, namely 80.02 on the TIGER data set of.", "labels": [], "entities": [{"text": "parsing", "start_pos": 54, "end_pos": 61, "type": "TASK", "confidence": 0.9887865781784058}, {"text": "discontinuous shift-reduce constituency parsing", "start_pos": 110, "end_pos": 157, "type": "TASK", "confidence": 0.5158504918217659}, {"text": "TIGER data set", "start_pos": 179, "end_pos": 193, "type": "DATASET", "confidence": 0.9086335301399231}]}, {"text": "The remainder of the article is organized as follows.", "labels": [], "entities": []}, {"text": "2, we present the basic architecture for shift-reduce parsing with discontinuous constituents of Maier (2015), on which we build our work.", "labels": [], "entities": [{"text": "shift-reduce parsing", "start_pos": 41, "end_pos": 61, "type": "TASK", "confidence": 0.590572327375412}]}, {"text": "4, we present our experiments and discuss the results, and Sec.", "labels": [], "entities": []}], "datasetContent": [{"text": "We implement the tree transformations with the corresponding oracles, as well as the SKIPSHIFT-i operation within uparse, the publicly available implementation of the parser of Maier (2015).", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 1: Results (all constituents)", "labels": [], "entities": []}, {"text": " Table 2: Results (discontinuous constituents)", "labels": [], "entities": []}, {"text": " Table 3: Results for sentence length \u2264 40 on H&N data", "labels": [], "entities": [{"text": "H&N data", "start_pos": 46, "end_pos": 54, "type": "DATASET", "confidence": 0.7199253290891647}]}]}