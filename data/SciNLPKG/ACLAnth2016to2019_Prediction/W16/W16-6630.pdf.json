{"title": [{"text": "SimpleNLG-IT: adapting SimpleNLG to Italian", "labels": [], "entities": [{"text": "SimpleNLG-IT", "start_pos": 0, "end_pos": 12, "type": "DATASET", "confidence": 0.8352811336517334}, {"text": "SimpleNLG", "start_pos": 23, "end_pos": 32, "type": "DATASET", "confidence": 0.8653709888458252}]}], "abstractContent": [{"text": "This paper describes the SimpleNLG-IT re-aliser, i.e. the main features of the porting of the SimpleNLG API system (Gatt and Reiter, 2009) to Italian.", "labels": [], "entities": []}, {"text": "The paper gives some details about the grammar and the lexicon employed by the system and reports some results about a first evaluation based on a dependency tree-bank for Italian.", "labels": [], "entities": []}, {"text": "A comparison is developed with the previous projects developed for this task for English and French, which is based on the morpho-syntactical differences and similarities between Italian and these languages.", "labels": [], "entities": []}], "introductionContent": [{"text": "Natural Language Generation (NLG) involves a number of elementary tasks that can be addressed by using different approaches and architectures.", "labels": [], "entities": [{"text": "Natural Language Generation (NLG)", "start_pos": 0, "end_pos": 33, "type": "TASK", "confidence": 0.7651960949103037}]}, {"text": "A well defined standard architecture is the pipeline proposed by.", "labels": [], "entities": []}, {"text": "In this approach, three steps transform raw data into natural language text, that are: document planning, sentence-planning and surface realization.", "labels": [], "entities": [{"text": "document planning", "start_pos": 87, "end_pos": 104, "type": "TASK", "confidence": 0.6650095582008362}, {"text": "surface realization", "start_pos": 128, "end_pos": 147, "type": "TASK", "confidence": 0.7810849547386169}]}, {"text": "Each one of these modules triggers the next one addressing a distinct issue as follows.", "labels": [], "entities": []}, {"text": "In document planning the user decides the information content of the text to be generated (what to say).", "labels": [], "entities": []}, {"text": "In sentenceplanning, the focus is instead on the design of a number of features that are related to the information contents as well as to the specific language, as the choice of the words.", "labels": [], "entities": []}, {"text": "Finally, in surface realisation, sentences are generated according to the decisions taken in the previous stages and by fulfilling the morpho-syntactic constraints related to the language specific features, like word order, inflection and selection of functional words.", "labels": [], "entities": [{"text": "surface realisation", "start_pos": 12, "end_pos": 31, "type": "TASK", "confidence": 0.7277737259864807}]}, {"text": "Surface realisers can be classified on the basis of their input.", "labels": [], "entities": [{"text": "Surface realisers", "start_pos": 0, "end_pos": 17, "type": "TASK", "confidence": 0.674492284655571}]}, {"text": "Fully fledged realisers accept as input an unordered and uninflected proto-syntactic structure enriched with semantic and pragmatic features that are used to produce the most plausible output string.", "labels": [], "entities": []}, {"text": "OpenCCG is a member of this category of realisers).", "labels": [], "entities": [{"text": "OpenCCG", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.9573737978935242}]}, {"text": "Indeed, OpenCCG accepts as input a semantic graph representing a set of hybrid logic formulas.", "labels": [], "entities": []}, {"text": "The hybrid logic elements are indeed the semantic specification of syntactic CCG structures defined in the grammar realiser.", "labels": [], "entities": []}, {"text": "The semantic graph under-specifies morpho-syntactic information and delegates to the realiser many lexical and syntactic choices (e.g. function words).", "labels": [], "entities": []}, {"text": "Chart based algorithms and statistical models are used to resolve the ambiguity arising from under-specification.", "labels": [], "entities": []}, {"text": "In contrast, realisation engines are simpler systems which perform just linearisation and morphological inflections of the proto-syntactic input.", "labels": [], "entities": []}, {"text": "As a consequence, realization engine presumes a more detailed morpho-syntactic information as input.", "labels": [], "entities": []}, {"text": "A member of this category is SimpleNLG (.", "labels": [], "entities": [{"text": "SimpleNLG", "start_pos": 29, "end_pos": 38, "type": "DATASET", "confidence": 0.8371551036834717}]}, {"text": "It assumes a complete syntactic specification, but unordered and uninflected, of the sentence in the form of a mixed constituency/dependency structure.", "labels": [], "entities": []}, {"text": "Content and function words are chosen in input as well as modifiers order.", "labels": [], "entities": []}, {"text": "The greatest advantage of this system is its simplicity, which allows to pay more efforts in the previous stages of the NLG pipeline.", "labels": [], "entities": []}, {"text": "SimpleNLG was originally designed for English but it has been successively adapted to German,French, Brazilian-Portuguese and Telugu.", "labels": [], "entities": [{"text": "SimpleNLG", "start_pos": 0, "end_pos": 9, "type": "DATASET", "confidence": 0.8673354387283325}]}, {"text": "The first contribution of this paper is the adaptation of SimpleNLG for Italian . The most challenging issues under this respect of this project (see Sections 2 and 3) are: (1) the Italian verb conjugation system, that cannot be easily mapped to the English system and shows many idiosyncrasies; (2) the high complexity of the Italian morphological inflections; (3) the lack of a publicly available computational lexicon suitable for generation.", "labels": [], "entities": []}, {"text": "Nevertheless, the contribution of this paper goes beyond the adaptation of the existing implementation to a novel language.", "labels": [], "entities": []}, {"text": "We applied indeed a treebank-based methodology (see the monolingual and multilingual resources cited below) for both evaluating our results (see sec.", "labels": [], "entities": []}, {"text": "4), and describing in a comparative perspective the features of the implemented grammar, referring to the differences between Italian, French and English.", "labels": [], "entities": []}, {"text": "This makes the work more linguistically sound and datadriven.", "labels": [], "entities": []}, {"text": "We started our work from SimpleNLGEnFr1.1, that is an adaptation to French) of the model developed for English in.", "labels": [], "entities": []}, {"text": "A property of our project is multilingualism: by using the same architecture of SimpleNLG-EnFr1.1 we are able to multilingual documents with sentences in English, French and Italian.", "labels": [], "entities": []}, {"text": "In porting SimpleNLG-EnFr1.1 to SimpleNLG-IT, we created 10 new packages and modified 28 existing classes.", "labels": [], "entities": [{"text": "porting SimpleNLG-EnFr1.1", "start_pos": 3, "end_pos": 28, "type": "TASK", "confidence": 0.6891626864671707}]}, {"text": "The morphology and morphonology processors needed to be written from scratch because of the features that differentiate Italian with respect to French and English.", "labels": [], "entities": []}, {"text": "The Syntax processor needed to be adapted, especially for the management of noun and verb phrases and for clauses.", "labels": [], "entities": [{"text": "management of noun and verb phrases", "start_pos": 62, "end_pos": 97, "type": "TASK", "confidence": 0.7455954551696777}]}, {"text": "However, at this stage, we used the same orthography processor of French.", "labels": [], "entities": []}, {"text": "We needed to extend the system with 33 new lexical features, necessary for accounting verb irregularities (subjunctive, conditional, remote past, etc.) and for processing the superlative irregular form of the adjectives.", "labels": [], "entities": []}, {"text": "In the next Sections we survey the main features of SimpleNLG-IT, in particular: in Section 2 we describe the grammar defined by the system, that has been developed starting from the SimpleNLGEnFr1.1.", "labels": [], "entities": []}, {"text": "grammar; in Section 3 we describe the lexicon adopted, that has been built starting from three lexical resources available for Italian; Section 4 describes the evaluation of the system, which is based on examples from both grammar books) and an Italian treebank (; finally, Section 5 closes the paper with some final considerations and pointing to future works.", "labels": [], "entities": []}], "datasetContent": [{"text": "NLG systems can be evaluated by using controlled as well as real world examples: the former examples can be exploited in evaluating specific features of the system, while the latter ones for testing the usability of the system in an application context.", "labels": [], "entities": []}, {"text": "In order to provide a first but accurate evaluation of SimpleNLG-IT, we decided to apply both strategies.", "labels": [], "entities": [{"text": "SimpleNLG-IT", "start_pos": 55, "end_pos": 67, "type": "DATASET", "confidence": 0.7817301750183105}]}, {"text": "First, we test the system in the generation of a number of sentences obtained from SimpleNLG-ENFr1.1.", "labels": [], "entities": [{"text": "SimpleNLG-ENFr1.1", "start_pos": 83, "end_pos": 100, "type": "DATASET", "confidence": 0.917197048664093}]}, {"text": "Second, we considered 20 sentences from the Italian section of the Universal Dependency Treebank (.", "labels": [], "entities": [{"text": "Italian section of the Universal Dependency Treebank", "start_pos": 44, "end_pos": 96, "type": "DATASET", "confidence": 0.7962348716599601}]}, {"text": "We first tested SimpleNLG-IT by running a set of Junit Tests on 96 sentences extracted and adapted from the reference grammar book and from SimpleNLG-EnFr1.1 JUnit Tests.", "labels": [], "entities": [{"text": "SimpleNLG-EnFr1.1 JUnit Tests", "start_pos": 140, "end_pos": 169, "type": "DATASET", "confidence": 0.700074185927709}]}, {"text": "The tests cover different sections of the Italian grammar: adjectives order, different types of sentences (relative, interrogative, coordinated, passive), verbs conjugation, clitics, etc. are analyzed.", "labels": [], "entities": []}, {"text": "For this test, the loading into the memory of the lexicon took 1, 433 ms and the test bundle run finished in 3, 145 ms on a computer equipped with 8GB and i7 processor: all the test are passed by SimpleNLG-IT.", "labels": [], "entities": [{"text": "SimpleNLG-IT", "start_pos": 196, "end_pos": 208, "type": "DATASET", "confidence": 0.9102300405502319}]}, {"text": "In the second evaluation, we wanted to test if SimpleNLG-IT is able to realize sentences from real world.", "labels": [], "entities": []}, {"text": "The Universal Dependency Treebank (UD) is a recent project that aims to \"create cross-linguistically consistent treebank annotation for many languages within a dependency-based lexicalist framework\" (.", "labels": [], "entities": []}, {"text": "UD released freely available treebanks for 33 languages (in this work, version 1.2).", "labels": [], "entities": [{"text": "UD", "start_pos": 0, "end_pos": 2, "type": "DATASET", "confidence": 0.9282942414283752}]}, {"text": "Each UD treebank is split in three sections, train, dev and test, which can be exploited in the evaluation of NLP/NLG systems.", "labels": [], "entities": [{"text": "UD treebank", "start_pos": 5, "end_pos": 16, "type": "DATASET", "confidence": 0.7839387059211731}]}, {"text": "Indeed, for the evaluation of the SimpleNLGit we used the test section of the Italian UD treebank (UD-IT-test).", "labels": [], "entities": [{"text": "Italian UD treebank", "start_pos": 78, "end_pos": 97, "type": "DATASET", "confidence": 0.8274379372596741}]}, {"text": "We chose 10 declarative sentences and 10 interrogative sentences, which have length up to ten words, from UD-IT-test.", "labels": [], "entities": [{"text": "UD-IT-test", "start_pos": 106, "end_pos": 116, "type": "DATASET", "confidence": 0.5603914856910706}]}, {"text": "In we report the sentences employed.", "labels": [], "entities": []}, {"text": "We tried to generate each one of these sentences in SimpleNLG-IT but, since the system can generate canned text, we need to specify a number of rules that we respect in order to convert the dependency structure of the sentences into the SimpleNLG input structure: (i) We build a SimpleNLG input isomorphic to the gold dependency tree.", "labels": [], "entities": []}, {"text": "So, we use the corresponding functions for subject, object, complement, passive verbs etc.", "labels": [], "entities": []}, {"text": "(ii) We do not use canned texts and we do not provide information about word order.", "labels": [], "entities": []}, {"text": "So we do not use the insertPreModifier and insertPostModifier functions.", "labels": [], "entities": []}, {"text": "(iii) We do not provide information about genre and number for words in the lexicon.", "labels": [], "entities": []}, {"text": "(iiii) We do not account for the punctuation inside the sentence.", "labels": [], "entities": []}, {"text": "Finally, we note that most word order errors are caused by the SVO order that is adopted in SimpleNLG-IT.", "labels": [], "entities": [{"text": "SimpleNLG-IT", "start_pos": 92, "end_pos": 104, "type": "DATASET", "confidence": 0.9185209274291992}]}, {"text": "Indeed, the sentences 1, 3, 8, 10, 14, 16 are grammatical but the gold sentences have a different topic-focus information structure represented with a different word order.", "labels": [], "entities": []}], "tableCaptions": [{"text": " Table 2: Number of elements for the open categories in the", "labels": [], "entities": []}]}