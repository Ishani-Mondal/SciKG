{"title": [{"text": "Evaluation Order Effects in Dynamic Continuized CCG: From Negative Polarity Items to Balanced Punctuation", "labels": [], "entities": []}], "abstractContent": [{"text": "Combinatory Categorial Grammar's (CCG; Steedman, 2000) flexible treatment of word order and constituency enable it to employ a compact lexicon, an important factor in its successful application to a range of NLP problems.", "labels": [], "entities": [{"text": "Combinatory Categorial Grammar", "start_pos": 0, "end_pos": 30, "type": "TASK", "confidence": 0.6543493469556173}]}, {"text": "However, its word order flexibility can be problematic for linguistic phenomena where linear order plays a key role.", "labels": [], "entities": [{"text": "word order flexibility", "start_pos": 13, "end_pos": 35, "type": "TASK", "confidence": 0.7153151134649912}]}, {"text": "In this paper , we show that the enhanced control over evaluation order afforded by Continuized CCG (Barker & Shan, 2014) makes it possible to not only implement an improved analysis of negative polarity items in Dynamic Continuized CCG (White et al., 2017) but also to develop an accurate treatment of balanced punctuation.", "labels": [], "entities": [{"text": "Continuized CCG (Barker & Shan, 2014)", "start_pos": 84, "end_pos": 121, "type": "DATASET", "confidence": 0.852506140867869}]}], "introductionContent": [{"text": "Combinatory Categorial Grammar (CCG;) has been increasingly employed with success fora wide range of NLP problems.", "labels": [], "entities": [{"text": "Combinatory Categorial Grammar (CCG", "start_pos": 0, "end_pos": 35, "type": "TASK", "confidence": 0.6922267854213715}]}, {"text": "An important factor in its success is that its flexible treatment of word order and constituency enable it to employ a compact lexicon, making it easier to acquire lexicalized grammars automatically and to train machinelearned models that generalize well.", "labels": [], "entities": []}, {"text": "However, its word order flexibility can be problematic for linguistic phenomena where linear order plays a key role.", "labels": [], "entities": [{"text": "word order flexibility", "start_pos": 13, "end_pos": 35, "type": "TASK", "confidence": 0.7153145472208658}]}, {"text": "In particular, linear order effects can be problematic for Steedman's (2012) treatment of negative polarity items (NPIs) as well as for implementing a treatment of balanced punctuation that attempts to track the status of the right periphery, as have previously shown.", "labels": [], "entities": []}, {"text": "In this paper, we show that the enhanced control over evaluation order afforded by Continuized CCG) makes it possible to successfully address both of these problems.", "labels": [], "entities": []}, {"text": "In particular, we show that Barker & Shan's analysis of NPIs, which does not suffer from the linear order issues that we raise for Steedman's analysis, can be straightforwardly implemented in Dynamic Continuized CCG (), a system that combines Barker & Shan's \"tower\" grammars with monadic approach to dynamic semantics, employing Steedman's CCG on the tower bottom for predicate-argument structure.", "labels": [], "entities": []}, {"text": "We then goon to show that the same technique used in Barker & Shan's analysis of NPIs can be used to successfully handle balanced punctuation, taking advantage of Charlow's monadic semantics to implement a novel approach to NP appositives.", "labels": [], "entities": []}, {"text": "Barker & Shan's continuized grammars make crucial use of continuations, a technique developed in programming language semantics to control and analyze evaluation order, and which enables the analyses presented here.", "labels": [], "entities": [{"text": "continuations", "start_pos": 57, "end_pos": 70, "type": "METRIC", "confidence": 0.9436025619506836}]}, {"text": "Charlow's dynamic semantics implements an alternative to approach to the exceptional scope of indefinites that fits naturally with ongoing work in dynamic semantics.", "labels": [], "entities": []}, {"text": "Meanwhile, by combining the Barker-Shan-Charlow approach with Steedman's CCG for predicate-argument structure, the resulting system respects Steedman's Principle of Adjacency, making it attractive for computational implementations.", "labels": [], "entities": []}, {"text": "As such, we suggest that the framework offers a promising starting point for work that tackles complex linguistic phenomena in a practical way.", "labels": [], "entities": []}, {"text": "A prototype implementation verifying the analyses accompanies the paper.", "labels": [], "entities": []}, {"text": "2 Negative Polarity Items in CCG develops an approach to quantification in CCG, including a treatment of negative polarity items.", "labels": [], "entities": []}, {"text": "Steedman's analysis follows earlier treatments in categorial grammar) in requiring negative polarity items to be licensed by an outscoping downward-entailing quantifier, negation or other licensor (e.g. verbs such as deny, which lexically incorporate negation).", "labels": [], "entities": []}, {"text": "For example, shows how CCG can account for the difference between No one enjoyed anything, where the NPI anything is outscoped by its licensor no one, and *Kim enjoyed anything, where the NPI anything has no licensor.", "labels": [], "entities": []}, {"text": "In Steedman's analysis, S \ud97b\udf59 indicates neutral polarity, while S \u2022 indicates reverse polarity.", "labels": [], "entities": []}, {"text": "The NPI anything combines with the verb enjoyed on its left to yield S \u2022 \\NP , the category fora verb phrase with reverse polarity.", "labels": [], "entities": []}, {"text": "The downward-entailing quantifier no one here combines with an inverted-polarity VP on the right to yield S \ud97b\udf59 , the category fora clause which again has neutral polarity.", "labels": [], "entities": []}, {"text": "Root sentences are required to have positive polarity, which is compatible with neutral polarity.", "labels": [], "entities": []}, {"text": "With *Kim enjoyed anything, by contrast, the subject Kim does not license NPIs, and thus the derivation ends with S \u2022 , which is incompatible with root-level positive polarity.", "labels": [], "entities": []}, {"text": "As Barker & Shan observe, previous accounts in the categorial grammar literature have failed to account for the constraint that licensors must not only outscope NPIs but also precede them.", "labels": [], "entities": []}, {"text": "Consequently, as illustrated with Steedman's account in, where nothing outscopes anyone but does not precede it, these accounts mistakenly predict that sentences such as *Kim gave anyone nothing should be acceptable.", "labels": [], "entities": []}], "datasetContent": [{"text": "The approach presented in Section 3 to using the continuation layer to handle linear order constraints on NPI licensing can be generalized to also successfully track punctuation at the right periphery.", "labels": [], "entities": [{"text": "NPI licensing", "start_pos": 106, "end_pos": 119, "type": "TASK", "confidence": 0.8598453998565674}]}, {"text": "As shown earlier, the category at the top left of the tower can be used to impose requirements on the preceding context, while the top right category can track information made available to the subsequent context.", "labels": [], "entities": []}, {"text": "The idea for handling balanced punctuation is illustrated in, where a bad comma-period sequence is correctly blocked despite the use of backwards crossed composition for heavy-NP shift.", "labels": [], "entities": []}, {"text": "Tower categories, such as the one for Sandy, CEO,, ordinarily require their leftward context to have balanced punctuation, as shown with the top-left category S bal ; the phrase as a whole is balanced and ends with a comma, as the category S bal comma attests.", "labels": [], "entities": [{"text": "Sandy, CEO", "start_pos": 38, "end_pos": 48, "type": "DATASET", "confidence": 0.6530894637107849}]}, {"text": "Punctuation information on tower categories is propagated through the continuation layer via the Combination, Lift Left and Lift Right rules; 11 here, the direct object NP punctuation info is propagated up to the clausal level.", "labels": [], "entities": []}, {"text": "At this point, combination with the full stop is blocked, since the full stop seeks a tower on the left that has no end punctuation, but the clause ends in a comma.", "labels": [], "entities": []}, {"text": "With relative clauses (not The Lift and Lift Left rules are modified to require balanced punctuation on the left.", "labels": [], "entities": []}, {"text": "For readability, Lambek-style (result-on-top) slashes are used at the tower level, rather than Steedman-style (resultshown), there is no problem tracking the punctuation at the right edge since this information is passed along the tower top rather than via the arguments of the CCG categories on the tower bottom, as in the problematic.", "labels": [], "entities": []}, {"text": "The comma category for deriving balanced appositives is given in (3b) in; this is the one whose result is shown in.", "labels": [], "entities": []}, {"text": "The corresponding unbalanced comma category-the one that would lead to a grammatical derivationappears in (3a).", "labels": [], "entities": []}, {"text": "Semantically, with either comma category, the semantics of the predicative NP is added to that of the modified NP, taking advantage of the capacity of the monadic dynamic semantics to sequence constraints on entities.", "labels": [], "entities": []}, {"text": "To show how this works, we first briefly introduce the basic idea of Charlow's monadic semantics, following White et al's (2017) presentation.", "labels": [], "entities": []}, {"text": "Charlow's (2014) dynamic semantics makes use of the State.Set monad, which combines the State monad for handling side effects with the Set monad for non-determinism.", "labels": [], "entities": []}, {"text": "The State monad pairs ordinary semantic values with a state, which is threaded through computations.", "labels": [], "entities": []}, {"text": "The Set monad models non-deterministic choices as sets, facilitating a non-deterministic treatment of indefinites.", "labels": [], "entities": []}, {"text": "For example, the dynamic meaning of a linguist swims appears in (4): here, the proposition that x swims, where x is some linguist, is paired with a state that augments the input first) ones.", "labels": [], "entities": []}, {"text": "Kim loves madly Sandy, CEO, . (4) \ud97b\udf59s.{hswim(x), c sxi | linguist(x)} More formally, the State.Set monad is defined as in (5).", "labels": [], "entities": []}, {"text": "For each type \u21b5, the corresponding monadic type M\u21b5 is a function from states of type s to sets pairing items of type \u21b5 with such states.", "labels": [], "entities": []}, {"text": "The \u2318 function injects values into the monad, simply yielding a singleton set consisting of the input item paired with the input state.", "labels": [], "entities": []}, {"text": "The bind operation ( sequences two monadic computations by sequencing the two computations pointwise, feeding each result of m applied to the input state s into \u21e1 and unioning the results.", "labels": [], "entities": []}, {"text": "Less formally, the ( operation can bethought of as \"run m to determine v in \u21e1.\"", "labels": [], "entities": []}, {"text": "Monadic sequencing with bind is what allows the meanings of a linguist and swims to compose with the indicated result.", "labels": [], "entities": []}, {"text": "(5) State.Set Monad Note that the notation mv ( \u21e1 is just syntactic sugar form ( \ud97b\udf59v.\u21e1, which maybe more familiar.", "labels": [], "entities": []}, {"text": "Using these notions, the semantics of the comma-delimited appositive phrase , CEO of XYZ, is given in (6a) in.", "labels": [], "entities": [{"text": "CEO of XYZ", "start_pos": 78, "end_pos": 88, "type": "DATASET", "confidence": 0.8595179915428162}]}, {"text": "As the category in (3b) takes a higher-order argument (after combining with the predicative NP and balancing comma), the semantics in (6a) takes a continuation argument k 0 and returns a continuized meaning (beginning with the second continuized argument k).", "labels": [], "entities": []}, {"text": "The continuation argument k 0 applies the expression \ud97b\udf59x.", "labels": [], "entities": []}, {"text": ".; consequently, after combining with the continuized meaning of Sandy, the constant sandy substitutes for x, as shown in (6b).", "labels": [], "entities": [{"text": "Sandy", "start_pos": 65, "end_pos": 70, "type": "DATASET", "confidence": 0.9399022459983826}]}, {"text": "Via monadic sequencing, the modified noun phrase will then supply the constant sandy as the appropriate argument of the verb, in essentially the same way as it would have had Sandy not been modified by the appositive.", "labels": [], "entities": []}, {"text": "Though it's beyond the scope of the paper to go into details, the dynamic appositive semantics proposed here is consistent with Martin's (2016) treatment of supplements, where their typically projective behavior is derived by piggybacking the supplement on the scopal behavior of the modified NP.", "labels": [], "entities": []}, {"text": "Moreover, it offers a simplification over Martin's account, as there is no need to appeal to an anaphoric mechanism in order to allow the supple-233 (6) a.", "labels": [], "entities": [{"text": "Martin's account", "start_pos": 42, "end_pos": 58, "type": "DATASET", "confidence": 0.9285389383633932}]}, {"text": ", CEO of XYZ, ` \ud97b\udf59k 0 k.k 0 \ud97b\udf59xs.{hx, si | ceo(x, xyz)} y ( ky b.", "labels": [], "entities": []}, {"text": "Sandy, CEO of XYZ, ` \ud97b\udf59ks.{hsandy, si | ceo(sandy, xyz)} y ( ky", "labels": [], "entities": []}], "tableCaptions": []}