{"title": [{"text": "P\u0101li Sandhi -A Computational Approach Sivaja S Nair", "labels": [], "entities": [{"text": "P\u0101li Sandhi", "start_pos": 0, "end_pos": 11, "type": "TASK", "confidence": 0.8029143214225769}]}], "abstractContent": [{"text": "For any Indian language, the accuracy of the morphological analyser, depends on the pre-edition of the input text.", "labels": [], "entities": [{"text": "accuracy", "start_pos": 29, "end_pos": 37, "type": "METRIC", "confidence": 0.9994947910308838}]}, {"text": "In P\u0101li language, like any other Indian language, the combination of words like sandhis and sam\u0101sas are frequently seen.", "labels": [], "entities": []}, {"text": "This poses difficulty in the proper analysis of the source text.", "labels": [], "entities": []}, {"text": "It is essential to have computational tools that help to split the words, useful in the analysis of the text.", "labels": [], "entities": []}, {"text": "This paper discusses complexities involved in creating a computational grammar for sandhi tool in P\u0101li language.", "labels": [], "entities": []}], "introductionContent": [{"text": "P\u0101li is a widely studied classical language, mainly because it is the language of P\u0101li canon.", "labels": [], "entities": []}, {"text": "A growing interest in P\u0101li makes it important to develop computational tools for the language.", "labels": [], "entities": []}, {"text": "Morphological analyser/generator is one such effort in this direction.", "labels": [], "entities": [{"text": "Morphological analyser/generator", "start_pos": 0, "end_pos": 32, "type": "TASK", "confidence": 0.772934302687645}]}, {"text": "All the combined words, (sandhis, sam\u0101s\u0101s, etc.) used in the text have to be manually split before using it as an input to the morphological analyzer in P\u0101li language.", "labels": [], "entities": []}, {"text": "Since it is a tedious effort, pre-editing tools such as sandhi splitter/joiner and sam\u0101sa analyser were envisaged.", "labels": [], "entities": [{"text": "sandhi splitter/joiner", "start_pos": 56, "end_pos": 78, "type": "TASK", "confidence": 0.7349571883678436}]}, {"text": "Though similarities were observed in P\u0101li and Samskrita grammar, it was observed that P\u0101li grammar was much more complex.", "labels": [], "entities": []}, {"text": "This paper discusses the computational approach taken to develop a sandhi splitter/joiner module and the complexities involved therein.", "labels": [], "entities": [{"text": "sandhi splitter/joiner module", "start_pos": 67, "end_pos": 96, "type": "TASK", "confidence": 0.8288894414901733}]}, {"text": "In order to develop sandhi module discussed in this paper Kacc\u0101yana grammar 1 has been referred to; as it's rules are comprehensive and supported with a lot of examples.", "labels": [], "entities": [{"text": "Kacc\u0101yana grammar 1", "start_pos": 58, "end_pos": 77, "type": "DATASET", "confidence": 0.7386062741279602}]}], "datasetContent": [], "tableCaptions": []}