{"title": [{"text": "RedTyp: A Database of Reduplication with Computational Models", "labels": [], "entities": []}], "abstractContent": [{"text": "Reduplication is a theoretically and typolog-ically well-studied phenomenon, but there is no database of reduplication patterns which include explicit computational models.", "labels": [], "entities": []}, {"text": "This paper introduces RedTyp, an SQL database which provides a computational resource that can be used by both theoretical and computational linguists who work on reduplication.", "labels": [], "entities": []}, {"text": "It catalogs 138 reduplicative morphemes across 91 languages, which are modeled with 57 distinct finite-state machines.", "labels": [], "entities": []}, {"text": "The finite-state machines are 2-way transducers, which provide an explicit, compact, and convenient representation for reduplication patterns, and which arguably capture the linguistic generalizations more directly than the more commonly used 1-way transducers for modeling natural language morphophonology.", "labels": [], "entities": []}], "introductionContent": [{"text": "Reduplication is a cross-linguistically wellattested and ubiquitous morphological operation).", "labels": [], "entities": []}, {"text": "The World Atlas of Language Structure (WALS) database documents that 313 out of 368 languages (85%) productively use some form of reduplication to mark one or more semantic functions.", "labels": [], "entities": [{"text": "World Atlas of Language Structure (WALS) database", "start_pos": 4, "end_pos": 53, "type": "DATASET", "confidence": 0.8800538116031222}]}, {"text": "The typology of reduplication can be roughly divided into total reduplication and partial reduplication.", "labels": [], "entities": []}, {"text": "Total reduplication copies unboundedly many segments which form some morphological constituent (e.g. a word, stem, root, etc.) as shown in (1a).", "labels": [], "entities": []}, {"text": "Partial reduplication copies a bounded number of segments.", "labels": [], "entities": []}, {"text": "In partial reduplication, the shape of the reduplicant is most commonly CV (2a), CVC (2b), or CVCV (2c).", "labels": [], "entities": []}, {"text": "1. Indonesian (a) wanita ! wanita\u21e0wanita 'woman' ! 'women' 2.", "labels": [], "entities": []}, {"text": "Pangasinan ( (a) too ! to\u21e0too 'man' ! 'people' (b) baley ! bal\u21e0baley 'town' ! 'towns' (c) manok ! mano\u21e0manok 'chicken' ! 'chickens' There is a much more diverse typology than these relatively simple patterns.", "labels": [], "entities": []}, {"text": "Typologists have documented various patterns of reduplication which are both common and uncommon).", "labels": [], "entities": []}, {"text": "Interested readers are referred to,, and Inkelas and Downing (2015) for overviews.", "labels": [], "entities": []}, {"text": "Reduplication is difficult to model with existing finite-state tools for two reasons.", "labels": [], "entities": []}, {"text": "First, copying an unbounded number of segments (total reduplication) cannot be done by 1-way Finite-State Transducers (1-way FSTs), which are overwhelmingly used in computational linguistics.", "labels": [], "entities": [{"text": "copying an unbounded number of segments", "start_pos": 7, "end_pos": 46, "type": "TASK", "confidence": 0.8555029531319936}]}, {"text": "Instead, existing finite-state tools approximate total reduplication by essentially treating it as memorizing a list of existing words in the language.", "labels": [], "entities": []}, {"text": "If total reduplication were rare, perhaps this difficulty could be overlooked.", "labels": [], "entities": []}, {"text": "However, total reduplication is the most common reduplicative process and it occurs in an estimated 75% of the world's languages.", "labels": [], "entities": []}, {"text": "Second, while 1-way finite-state transducers can copy boundedly many segments (partial reduplication), the number of states needed can be quite large.", "labels": [], "entities": []}, {"text": "This cancan make them difficult to design and debug.", "labels": [], "entities": []}, {"text": "Consequently, there are few (if any) computational resources which model reduplication in away that is simple, small, easy to design, and linguistically motivated.", "labels": [], "entities": []}, {"text": "Against this background, this paper makes two contributions.", "labels": [], "entities": []}, {"text": "First, it introduces a SQL database, which we call RedTyp, of 138 reduplicative processes from 91 languages.", "labels": [], "entities": []}, {"text": "2 These were gathered from various typological surveys of reduplication.", "labels": [], "entities": []}, {"text": "We mainly used, a classic survey on reduplication, and supplemented it with other published linguistic surveys, with case studies gleaned from other smaller surveys that were narrower in scope e.g., among others.", "labels": [], "entities": []}, {"text": "A copy of RedTyp exists online at our GitHub page: github.com/jhdeov/RedTyp and is available to the public under a Creative Commons non-commercial license (CC BY-NC 4.0).", "labels": [], "entities": []}, {"text": "Second, RedTyp models reduplicative processes with an understudied and under-used type of finite-state technology: 2-way deterministic finite-state transducers (2-way FSTs).", "labels": [], "entities": []}, {"text": "As we explain in Subsection 2.2, and in detail in, 2-way FSTs can reread parts of the input string, unlike 1-way FSTs.", "labels": [], "entities": []}, {"text": "In addition to allowing 2-way FSTs to model total reduplication exactly, this additional capacity significantly reduces the number of states needed to model partial reduplication.", "labels": [], "entities": []}, {"text": "Consequently, 2-way FSTs for reduplication are easy to design, debug, and manage.", "labels": [], "entities": [{"text": "FSTs", "start_pos": 20, "end_pos": 24, "type": "TASK", "confidence": 0.9359801411628723}]}, {"text": "Besides their state efficiency and practical utility, 2-way FSTs likewise capture the intensional description of reduplication.", "labels": [], "entities": [{"text": "FSTs", "start_pos": 60, "end_pos": 64, "type": "TASK", "confidence": 0.8442071080207825}]}, {"text": "For more discussion of the role of 2-way FSTs as computational models of reduplication, see.", "labels": [], "entities": [{"text": "FSTs", "start_pos": 41, "end_pos": 45, "type": "TASK", "confidence": 0.8587021231651306}]}, {"text": "For each reduplicative process in RedTyp, we manually wrote a 2-way FST representing it.", "labels": [], "entities": []}, {"text": "In total, we modeled 138 reduplicative processes in RedTyp with 57 2-way FSTs.", "labels": [], "entities": []}, {"text": "The average number of states in these machines is 8.82.", "labels": [], "entities": []}, {"text": "3 These FSTs The name RedTyp is in homage to the \"Typ\" databases including the StressTyp databases () and others described in.", "labels": [], "entities": []}, {"text": "The largest 2-way FST in this sample, from verbal reduplication in), has 29 states.", "labels": [], "entities": [{"text": "FST", "start_pos": 18, "end_pos": 21, "type": "TASK", "confidence": 0.9275422096252441}]}, {"text": "This pattern depends on the size of the root and the number and are included in RedTyp, along with a Python script for using them.", "labels": [], "entities": []}, {"text": "The remainder of this paper is organized as follows.", "labels": [], "entities": []}, {"text": "Although 2-way FSTs have been studied since the 1960s (, they area relatively unknown finite-state device in computational linguistics; outside of linguistics, there has been recently been more industrial applications for computational models equivalent to 2-way FSTs (Alur and\u010cern\u00b4yand\u02c7and\u010cern\u00b4and\u010cern\u00b4y, 2011;).", "labels": [], "entities": [{"text": "FSTs", "start_pos": 15, "end_pos": 19, "type": "TASK", "confidence": 0.8480753898620605}]}, {"text": "In order to explain the resource RedTyp, which uses 2-way FSTs, we briefly 4 introduce and define 2-way FSTs in Section 2.", "labels": [], "entities": []}, {"text": "Section 3 details the SQL structure of RedTyp, the software implementation of the 2-way FSTs, and the accompanying Python script.", "labels": [], "entities": []}, {"text": "Section 4 discusses various aspects of RedTyp including a a high-level comparison of 2-way FSTs to other formal devices, a comparison of RedTyp to the only other reduplication database that exists to our knowledge (the Graz Database on Reduplication (), the utility of RedTyp, and future research directions.", "labels": [], "entities": []}, {"text": "Conclusions are in Section 5.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}