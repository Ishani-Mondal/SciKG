{"title": [{"text": "One format to rule them all - The emtsv pipeline for Hungarian", "labels": [], "entities": [{"text": "emtsv pipeline", "start_pos": 34, "end_pos": 48, "type": "DATASET", "confidence": 0.9418267905712128}]}], "abstractContent": [{"text": "We present a more efficient version of the e-magyar NLP pipeline for Hungar-ian called emtsv.", "labels": [], "entities": []}, {"text": "It integrates Hungarian NLP tools in a framework whose individual modules can be developed or replaced independently and allows new ones to be added.", "labels": [], "entities": []}, {"text": "The design also allows convenient investigation and manual correction of the data flow from one module to another.", "labels": [], "entities": []}, {"text": "The improvements we publish include effective communication between the modules and support of the use of individual modules both in the chain and standing alone.", "labels": [], "entities": []}, {"text": "Our goals are accomplished using extended tsv (tab separated values) files, a simple, uniform, generic and self-documenting input/output format.", "labels": [], "entities": []}, {"text": "Our vision is maintaining the system fora longtime and making it easier for external developers to fit their own modules into the system, thus sharing existing competencies in the field of processing Hungarian, a mid-resourced language.", "labels": [], "entities": []}, {"text": "The source code is available under LGPL 3.0 license 1 .", "labels": [], "entities": []}], "introductionContent": [{"text": "The e-magyar processing system ( integrates the state-of-the-art Hungarian NLP tools into a single, easy-to-use, maintained, and updated system.", "labels": [], "entities": []}, {"text": "It has been designed to facilitate both research and application-oriented processing with the important goal of the system being fully open for research purposes, thus encouraging future expansion, but also being easy for the non-NLP audience to use, and to become a good experimental tool, delivering the best performance available, regarding both processing speed and correctness.", "labels": [], "entities": []}, {"text": "Since its publication, the system has become popular and widely used in the Hungarian NLP https://github.com/dlt-rilmta/emtsv community.", "labels": [], "entities": [{"text": "Hungarian NLP", "start_pos": 76, "end_pos": 89, "type": "DATASET", "confidence": 0.7899501025676727}]}, {"text": "Attempts have also been made to analyze large corpora with it, such as the Hungarian Webcorpus () and the Hungarian Gigaword Corpus ().", "labels": [], "entities": [{"text": "Hungarian Webcorpus", "start_pos": 75, "end_pos": 94, "type": "DATASET", "confidence": 0.9204462766647339}, {"text": "Hungarian Gigaword Corpus", "start_pos": 106, "end_pos": 131, "type": "DATASET", "confidence": 0.9026952584584554}]}, {"text": "This work led to the discovery of previously unknown errors and weaknesses, which were taken into account in our developments.", "labels": [], "entities": []}, {"text": "In this article, we present our work with two aspects emphasized: the unified communication format and the architecture design.", "labels": [], "entities": []}, {"text": "In the first version of e-magyar, the intermodular communication format was the internal xml format of GATE), into which the Hungarian system was integrated.", "labels": [], "entities": [{"text": "GATE", "start_pos": 103, "end_pos": 107, "type": "DATASET", "confidence": 0.889533519744873}]}, {"text": "However, user experience showed that most users do not know or want to use the GATE system for their work: users with linguistic interest found it inconvenient, while for those with a technical background, it was unnecessarily cumbersome.", "labels": [], "entities": []}, {"text": "In many cases, GATE introduces unnecessary complexity regarding installation, debugging, the format, and resource demand, due to the xml-based standoff annotation (see Section 3), which in many cases undermines stability.", "labels": [], "entities": [{"text": "GATE", "start_pos": 15, "end_pos": 19, "type": "TASK", "confidence": 0.7770959138870239}]}, {"text": "Therefore, we voted for the development of anew, standard and GATE-independent inter-modular communication format opening the way to use existing devices as separate modules or with transparent inter-modular messages.", "labels": [], "entities": []}, {"text": "The format also simplifies the manual modification of inter-modular content.", "labels": [], "entities": []}, {"text": "Available tools, even those independent of their programming language, become easier to integrate into the system.", "labels": [], "entities": []}, {"text": "Another focus of the development was on rethinking the architecture design.", "labels": [], "entities": []}, {"text": "Modules which were available before the creation of e-magyar were written in various programming languages, following different linguistic annotations, and lacking a modularized and transparent structure.", "labels": [], "entities": []}, {"text": "In contrast, our principles are unifor-mity, interoperability, comparability, and the interchangeability of individual modules (e.g. when anew candidate performs better).", "labels": [], "entities": []}, {"text": "In this article, we show how we converted the tools of the previous e-magyar version following the UNIX toolbox philosophy: \"each does one thing and each does it very well\".", "labels": [], "entities": []}, {"text": "Restructured modules are supposed to be able to both operate independently of each other or interacting, as needed.", "labels": [], "entities": []}, {"text": "Also sections of the pipeline can be run, i.e. users can enter or exit at any point and can modify the data manually, as long as they adhere to format requirements, which are natural and programming language agnostic by design from the beginning.", "labels": [], "entities": []}, {"text": "Design properties of other processing chains were kept in mind during the development of emtsv for the sake of comparability.", "labels": [], "entities": []}, {"text": "Other systems mostly take strictly a single natural language as their starting point, but then they are extended to be multilingual or even intended to be universal afterwards.", "labels": [], "entities": []}, {"text": "Some of them go with changed needs, which now favor scalable cloud-based technologies -dubbed microservices -that do not require end user installation: the chain is provided as a service, sometimes without source code.", "labels": [], "entities": []}, {"text": "In parallel with the development, the potential use of emtsv was also contemplated.", "labels": [], "entities": []}, {"text": "For instance, emtsv could be profitable for preannotating tasks in corpus building.", "labels": [], "entities": [{"text": "corpus building", "start_pos": 67, "end_pos": 82, "type": "TASK", "confidence": 0.6869933158159256}]}, {"text": "Thanks to the high performance of the modules, preanalyzing the text could shorten and ease the otherwise expensive and protracted human annotation.", "labels": [], "entities": []}, {"text": "Furthermore, the modular architecture of the toolchain allows us to exit at a certain point of the analysis, carryout some manual correction in the data, and then enter the chain again putting the data back to emtsv.", "labels": [], "entities": []}, {"text": "Let us take an imaginable workflow as an illustrative example.", "labels": [], "entities": []}, {"text": "Firstly, the output of tokenization and tagging is corrected manually fora revised, finer input for the dependency parser, the second step of the workflow.", "labels": [], "entities": []}, {"text": "Therefore, the effect of occurrent errors from the tokenizer or the part of speech (POS) tagger could be eliminated.", "labels": [], "entities": []}, {"text": "It is worth to mention, that since the dependency parser allocates ID numbers to each token, modifications in tokenization (inserting, deleting, splitting, or joining tokens) do not cause complications in token numbering.", "labels": [], "entities": [{"text": "token numbering", "start_pos": 205, "end_pos": 220, "type": "TASK", "confidence": 0.8146104514598846}]}, {"text": "At the end of the workflow, the output of the dependency parser is converted into the CoNLL-U format 2 , which is edible for widely-used annotation and visualization tools, e.g. allowing to carryout further corrections in the dependency graph in a drag-and-drop manner.", "labels": [], "entities": []}, {"text": "In Section 2, we present the currently available language processing systems similar to emtsv for the sake of comparison.", "labels": [], "entities": []}, {"text": "Section 3 describes our extended tsv format, Section 4 gives an overview of the architecture, while Section 5 presents the individual modules.", "labels": [], "entities": []}, {"text": "Section 6 summarizes the paper and Section 7 presents future work.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": []}