{"title": [], "abstractContent": [{"text": "Sentence parser is an essential component in the mechanical analysis of natural language texts.", "labels": [], "entities": [{"text": "Sentence parser", "start_pos": 0, "end_pos": 15, "type": "TASK", "confidence": 0.9096895754337311}, {"text": "mechanical analysis of natural language texts", "start_pos": 49, "end_pos": 94, "type": "TASK", "confidence": 0.7903986473878225}]}, {"text": "Building a parser for Sanskrit text is a challenging task because of its free word order and the dominance of verse style in Sanskrit literature in comparison to prose style.", "labels": [], "entities": []}, {"text": "In this paper, we describe our efforts to build a parser which parses both prose as well as verse texts.", "labels": [], "entities": []}, {"text": "It employs an Edge-Centric Binary Join method using various constraints following traditional rules of verbal cognition.", "labels": [], "entities": []}, {"text": "We also propose a Da\u1e47\u1e0da-anvaya-janaka which converts the parsed verse form to its canonical prose order.", "labels": [], "entities": []}], "introductionContent": [{"text": "Parsing natural language sentences automatically to reveal the underlying semantics has attracted many researchers to this field in the past two decades.", "labels": [], "entities": [{"text": "Parsing natural language sentences automatically", "start_pos": 0, "end_pos": 48, "type": "TASK", "confidence": 0.9018560409545898}]}, {"text": "The parse of a sentence is useful for several applications ranging from machine translation, information retrieval to question answering.", "labels": [], "entities": [{"text": "machine translation", "start_pos": 72, "end_pos": 91, "type": "TASK", "confidence": 0.7871663868427277}, {"text": "information retrieval", "start_pos": 93, "end_pos": 114, "type": "TASK", "confidence": 0.8104664981365204}, {"text": "question answering", "start_pos": 118, "end_pos": 136, "type": "TASK", "confidence": 0.8756498694419861}]}, {"text": "Parsing sentences with fixed word order is comparatively easier than parsing texts that show some flexibility in the word order.", "labels": [], "entities": [{"text": "Parsing sentences", "start_pos": 0, "end_pos": 17, "type": "TASK", "confidence": 0.920750230550766}]}, {"text": "We come across such flexibility in poetry.", "labels": [], "entities": []}, {"text": "The syntax and semantics of poems have been an area of serious studies.", "labels": [], "entities": [{"text": "syntax and semantics of poems", "start_pos": 4, "end_pos": 33, "type": "TASK", "confidence": 0.7023176789283753}]}, {"text": "Delmonte (2018) studies the syntax and semantics of Italian poetry.", "labels": [], "entities": [{"text": "syntax and semantics of Italian poetry", "start_pos": 28, "end_pos": 66, "type": "TASK", "confidence": 0.741269459327062}]}, {"text": "He observes that the best parsers for Italian based on statistical probabilistic information fail to parse poetic structures while the rule based system performs well.", "labels": [], "entities": [{"text": "parse poetic structures", "start_pos": 101, "end_pos": 124, "type": "TASK", "confidence": 0.8721915483474731}]}, {"text": "have noticed the importance of treebank for poems in order to use the statistical or machine learning models, and have developed a dependency treebank for Classical Chinese poems.", "labels": [], "entities": []}, {"text": "The Stanford Dependency relations were extended in order to account for certain poetic constructs in Chinese.", "labels": [], "entities": [{"text": "Stanford Dependency relations", "start_pos": 4, "end_pos": 33, "type": "DATASET", "confidence": 0.9176273941993713}]}, {"text": "( proposed a model, called k\u0101vya guru, for the conversion of Sanskrit sentences inverse to prose form, which considers the task of conversion as a linearisation problem.", "labels": [], "entities": [{"text": "conversion of Sanskrit sentences inverse to prose form", "start_pos": 47, "end_pos": 101, "type": "TASK", "confidence": 0.7818099781870842}]}, {"text": "It first uses-Dynamic Meta Embeddings (DME)-for training, where it forms a single meta embedding from multiple pretrained word embeddings of a given token.", "labels": [], "entities": []}, {"text": "Then it uses a linearisation model-Self-Attention Based Word Ordering (SAWO)-which generates multiple permutations of words, which are then sent to a seq2seq model that produces the required prose order form.", "labels": [], "entities": []}, {"text": "They compared the performance of their system with an LSTM based Linearisation Model, and seq2seq model with Beam Search Optimisation, and their system performs the best with a BLEU score of 55..", "labels": [], "entities": [{"text": "BLEU", "start_pos": 177, "end_pos": 181, "type": "METRIC", "confidence": 0.9995710253715515}]}, {"text": "Majority of Sanskrit literature is inverse form.", "labels": [], "entities": [{"text": "inverse form", "start_pos": 35, "end_pos": 47, "type": "TASK", "confidence": 0.8764428794384003}]}, {"text": "These verses follow metrical patterns which make them easy to memorise.", "labels": [], "entities": []}, {"text": "The metrical pattern also brings in deviation from the default word order found in the prose.", "labels": [], "entities": []}, {"text": "This makes it difficult to understand the verse without any special training.", "labels": [], "entities": [{"text": "understand the verse", "start_pos": 27, "end_pos": 47, "type": "TASK", "confidence": 0.6768789291381836}]}, {"text": "Sanskrit being a flexional language, and also rich in derivational morphology, enjoys the flexibility in the word order.", "labels": [], "entities": []}, {"text": "There is, as well, a natural tendency to have a kind of rhythm even in the normal speech in Sanskrit, which results in the deviation from normal word order.", "labels": [], "entities": []}, {"text": "reports several cases of dislocations of arguments from their default order even in prose.", "labels": [], "entities": []}, {"text": "This flexibility, however, makes parsing such texts a bit challenging.", "labels": [], "entities": [{"text": "parsing", "start_pos": 33, "end_pos": 40, "type": "TASK", "confidence": 0.9735011458396912}]}, {"text": "In this paper we describe a parser for Sanskrit that can parse both verse and prose.", "labels": [], "entities": []}, {"text": "In the next section we describe the basic architecture of our parser that extracts a tree from a graph satisfying some local and global constraints.", "labels": [], "entities": []}, {"text": "In the third section we provide the algorithm for constraint solver and illustrate it with an example.", "labels": [], "entities": [{"text": "constraint solver", "start_pos": 50, "end_pos": 67, "type": "TASK", "confidence": 0.6810329705476761}]}, {"text": "Next two sections describe an application of this parser to get the prose order (also termed da\u1e47\u1e0da-anvaya) of any verse.", "labels": [], "entities": []}, {"text": "We conclude with the discussion on the performance of the parser stating its limitations and the areas where it needs further improvement.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: All possible edges and their compatible edges", "labels": [], "entities": []}, {"text": " Table 2: Trace of algorithm on sentence 1", "labels": [], "entities": [{"text": "Trace", "start_pos": 10, "end_pos": 15, "type": "METRIC", "confidence": 0.9401617050170898}]}]}