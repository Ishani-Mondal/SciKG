{"title": [{"text": "FASTDial: Abstracting Dialogue Policies for Fast Development of Task Oriented Agents", "labels": [], "entities": [{"text": "FASTDial", "start_pos": 0, "end_pos": 8, "type": "DATASET", "confidence": 0.6589711904525757}]}], "abstractContent": [{"text": "We present a novel abstraction framework called FASTDial for designing task oriented dialogue agents, built on top of the OpenDial toolkit.", "labels": [], "entities": [{"text": "FASTDial", "start_pos": 48, "end_pos": 56, "type": "METRIC", "confidence": 0.4357561469078064}]}, {"text": "This framework is meant to facilitate prototyping and development of dialogue systems from scratch also by non tech savvy, especially when limited training data is available.", "labels": [], "entities": []}, {"text": "To this end, we use a generic and simple frame-slots data-structure with pre-defined dialogue policies that allows for fast design and implementation at the price of some flexibility reduction.", "labels": [], "entities": []}, {"text": "Moreover, it allows for minimizing programming effort and domain expert training time, by hiding away many implementation details.", "labels": [], "entities": []}], "introductionContent": [{"text": "In recent years, there has been an increasing demand fora new generation of conversational systems that are able to naturally interact and assist humans in a number of scenarios, including -but not limited to -virtual coaches, personal assistants and automatic help desks.", "labels": [], "entities": []}, {"text": "However, when dealing with applications or commercial scenarios, technological complexity should be abstracted away since domain knowledge is often held by non tech savvy.", "labels": [], "entities": []}, {"text": "Moreover, systems should be 'transparent' to easily allow for modification or scaling when needed, such as error fixing or new intents/objects/requirements integration.", "labels": [], "entities": [{"text": "error fixing", "start_pos": 107, "end_pos": 119, "type": "TASK", "confidence": 0.6777969151735306}]}, {"text": "To this end, several solutions have appeared on the market.", "labels": [], "entities": []}, {"text": "On one side, there are open source tools/frameworks, such as OpenDial (,) and DeepPavlov () that are very flexible and allow many integrations.", "labels": [], "entities": [{"text": "OpenDial", "start_pos": 61, "end_pos": 69, "type": "DATASET", "confidence": 0.9150795340538025}]}, {"text": "While these tools are designed with the target of computer scientists in mind, they would still need domain expertise to design proper dialogues.", "labels": [], "entities": []}, {"text": "On the other side of the spectrum, several commercial tools aim at hiding dialogue implementation complexity, for example by using intuitive graphical interfaces to help also nontechnical experts build their own dialogues.", "labels": [], "entities": []}, {"text": "This comes to the price of loosing some flexibility, integration capabilities, and control over the system.", "labels": [], "entities": []}, {"text": "However, constructing flexible multi-intent dialogue agents while keeping the implementation complexity minimal is not a trivial task both on commercial and open source tools.", "labels": [], "entities": []}, {"text": "Considering that there are several domains requiring such dialogue systems (e.g. banking, e-commerce etc.), we aim at providing a framework that is easy to use but at the same time is still as flexible as possible.", "labels": [], "entities": []}, {"text": "To this end, we tried to merge the best of both worlds (commercial and open source tools) by designing and implementing a generalization architecture on top of OpenDial.", "labels": [], "entities": [{"text": "OpenDial", "start_pos": 160, "end_pos": 168, "type": "DATASET", "confidence": 0.9511118531227112}]}, {"text": "OpenDial is a Java-based, domain-independent framework for developing probabilistic rule-based dialogue systems.", "labels": [], "entities": [{"text": "OpenDial", "start_pos": 0, "end_pos": 8, "type": "DATASET", "confidence": 0.9336302280426025}]}, {"text": "While keeping the rule-based approach of OpenDial, our architecture, named FASTDial, abstracts away dialogue policies in a generic dialogue model that drastically reduces design effort and code complexity.", "labels": [], "entities": [{"text": "FASTDial", "start_pos": 75, "end_pos": 83, "type": "METRIC", "confidence": 0.5704183578491211}]}, {"text": "This generic dialogue model starts with an intent recognition phase that is user initiative.", "labels": [], "entities": [{"text": "intent recognition", "start_pos": 43, "end_pos": 61, "type": "TASK", "confidence": 0.6847983151674271}]}, {"text": "Once the intent is recognized the interaction is converted to system initiative for filling the required slots.", "labels": [], "entities": []}, {"text": "Still, the user is given an active part by allowing universal interruptions such as calling help or canceling the task.", "labels": [], "entities": []}, {"text": "In our view, most task oriented domains can be easily adapted to this schema.", "labels": [], "entities": []}, {"text": "This allows for speeding up the prototyping of complex multi-intent dialogue scenarios.", "labels": [], "entities": []}, {"text": "It allows easy integration of new languages and new intents, by prioritizing efficiency and extensibility to facilitate developing dialogue systems from scratch and with limited training data available.", "labels": [], "entities": []}, {"text": "Scalabil-ity can be quickly obtained also by non-experts since the technical implementation of the dialogue flow is abstracted away.", "labels": [], "entities": []}, {"text": "Therefore, instead of focusing on a graphical interface approach, we abstracted the dialogue policy in order to make dialogue building simpler: \u2022 non-experts can easily be trained to write dialogues -or better -to provide the information needed to automatically establish a dialogue.", "labels": [], "entities": []}, {"text": "\u2022 new intents can be quickly added.", "labels": [], "entities": []}, {"text": "\u2022 dialogues can be quickly and easily ported to new languages.", "labels": [], "entities": []}, {"text": "\u2022 by using API interface to separate dialogue from actual data we can increase the modularity in the applications.", "labels": [], "entities": []}, {"text": "However, generalizing the dialogue flow into certain logical patterns brings along the restriction in the dialogue policy flexibility such that the agent can only handle informable slot types and a single slot per turn.", "labels": [], "entities": []}, {"text": "The remainder of the paper is structured as follow: Section 2 presents the architecture of our system with its main components, while Section 3 presents our running example in the banking scenario.", "labels": [], "entities": []}, {"text": "Finally, in Section 4 and 5 we evaluate our approach and discuss future developments.", "labels": [], "entities": []}], "datasetContent": [{"text": "Since one of our main claims is that our abstraction framework can drastically reduce dialogue design and code complexity -as compared to OpenDial -we setup a comparison task.", "labels": [], "entities": [{"text": "dialogue design", "start_pos": 86, "end_pos": 101, "type": "TASK", "confidence": 0.7838817536830902}]}, {"text": "In this task we re-implemented three of the intent of the bank- ing scenario into the native OpenDial representation.", "labels": [], "entities": []}, {"text": "The code reduction was of two orders of magnitude (on average from 2000 lines of XML code to 80 lines of json format FSDS description).", "labels": [], "entities": []}, {"text": "Note that for this comparison we relied on a developer, so we excluded the time needed to learn the tool, that for OpenDial is expected to be much higher.", "labels": [], "entities": []}, {"text": "As a second task, we ported the languagespecific generic NLU/NLG definitions and original 9 Banking Domain intents to two new languages (Italian and Hungarian): on average setting up a completely functional dialogue agent with all 9 intents required from 3 to 4 hours.", "labels": [], "entities": []}, {"text": "In this case we did not use a programmer but a native speaker per language with good knowledge of English.", "labels": [], "entities": []}], "tableCaptions": []}