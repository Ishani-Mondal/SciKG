{"title": [{"text": "TypeSQL: Knowledge-based Type-Aware Neural Text-to-SQL Generation", "labels": [], "entities": []}], "abstractContent": [{"text": "Interacting with relational databases through natural language helps users of any background easily query and analyze avast amount of data.", "labels": [], "entities": []}, {"text": "This requires a system that understands users' questions and converts them to SQL queries automatically.", "labels": [], "entities": []}, {"text": "In this paper we present a novel approach, TYPESQL, which views this problem as a slot filling task.", "labels": [], "entities": [{"text": "TYPESQL", "start_pos": 43, "end_pos": 50, "type": "METRIC", "confidence": 0.7136508822441101}, {"text": "slot filling task", "start_pos": 82, "end_pos": 99, "type": "TASK", "confidence": 0.8700609008471171}]}, {"text": "Additionally , TYPESQL utilizes type information to better understand rare entities and numbers in natural language questions.", "labels": [], "entities": []}, {"text": "We test this idea on the WikiSQL dataset and outperform the prior state-of-the-art by 5.5% in much less time.", "labels": [], "entities": [{"text": "WikiSQL dataset", "start_pos": 25, "end_pos": 40, "type": "DATASET", "confidence": 0.9438566267490387}]}, {"text": "We also show that accessing the content of databases can significantly improve the performance when users' queries are not well-formed.", "labels": [], "entities": []}, {"text": "TYPESQL gets 82.6% accuracy, a 17.5% absolute improvement compared to the previous content-sensitive model.", "labels": [], "entities": [{"text": "TYPESQL", "start_pos": 0, "end_pos": 7, "type": "DATASET", "confidence": 0.6678326725959778}, {"text": "accuracy", "start_pos": 19, "end_pos": 27, "type": "METRIC", "confidence": 0.9995822310447693}]}], "introductionContent": [{"text": "Building natural language interfaces to relational databases is an important and challenging problem ().", "labels": [], "entities": []}, {"text": "It requires a system that is able to understand natural language questions and generate corresponding SQL queries.", "labels": [], "entities": []}, {"text": "In this paper, we consider the WikiSQL task proposed by, a large scale benchmark dataset for the text-to-SQL problem.", "labels": [], "entities": []}, {"text": "Given a natural language question fora table and the table's schema, the system needs to produce a SQL query corresponding to the question.", "labels": [], "entities": []}, {"text": "We introduce a knowledge-based type-aware text-to-SQL generator, TYPESQL.", "labels": [], "entities": []}, {"text": "Based on the prior state-of-the-art SQLNet (, TYPESQL employs a sketch-based approach and views the task as a slot filling problem.", "labels": [], "entities": [{"text": "slot filling", "start_pos": 110, "end_pos": 122, "type": "TASK", "confidence": 0.773390531539917}]}, {"text": "By grouping different slots in a reasonable way and capturing relationships between attributes, TYPESQL outperforms SQLNet by about 3.5% in half of the original training time.", "labels": [], "entities": []}, {"text": "Furthermore, natural language questions often contain rare entities and numbers specific to the underlying database.", "labels": [], "entities": []}, {"text": "Some previous work already shows those words are crucial to many downstream tasks, such as infering column names and condition values in the SQL query.", "labels": [], "entities": []}, {"text": "However, most of such key words lack accurate embeddings in popular pre-trained word embedding models.", "labels": [], "entities": []}, {"text": "In order to solve this problem, TYPESQL assigns each word a type as an entity from either the knowledge graph, a column or a number.", "labels": [], "entities": []}, {"text": "For example, for the question in, we label \"mort drucker\" as PERSON according to our knowledge graph; \"spoofed title,\" \"artist\" and \"issue\" as COLUMN since they are column names; and \"88.5\" as FLOAT.", "labels": [], "entities": [{"text": "PERSON", "start_pos": 61, "end_pos": 67, "type": "METRIC", "confidence": 0.9799624681472778}, {"text": "COLUMN", "start_pos": 143, "end_pos": 149, "type": "METRIC", "confidence": 0.9032412171363831}, {"text": "FLOAT", "start_pos": 193, "end_pos": 198, "type": "METRIC", "confidence": 0.7152384519577026}]}, {"text": "Incorporating this type information, TYPESQL further improves the state-of-the-art performance by about another 2% on the WikiSQL dataset, resulting in a final 5.5% improvement in total.", "labels": [], "entities": [{"text": "WikiSQL dataset", "start_pos": 122, "end_pos": 137, "type": "DATASET", "confidence": 0.9420543313026428}]}, {"text": "Moreover, most previous work assumes that user queries contain exact column names and entries.", "labels": [], "entities": []}, {"text": "However, it is unrealistic that users always formulate their questions with exact column names and string entries in the table.", "labels": [], "entities": []}, {"text": "To tackle this issue, when scaleability and privacy are not of a concern, the system needs to search databases to better understand what the user is querying.", "labels": [], "entities": []}, {"text": "Our content-sensitive model TYPESQL + TC gains roughly 9% improvement compared to the content-insensitive model, and outperforms the previous content-sensitive model by 17.5%.", "labels": [], "entities": []}], "datasetContent": [], "tableCaptions": [{"text": " Table 1: Overall results on WikiSQL. Acc lf , Acc qm , and Acc ex denote the accuracies of exact string, canonical  representation, and execute result matches between the synthesized SQL with the ground truth respectively. The  top six results are content-insensitive, which means only the question and table schema are used as inputs. The  bottom two are content-sensitive, where the models use the question, the table schema, and the content of databases.", "labels": [], "entities": [{"text": "Acc", "start_pos": 38, "end_pos": 41, "type": "METRIC", "confidence": 0.9762116074562073}, {"text": "Acc", "start_pos": 47, "end_pos": 50, "type": "METRIC", "confidence": 0.9653996825218201}, {"text": "Acc", "start_pos": 60, "end_pos": 63, "type": "METRIC", "confidence": 0.9865949153900146}]}, {"text": " Table 2: Breakdown results on WikiSQL. Acc agg , Acc sel , and Acc where are the accuracies of canonical represen- tation matches on AGGREGATOR, SELECT COLUMN, and WHERE clauses between the synthesized SQL and the  ground truth respectively.", "labels": [], "entities": [{"text": "Acc", "start_pos": 40, "end_pos": 43, "type": "METRIC", "confidence": 0.9035841822624207}, {"text": "Acc", "start_pos": 50, "end_pos": 53, "type": "METRIC", "confidence": 0.980453610420227}, {"text": "Acc", "start_pos": 64, "end_pos": 67, "type": "METRIC", "confidence": 0.9955514073371887}, {"text": "SELECT COLUMN", "start_pos": 146, "end_pos": 159, "type": "METRIC", "confidence": 0.7961842715740204}]}]}