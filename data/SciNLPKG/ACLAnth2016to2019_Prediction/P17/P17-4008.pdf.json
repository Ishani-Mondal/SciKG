{"title": [{"text": "Hafez: an Interactive Poetry Generation System", "labels": [], "entities": [{"text": "Interactive Poetry Generation", "start_pos": 10, "end_pos": 39, "type": "TASK", "confidence": 0.5886273781458536}]}], "abstractContent": [{"text": "Hafez is an automatic poetry generation system that integrates a Recurrent Neural Network (RNN) with a Finite State Accep-tor (FSA).", "labels": [], "entities": [{"text": "automatic poetry generation", "start_pos": 12, "end_pos": 39, "type": "TASK", "confidence": 0.6717553933461508}, {"text": "Finite State Accep-tor (FSA)", "start_pos": 103, "end_pos": 131, "type": "METRIC", "confidence": 0.7528172433376312}]}, {"text": "It generates sonnets given arbitrary topics.", "labels": [], "entities": []}, {"text": "Furthermore, Hafez enables users to revise and polish generated poems by adjusting various style configurations.", "labels": [], "entities": []}, {"text": "Experiments demonstrate that such \"pol-ish\" mechanisms consider the user's intention and lead to a better poem.", "labels": [], "entities": []}, {"text": "For evaluation , we build a web interface where users can rate the quality of each poem from 1 to 5 stars.", "labels": [], "entities": []}, {"text": "We also speedup the whole system by a factor of 10, via vocabulary pruning and GPU computation, so that adequate feedback can be collected at a fast pace.", "labels": [], "entities": []}, {"text": "Based on such feedback, the system learns to adjust its parameters to improve poetry quality.", "labels": [], "entities": []}], "introductionContent": [{"text": "Automated poetry generation is attracting increasing research effort.", "labels": [], "entities": [{"text": "Automated poetry generation", "start_pos": 0, "end_pos": 27, "type": "TASK", "confidence": 0.8009676337242126}]}, {"text": "Researchers approach the problem by using grammatical and semantic templates or treating the generation task as a translation/summarization task (.", "labels": [], "entities": [{"text": "translation/summarization task", "start_pos": 114, "end_pos": 144, "type": "TASK", "confidence": 0.8570280224084854}]}, {"text": "However, such poetry generation systems face these challenges: 1.", "labels": [], "entities": []}, {"text": "Difficulty of evaluating poetry quality.", "labels": [], "entities": []}, {"text": "Automatic evaluation methods, like BLEU, cannot judge the rhythm, meter, creativity or syntactic/semantic coherence, and furthermore, there is no test data inmost cases.", "labels": [], "entities": [{"text": "BLEU", "start_pos": 35, "end_pos": 39, "type": "METRIC", "confidence": 0.9935582280158997}]}, {"text": "Subjective * *equal contributions evaluation requires evaluators to have relatively high literary training, so systems will receive limited feedback during the development phase.", "labels": [], "entities": []}, {"text": "2. Inability to adjust the generated poem.", "labels": [], "entities": []}, {"text": "When poets compose a poem, they usually need to revise and polish the draft from different aspects (e.g., word choice, sentiment, alliteration, etc.) for several iterations until satisfaction.", "labels": [], "entities": []}, {"text": "This is a crucial step for poetry creation.", "labels": [], "entities": [{"text": "poetry creation", "start_pos": 27, "end_pos": 42, "type": "TASK", "confidence": 0.8204521536827087}]}, {"text": "However, given a user-supplied topic or phrase, most existing automated systems can only generate different poems by using different random seeds, providing no other support for the user to polish the generated poem in a desired direction.", "labels": [], "entities": []}, {"text": "Generating a poem may require a heavy search procedure.", "labels": [], "entities": []}, {"text": "For example, the system of needs 20 seconds fora four-line poem.", "labels": [], "entities": []}, {"text": "Such slow speed is a serious bottleneck fora smooth user experience, and prevents the large-scale collection of feedback for system tuning.", "labels": [], "entities": []}, {"text": "This work is based on our previous poetry generation system called Hafez (, which generates poems in three steps: (1) search for related rhyme words given usersupplied topic, (2) create a finite-state acceptor (FSA) that incorporates the rhyme words and controls meter, and (3) use a recurrent neural network (RNN) to generate the poem string, guided by the FSA.", "labels": [], "entities": [{"text": "FSA", "start_pos": 358, "end_pos": 361, "type": "DATASET", "confidence": 0.7539083957672119}]}, {"text": "We address the above-mentioned challenges with the following approaches:", "labels": [], "entities": []}], "datasetContent": [{"text": "We design an Amazon Mechanical Turk task to explore the effect of style options.", "labels": [], "entities": []}, {"text": "In this task Turkers first use Hafez to generate a default poem on an arbitrary topic with the default style configuration, and rate it.", "labels": [], "entities": []}, {"text": "Next, they are asked to adjust the style configurations to re-generate at least five different adjusted poems with the same rhyme words, and rate them as well.", "labels": [], "entities": []}, {"text": "Improving the quality of adjusted poems over the default poem is not required for finishing the task, but it is encouraged.", "labels": [], "entities": []}, {"text": "For each task, Turkers can select the best generated poem, and if subsequent human judges (domain experts) rank that poem as \"great\", a bonus reward will be assigned to that Turker.", "labels": [], "entities": []}, {"text": "We gathered data from 62 completed HITs (Human Intelligence Tasks) for this task.", "labels": [], "entities": [{"text": "HITs (Human Intelligence Tasks)", "start_pos": 35, "end_pos": 66, "type": "TASK", "confidence": 0.5708456188440323}]}], "tableCaptions": []}